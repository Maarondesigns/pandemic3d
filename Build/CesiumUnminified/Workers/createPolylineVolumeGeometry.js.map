{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../../Source/Core/oneTimeWarning.js","../../../../Source/Core/PolylineVolumeGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\n\n    var warnings = {};\n\n    /**\n     * Logs a one time message to the console.  Use this function instead of\n     * <code>console.log</code> directly since this does not log duplicate messages\n     * unless it is called from multiple workers.\n     *\n     * @exports oneTimeWarning\n     *\n     * @param {String} identifier The unique identifier for this warning.\n     * @param {String} [message=identifier] The message to log to the console.\n     *\n     * @example\n     * for(var i=0;i<foo.length;++i) {\n     *    if (!defined(foo[i].bar)) {\n     *       // Something that can be recovered from but may happen a lot\n     *       oneTimeWarning('foo.bar undefined', 'foo.bar is undefined. Setting to 0.');\n     *       foo[i].bar = 0;\n     *       // ...\n     *    }\n     * }\n     *\n     * @private\n     */\n    function oneTimeWarning(identifier, message) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(identifier)) {\n            throw new DeveloperError('identifier is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(warnings[identifier])) {\n            warnings[identifier] = true;\n            console.warn(defaultValue(message, identifier));\n        }\n    }\n\n    oneTimeWarning.geometryOutlines = 'Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.';\n\n    oneTimeWarning.geometryZIndex = 'Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored';\n\n    oneTimeWarning.geometryHeightReference = 'Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored';\n    oneTimeWarning.geometryExtrudedHeightReference = 'Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored';\nexport default oneTimeWarning;\n","import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingRectangle from './BoundingRectangle.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport oneTimeWarning from './oneTimeWarning.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\nimport WindingOrder from './WindingOrder.js';\n\n    function computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\n        var attributes = new GeometryAttributes();\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : combinedPositions\n            });\n        }\n        var shapeLength = shape.length;\n        var vertexCount = combinedPositions.length / 3;\n        var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n        var firstEndIndices = PolygonPipeline.triangulate(shape);\n\n        var indicesCount = (length - 1) * (shapeLength) * 6 + firstEndIndices.length * 2;\n        var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n        var i, j;\n        var ll, ul, ur, lr;\n        var offset = shapeLength * 2;\n        var index = 0;\n        for (i = 0; i < length - 1; i++) {\n            for (j = 0; j < shapeLength - 1; j++) {\n                ll = j * 2 + i * shapeLength * 2;\n                lr = ll + offset;\n                ul = ll + 1;\n                ur = ul + offset;\n\n                indices[index++] = ul;\n                indices[index++] = ll;\n                indices[index++] = ur;\n                indices[index++] = ur;\n                indices[index++] = ll;\n                indices[index++] = lr;\n            }\n            ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n            ul = ll + 1;\n            ur = ul + offset;\n            lr = ll + offset;\n\n            indices[index++] = ul;\n            indices[index++] = ll;\n            indices[index++] = ur;\n            indices[index++] = ur;\n            indices[index++] = ll;\n            indices[index++] = lr;\n        }\n\n        if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) { // st required for tangent/bitangent calculation\n            var st = new Float32Array(vertexCount * 2);\n            var lengthSt = 1 / (length - 1);\n            var heightSt = 1 / (boundingRectangle.height);\n            var heightOffset = boundingRectangle.height / 2;\n            var s, t;\n            var stindex = 0;\n            for (i = 0; i < length; i++) {\n                s = i * lengthSt;\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n                for (j = 1; j < shapeLength; j++) {\n                    t = heightSt * (shape[j].y + heightOffset);\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                }\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = 0;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = (length - 1) * lengthSt;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : new Float32Array(st)\n            });\n        }\n\n        var endOffset = vertexCount - shapeLength * 2;\n        for (i = 0; i < firstEndIndices.length; i += 3) {\n            var v0 = firstEndIndices[i] + endOffset;\n            var v1 = firstEndIndices[i + 1] + endOffset;\n            var v2 = firstEndIndices[i + 2] + endOffset;\n\n            indices[index++] = v0;\n            indices[index++] = v1;\n            indices[index++] = v2;\n            indices[index++] = v2 + shapeLength;\n            indices[index++] = v1 + shapeLength;\n            indices[index++] = v0 + shapeLength;\n        }\n\n        var geometry = new Geometry({\n            attributes : attributes,\n            indices : indices,\n            boundingSphere : BoundingSphere.fromVertices(combinedPositions),\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        if (vertexFormat.normal) {\n            geometry = GeometryPipeline.computeNormal(geometry);\n        }\n\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n            try {\n                geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n            } catch (e) {\n                oneTimeWarning('polyline-volume-tangent-bitangent', 'Unable to compute tangents and bitangents for polyline volume geometry');\n                //TODO https://github.com/CesiumGS/cesium/issues/3609\n            }\n\n            if (!vertexFormat.tangent) {\n                geometry.attributes.tangent = undefined;\n            }\n            if (!vertexFormat.bitangent) {\n                geometry.attributes.bitangent = undefined;\n            }\n            if (!vertexFormat.st) {\n                geometry.attributes.st = undefined;\n            }\n        }\n\n        return geometry;\n    }\n\n    /**\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n     *\n     * @alias PolylineVolumeGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\n     * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see PolylineVolumeGeometry#createGeometry\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n     *\n     * @example\n     * function computeCircle(radius) {\n     *   var positions = [];\n     *   for (var i = 0; i < 360; i++) {\n     *     var radians = Cesium.Math.toRadians(i);\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n     *   }\n     *   return positions;\n     * }\n     *\n     * var volume = new Cesium.PolylineVolumeGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0\n     *   ]),\n     *   shapePositions : computeCircle(100000.0)\n     * });\n     */\n    function PolylineVolumeGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.polylinePositions;\n        var shape = options.shapePositions;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(positions)) {\n            throw new DeveloperError('options.polylinePositions is required.');\n        }\n        if (!defined(shape)) {\n            throw new DeveloperError('options.shapePositions is required.');\n        }\n        //>>includeEnd('debug');\n\n        this._positions = positions;\n        this._shape = shape;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._workerName = 'createPolylineVolumeGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineVolumeGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineVolumeGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var shape = value._shape;\n        length = shape.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            Cartesian2.pack(shape[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        polylinePositions : undefined,\n        shapePositions : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        cornerType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n     * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n     */\n    PolylineVolumeGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var shape = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            shape[i] = Cartesian2.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.polylinePositions = positions;\n            scratchOptions.shapePositions = shape;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            return new PolylineVolumeGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._shape = shape;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var brScratch = new BoundingRectangle();\n\n    /**\n     * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineVolumeGeometry.createGeometry = function(polylineVolumeGeometry) {\n        var positions = polylineVolumeGeometry._positions;\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var shape2D = polylineVolumeGeometry._shape;\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\n            return undefined;\n        }\n\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n            shape2D.reverse();\n        }\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\n        return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\n    };\nexport default PolylineVolumeGeometry;\n","import defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport PolylineVolumeGeometry from '../Core/PolylineVolumeGeometry.js';\n\n    function createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\n        if (defined(offset)) {\n            polylineVolumeGeometry = PolylineVolumeGeometry.unpack(polylineVolumeGeometry, offset);\n        }\n        polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(polylineVolumeGeometry._ellipsoid);\n        return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\n    }\nexport default createPolylineVolumeGeometry;\n"],"names":["defined","DeveloperError","defaultValue","GeometryAttributes","GeometryAttribute","ComponentDatatype","PolygonPipeline","IndexDatatype","Geometry","BoundingSphere","PrimitiveType","GeometryPipeline","Ellipsoid","CornerType","VertexFormat","CesiumMath","Cartesian3","Cartesian2","BoundingRectangle","arrayRemoveDuplicates","PolylineVolumeGeometryLibrary","WindingOrder"],"mappings":"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"}