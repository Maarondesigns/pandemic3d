{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/Core/TerrainProvider.js","../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\n     * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\n     * interface and is not intended to be instantiated directly.\n     *\n     * @alias TerrainProvider\n     * @constructor\n     *\n     * @see EllipsoidTerrainProvider\n     * @see CesiumTerrainProvider\n     * @see VRTheWorldTerrainProvider\n     * @see GoogleEarthEnterpriseTerrainProvider\n     */\n    function TerrainProvider() {\n        DeveloperError.throwInstantiationError();\n    }\n\n    Object.defineProperties(TerrainProvider.prototype, {\n        /**\n         * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\n         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n         * are passed an instance of {@link TileProviderError}.\n         * @memberof TerrainProvider.prototype\n         * @type {Event}\n         */\n        errorEvent : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n         * the source of the terrain. This function should\n         * not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Credit}\n         */\n        credit : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets the tiling scheme used by the provider.  This function should\n         * not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {TilingScheme}\n         */\n        tilingScheme : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the provider is ready for use.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        ready : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a promise that resolves to true when the provider is ready for use.\n         * @memberof TerrainProvider.prototype\n         * @type {Promise.<Boolean>}\n         * @readonly\n         */\n        readyPromise : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n         * indicates which areas of the globe are water rather than land, so they can be rendered\n         * as a reflective surface with animated waves.  This function should not be\n         * called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        hasWaterMask : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets a value indicating whether or not the requested tiles include vertex normals.\n         * This function should not be called before {@link TerrainProvider#ready} returns true.\n         * @memberof TerrainProvider.prototype\n         * @type {Boolean}\n         */\n        hasVertexNormals : {\n            get : DeveloperError.throwInstantiationError\n        },\n\n        /**\n         * Gets an object that can be used to determine availability of terrain from this provider, such as\n         * at points and in rectangles.  This function should not be called before\n         * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n         * information is not available.\n         * @memberof TerrainProvider.prototype\n         * @type {TileAvailability}\n         */\n        availability : {\n            get : DeveloperError.throwInstantiationError\n        }\n    });\n\n    var regularGridIndicesCache = [];\n\n    /**\n     * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\n     * this function multiple times with the same grid width and height returns the\n     * same list of indices.  The total number of vertices must be less than or equal\n     * to 65536.\n     *\n     * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\n     * @param {Number} height The number of vertices in the regular grid in the vertical direction.\n     * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\n     */\n    TerrainProvider.getRegularGridIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridIndicesCache[width] = byWidth = [];\n        }\n\n        var indices = byWidth[height];\n        if (!defined(indices)) {\n            if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\n                indices = byWidth[height] = new Uint16Array((width - 1) * (height - 1) * 6);\n            } else {\n                indices = byWidth[height] = new Uint32Array((width - 1) * (height - 1) * 6);\n            }\n            addRegularGridIndices(width, height, indices, 0);\n        }\n\n        return indices;\n    };\n\n    var regularGridAndEdgeIndicesCache = [];\n\n    /**\n     * @private\n     */\n    TerrainProvider.getRegularGridIndicesAndEdgeIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridAndEdgeIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridAndEdgeIndicesCache[width] = byWidth = [];\n        }\n\n        var indicesAndEdges = byWidth[height];\n        if (!defined(indicesAndEdges)) {\n            var indices = TerrainProvider.getRegularGridIndices(width, height);\n\n            var edgeIndices = getEdgeIndices(width, height);\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n            indicesAndEdges = byWidth[height] = {\n                indices : indices,\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\n                southIndicesEastToWest : southIndicesEastToWest,\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n                northIndicesWestToEast : northIndicesWestToEast\n            };\n        }\n\n        return indicesAndEdges;\n    };\n\n    var regularGridAndSkirtAndEdgeIndicesCache = [];\n\n    /**\n     * @private\n     */\n    TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function(width, height) {\n        //>>includeStart('debug', pragmas.debug);\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\n        }\n        //>>includeEnd('debug');\n\n        var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\n        if (!defined(byWidth)) {\n            regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\n        }\n\n        var indicesAndEdges = byWidth[height];\n        if (!defined(indicesAndEdges)) {\n            var gridVertexCount = width * height;\n            var gridIndexCount = (width - 1) * (height - 1) * 6;\n            var edgeVertexCount = width * 2 + height * 2;\n            var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\n            var vertexCount = gridVertexCount + edgeVertexCount;\n            var indexCount = gridIndexCount + edgeIndexCount;\n\n            var edgeIndices = getEdgeIndices(width, height);\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n            var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\n            addRegularGridIndices(width, height, indices, 0);\n            TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, gridVertexCount, indices, gridIndexCount);\n\n            indicesAndEdges = byWidth[height] = {\n                indices : indices,\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\n                southIndicesEastToWest : southIndicesEastToWest,\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n                northIndicesWestToEast : northIndicesWestToEast,\n                indexCountWithoutSkirts : gridIndexCount\n            };\n        }\n\n        return indicesAndEdges;\n    };\n\n    /**\n     * @private\n     */\n    TerrainProvider.addSkirtIndices = function(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, vertexCount, indices, offset) {\n        var vertexIndex = vertexCount;\n        offset = addSkirtIndices(westIndicesSouthToNorth, vertexIndex, indices, offset);\n        vertexIndex += westIndicesSouthToNorth.length;\n        offset = addSkirtIndices(southIndicesEastToWest, vertexIndex, indices, offset);\n        vertexIndex += southIndicesEastToWest.length;\n        offset = addSkirtIndices(eastIndicesNorthToSouth, vertexIndex, indices, offset);\n        vertexIndex += eastIndicesNorthToSouth.length;\n        addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\n    };\n\n    function getEdgeIndices(width, height) {\n        var westIndicesSouthToNorth = new Array(height);\n        var southIndicesEastToWest = new Array(width);\n        var eastIndicesNorthToSouth = new Array(height);\n        var northIndicesWestToEast = new Array(width);\n\n        var i;\n        for (i = 0; i < width; ++i) {\n            northIndicesWestToEast[i] = i;\n            southIndicesEastToWest[i] = width * height - 1 - i;\n        }\n\n        for (i = 0; i < height; ++i) {\n            eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\n            westIndicesSouthToNorth[i] = (height - i - 1) * width;\n        }\n\n        return {\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\n            southIndicesEastToWest : southIndicesEastToWest,\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n            northIndicesWestToEast : northIndicesWestToEast\n        };\n    }\n\n    function addRegularGridIndices(width, height, indices, offset) {\n        var index = 0;\n        for (var j = 0; j < height - 1; ++j) {\n            for (var i = 0; i < width - 1; ++i) {\n                var upperLeft = index;\n                var lowerLeft = upperLeft + width;\n                var lowerRight = lowerLeft + 1;\n                var upperRight = upperLeft + 1;\n\n                indices[offset++] = upperLeft;\n                indices[offset++] = lowerLeft;\n                indices[offset++] = upperRight;\n                indices[offset++] = upperRight;\n                indices[offset++] = lowerLeft;\n                indices[offset++] = lowerRight;\n\n                ++index;\n            }\n            ++index;\n        }\n    }\n\n    function addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\n        var previousIndex = edgeIndices[0];\n\n        var length = edgeIndices.length;\n        for (var i = 1; i < length; ++i) {\n            var index = edgeIndices[i];\n\n            indices[offset++] = previousIndex;\n            indices[offset++] = index;\n            indices[offset++] = vertexIndex;\n\n            indices[offset++] = vertexIndex;\n            indices[offset++] = index;\n            indices[offset++] = vertexIndex + 1;\n\n            previousIndex = index;\n            ++vertexIndex;\n        }\n\n        return offset;\n    }\n\n    /**\n     * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\n     * ensure that adjacent heightmap vertices are separated by no more than\n     * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\n     * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\n     * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\n     * @type {Number}\n     */\n    TerrainProvider.heightmapTerrainQuality = 0.25;\n\n    /**\n     * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\n     *\n     * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\n     * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\n     * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\n     * @returns {Number} An estimated geometric error.\n     */\n    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {\n        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);\n    };\n\n    /**\n     * Requests the geometry for a given tile.  This function should not be called before\n     * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\n     * may optionally include a water mask and an indication of which child tiles are available.\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @param {Request} [request] The request object. Intended for internal use only.\n     *\n     * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n     *          returns undefined instead of a promise, it is an indication that too many requests are already\n     *          pending and the request will be retried later.\n     */\n    TerrainProvider.prototype.requestTileGeometry = DeveloperError.throwInstantiationError;\n\n    /**\n     * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\n     * called before {@link TerrainProvider#ready} returns true.\n     * @function\n     *\n     * @param {Number} level The tile level for which to get the maximum geometric error.\n     * @returns {Number} The maximum geometric error.\n     */\n    TerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\n\n    /**\n     * Determines whether data for a tile is available to be loaded.\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\n     */\n    TerrainProvider.prototype.getTileDataAvailable = DeveloperError.throwInstantiationError;\n\n    /**\n     * Makes sure we load availability data for a tile\n     * @function\n     *\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\n     * @param {Number} level The level of the tile for which to request geometry.\n     * @returns {undefined|Promise} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n     */\n    TerrainProvider.prototype.loadTileDataAvailability = DeveloperError.throwInstantiationError;\nexport default TerrainProvider;\n","import AttributeCompression from '../Core/AttributeCompression.js';\nimport AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\nimport TerrainProvider from '../Core/TerrainProvider.js';\nimport Transforms from '../Core/Transforms.js';\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\n\n    var maxShort = 32767;\n\n    var cartesian3Scratch = new Cartesian3();\n    var scratchMinimum = new Cartesian3();\n    var scratchMaximum = new Cartesian3();\n    var cartographicScratch = new Cartographic();\n    var toPack = new Cartesian2();\n    var scratchNormal = new Cartesian3();\n    var scratchToENU = new Matrix4();\n    var scratchFromENU = new Matrix4();\n\n    function createVerticesFromQuantizedTerrainMesh(parameters, transferableObjects) {\n        var quantizedVertices = parameters.quantizedVertices;\n        var quantizedVertexCount = quantizedVertices.length / 3;\n        var octEncodedNormals = parameters.octEncodedNormals;\n        var edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length +\n                              parameters.southIndices.length + parameters.northIndices.length;\n        var includeWebMercatorT = parameters.includeWebMercatorT;\n\n        var rectangle = Rectangle.clone(parameters.rectangle);\n        var west = rectangle.west;\n        var south = rectangle.south;\n        var east = rectangle.east;\n        var north = rectangle.north;\n\n        var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\n\n        var exaggeration = parameters.exaggeration;\n        var minimumHeight = parameters.minimumHeight * exaggeration;\n        var maximumHeight = parameters.maximumHeight * exaggeration;\n\n        var center = parameters.relativeToCenter;\n        var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\n        var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\n\n        var southMercatorY;\n        var oneOverMercatorHeight;\n        if (includeWebMercatorT) {\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(south);\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) - southMercatorY);\n        }\n\n        var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\n        var vBuffer = quantizedVertices.subarray(quantizedVertexCount, 2 * quantizedVertexCount);\n        var heightBuffer = quantizedVertices.subarray(quantizedVertexCount * 2, 3 * quantizedVertexCount);\n        var hasVertexNormals = defined(octEncodedNormals);\n\n        var uvs = new Array(quantizedVertexCount);\n        var heights = new Array(quantizedVertexCount);\n        var positions = new Array(quantizedVertexCount);\n        var webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];\n\n        var minimum = scratchMinimum;\n        minimum.x = Number.POSITIVE_INFINITY;\n        minimum.y = Number.POSITIVE_INFINITY;\n        minimum.z = Number.POSITIVE_INFINITY;\n\n        var maximum = scratchMaximum;\n        maximum.x = Number.NEGATIVE_INFINITY;\n        maximum.y = Number.NEGATIVE_INFINITY;\n        maximum.z = Number.NEGATIVE_INFINITY;\n\n        var minLongitude = Number.POSITIVE_INFINITY;\n        var maxLongitude = Number.NEGATIVE_INFINITY;\n        var minLatitude = Number.POSITIVE_INFINITY;\n        var maxLatitude = Number.NEGATIVE_INFINITY;\n\n        for (var i = 0; i < quantizedVertexCount; ++i) {\n            var rawU = uBuffer[i];\n            var rawV = vBuffer[i];\n\n            var u = rawU / maxShort;\n            var v = rawV / maxShort;\n            var height = CesiumMath.lerp(minimumHeight, maximumHeight, heightBuffer[i] / maxShort);\n\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\n            cartographicScratch.height = height;\n\n            minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\n            maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\n            minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\n            maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\n\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch);\n\n            uvs[i] = new Cartesian2(u, v);\n            heights[i] = height;\n            positions[i] = position;\n\n            if (includeWebMercatorT) {\n                webMercatorTs[i] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\n            }\n\n            Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\n\n            Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\n            Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\n        }\n\n        var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function(a, b) {\n            return uvs[a].y - uvs[b].y;\n        });\n        var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function(a, b) {\n            return uvs[b].y - uvs[a].y;\n        });\n        var southIndicesEastToWest = copyAndSort(parameters.southIndices, function(a, b) {\n            return uvs[b].x - uvs[a].x;\n        });\n        var northIndicesWestToEast = copyAndSort(parameters.northIndices, function(a, b) {\n            return uvs[a].x - uvs[b].x;\n        });\n\n        var orientedBoundingBox;\n        var boundingSphere;\n\n        if (exaggeration !== 1.0) {\n            // Bounding volumes need to be recomputed since the tile payload assumes no exaggeration.\n            boundingSphere = BoundingSphere.fromPoints(positions);\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\n        }\n\n        var occludeePointInScaledSpace;\n        if (exaggeration !== 1.0 || minimumHeight < 0.0) {\n            // Horizon culling point needs to be recomputed since the tile payload assumes no exaggeration.\n            var occluder = new EllipsoidalOccluder(ellipsoid);\n            occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(center, positions, minimumHeight);\n        }\n\n        var hMin = minimumHeight;\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.westIndices, parameters.westSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.southIndices, parameters.southSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.eastIndices, parameters.eastSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.northIndices, parameters.northSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\n\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\n        var encoding = new TerrainEncoding(aaBox, hMin, maximumHeight, fromENU, hasVertexNormals, includeWebMercatorT);\n        var vertexStride = encoding.getStride();\n        var size = quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\n        var vertexBuffer = new Float32Array(size);\n\n        var bufferIndex = 0;\n        for (var j = 0; j < quantizedVertexCount; ++j) {\n            if (hasVertexNormals) {\n                var n = j * 2.0;\n                toPack.x = octEncodedNormals[n];\n                toPack.y = octEncodedNormals[n + 1];\n\n                if (exaggeration !== 1.0) {\n                    var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\n                    var fromENUNormal = Transforms.eastNorthUpToFixedFrame(positions[j], ellipsoid, scratchFromENU);\n                    var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\n\n                    Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\n                    normal.z *= exaggeration;\n                    Cartesian3.normalize(normal, normal);\n\n                    Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\n                    Cartesian3.normalize(normal, normal);\n\n                    AttributeCompression.octEncode(normal, toPack);\n                }\n            }\n\n            bufferIndex = encoding.encode(vertexBuffer, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j]);\n        }\n\n        var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\n        var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\n        var indexBuffer = IndexDatatype.createTypedArray(quantizedVertexCount + edgeVertexCount, indexBufferLength);\n        indexBuffer.set(parameters.indices, 0);\n\n        var percentage = 0.0001;\n        var lonOffset = (maxLongitude - minLongitude) * percentage;\n        var latOffset = (maxLatitude - minLatitude) * percentage;\n        var westLongitudeOffset = -lonOffset;\n        var westLatitudeOffset = 0.0;\n        var eastLongitudeOffset = lonOffset;\n        var eastLatitudeOffset = 0.0;\n        var northLongitudeOffset = 0.0;\n        var northLatitudeOffset = latOffset;\n        var southLongitudeOffset = 0.0;\n        var southLatitudeOffset = -latOffset;\n\n        // Add skirts.\n        var vertexBufferIndex = quantizedVertexCount * vertexStride;\n        addSkirt(vertexBuffer, vertexBufferIndex, westIndicesSouthToNorth, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.westSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, westLongitudeOffset, westLatitudeOffset);\n        vertexBufferIndex += parameters.westIndices.length * vertexStride;\n        addSkirt(vertexBuffer, vertexBufferIndex, southIndicesEastToWest, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.southSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, southLongitudeOffset, southLatitudeOffset);\n        vertexBufferIndex += parameters.southIndices.length * vertexStride;\n        addSkirt(vertexBuffer, vertexBufferIndex, eastIndicesNorthToSouth, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.eastSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, eastLongitudeOffset, eastLatitudeOffset);\n        vertexBufferIndex += parameters.eastIndices.length * vertexStride;\n        addSkirt(vertexBuffer, vertexBufferIndex, northIndicesWestToEast, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.northSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, northLongitudeOffset, northLatitudeOffset);\n\n        TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, quantizedVertexCount, indexBuffer, parameters.indices.length);\n\n        transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\n\n        return {\n            vertices : vertexBuffer.buffer,\n            indices : indexBuffer.buffer,\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\n            southIndicesEastToWest : southIndicesEastToWest,\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n            northIndicesWestToEast : northIndicesWestToEast,\n            vertexStride : vertexStride,\n            center : center,\n            minimumHeight : minimumHeight,\n            maximumHeight : maximumHeight,\n            boundingSphere : boundingSphere,\n            orientedBoundingBox : orientedBoundingBox,\n            occludeePointInScaledSpace : occludeePointInScaledSpace,\n            encoding : encoding,\n            indexCountWithoutSkirts : parameters.indices.length\n        };\n    }\n\n    function findMinMaxSkirts(edgeIndices, edgeHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum) {\n        var hMin = Number.POSITIVE_INFINITY;\n\n        var north = rectangle.north;\n        var south = rectangle.south;\n        var east = rectangle.east;\n        var west = rectangle.west;\n\n        if (east < west) {\n            east += CesiumMath.TWO_PI;\n        }\n\n        var length = edgeIndices.length;\n        for (var i = 0; i < length; ++i) {\n            var index = edgeIndices[i];\n            var h = heights[index];\n            var uv = uvs[index];\n\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\n            cartographicScratch.height = h - edgeHeight;\n\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\n            Matrix4.multiplyByPoint(toENU, position, position);\n\n            Cartesian3.minimumByComponent(position, minimum, minimum);\n            Cartesian3.maximumByComponent(position, maximum, maximum);\n\n            hMin = Math.min(hMin, cartographicScratch.height);\n        }\n        return hMin;\n    }\n\n    function addSkirt(vertexBuffer, vertexBufferIndex, edgeVertices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, skirtLength, exaggeration, southMercatorY, oneOverMercatorHeight, longitudeOffset, latitudeOffset) {\n        var hasVertexNormals = defined(octEncodedNormals);\n\n        var north = rectangle.north;\n        var south = rectangle.south;\n        var east = rectangle.east;\n        var west = rectangle.west;\n\n        if (east < west) {\n            east += CesiumMath.TWO_PI;\n        }\n\n        var length = edgeVertices.length;\n        for (var i = 0; i < length; ++i) {\n            var index = edgeVertices[i];\n            var h = heights[index];\n            var uv = uvs[index];\n\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\n            cartographicScratch.height = h - skirtLength;\n\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\n\n            if (hasVertexNormals) {\n                var n = index * 2.0;\n                toPack.x = octEncodedNormals[n];\n                toPack.y = octEncodedNormals[n + 1];\n\n                if (exaggeration !== 1.0) {\n                    var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\n                    var fromENUNormal = Transforms.eastNorthUpToFixedFrame(cartesian3Scratch, ellipsoid, scratchFromENU);\n                    var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\n\n                    Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\n                    normal.z *= exaggeration;\n                    Cartesian3.normalize(normal, normal);\n\n                    Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\n                    Cartesian3.normalize(normal, normal);\n\n                    AttributeCompression.octEncode(normal, toPack);\n                }\n            }\n\n            var webMercatorT;\n            if (encoding.hasWebMercatorT) {\n                webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\n            }\n\n            vertexBufferIndex = encoding.encode(vertexBuffer, vertexBufferIndex, position, uv, cartographicScratch.height, toPack, webMercatorT);\n        }\n    }\n\n    function copyAndSort(typedArray, comparator) {\n        var copy;\n        if (typeof typedArray.slice === 'function') {\n            copy = typedArray.slice();\n            if (typeof copy.sort !== 'function') {\n                // Sliced typed array isn't sortable, so we can't use it.\n                copy = undefined;\n            }\n        }\n\n        if (!defined(copy)) {\n            copy = Array.prototype.slice.call(typedArray);\n        }\n\n        copy.sort(comparator);\n\n        return copy;\n    }\nexport default createTaskProcessorWorker(createVerticesFromQuantizedTerrainMesh);\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype","Cartesian3","Cartographic","Cartesian2","Matrix4","Rectangle","Ellipsoid","Transforms","WebMercatorProjection","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","AttributeCompression"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAKI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,eAAe,GAAG;IAC/B,QAAQA,oBAAc,CAAC,uBAAuB,EAAE,CAAC;IACjD,KAAK;AACL;IACA,IAAI,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE;IACvD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,UAAU,GAAG;IACrB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,MAAM,GAAG;IACjB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,YAAY,GAAG;IACvB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,KAAK,GAAG;IAChB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,YAAY,GAAG;IACvB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,YAAY,GAAG;IACvB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,gBAAgB,GAAG;IAC3B,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,YAAY,GAAG;IACvB,YAAY,GAAG,GAAGA,oBAAc,CAAC,uBAAuB;IACxD,SAAS;IACT,KAAK,CAAC,CAAC;AACP;IACA,IAAI,IAAI,uBAAuB,GAAG,EAAE,CAAC;AACrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,qBAAqB,GAAG,SAAS,KAAK,EAAE,MAAM,EAAE;IACpE;IACA,QAAQ,IAAI,KAAK,GAAG,MAAM,IAAIC,gBAAU,CAAC,cAAc,EAAE;IACzD,YAAY,MAAM,IAAID,oBAAc,CAAC,gFAAgF,CAAC,CAAC;IACvH,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACrD,QAAQ,IAAI,CAACE,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,uBAAuB,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC;IAC1D,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IACtC,QAAQ,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,IAAI,KAAK,GAAG,MAAM,GAAGD,gBAAU,CAAC,oBAAoB,EAAE;IAClE,gBAAgB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,WAAW,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5F,aAAa,MAAM;IACnB,gBAAgB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,WAAW,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5F,aAAa;IACb,YAAY,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAC7D,SAAS;AACT;IACA,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,8BAA8B,GAAG,EAAE,CAAC;AAC5C;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,mCAAmC,GAAG,SAAS,KAAK,EAAE,MAAM,EAAE;IAClF;IACA,QAAQ,IAAI,KAAK,GAAG,MAAM,IAAIA,gBAAU,CAAC,cAAc,EAAE;IACzD,YAAY,MAAM,IAAID,oBAAc,CAAC,gFAAgF,CAAC,CAAC;IACvH,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,8BAA8B,CAAC,KAAK,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAACE,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,8BAA8B,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC;IACjE,SAAS;AACT;IACA,QAAQ,IAAI,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAACA,YAAO,CAAC,eAAe,CAAC,EAAE;IACvC,YAAY,IAAI,OAAO,GAAG,eAAe,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC/E;IACA,YAAY,IAAI,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,YAAY,IAAI,uBAAuB,GAAG,WAAW,CAAC,uBAAuB,CAAC;IAC9E,YAAY,IAAI,sBAAsB,GAAG,WAAW,CAAC,sBAAsB,CAAC;IAC5E,YAAY,IAAI,uBAAuB,GAAG,WAAW,CAAC,uBAAuB,CAAC;IAC9E,YAAY,IAAI,sBAAsB,GAAG,WAAW,CAAC,sBAAsB,CAAC;AAC5E;IACA,YAAY,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG;IAChD,gBAAgB,OAAO,GAAG,OAAO;IACjC,gBAAgB,uBAAuB,GAAG,uBAAuB;IACjE,gBAAgB,sBAAsB,GAAG,sBAAsB;IAC/D,gBAAgB,uBAAuB,GAAG,uBAAuB;IACjE,gBAAgB,sBAAsB,GAAG,sBAAsB;IAC/D,aAAa,CAAC;IACd,SAAS;AACT;IACA,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK,CAAC;AACN;IACA,IAAI,IAAI,sCAAsC,GAAG,EAAE,CAAC;AACpD;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,2CAA2C,GAAG,SAAS,KAAK,EAAE,MAAM,EAAE;IAC1F;IACA,QAAQ,IAAI,KAAK,GAAG,MAAM,IAAID,gBAAU,CAAC,cAAc,EAAE;IACzD,YAAY,MAAM,IAAID,oBAAc,CAAC,gFAAgF,CAAC,CAAC;IACvH,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,sCAAsC,CAAC,KAAK,CAAC,CAAC;IACpE,QAAQ,IAAI,CAACE,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,sCAAsC,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC;IACzE,SAAS;AACT;IACA,QAAQ,IAAI,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAACA,YAAO,CAAC,eAAe,CAAC,EAAE;IACvC,YAAY,IAAI,eAAe,GAAG,KAAK,GAAG,MAAM,CAAC;IACjD,YAAY,IAAI,cAAc,GAAG,CAAC,KAAK,GAAG,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAChE,YAAY,IAAI,eAAe,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;IACzD,YAAY,IAAI,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACtE,YAAY,IAAI,WAAW,GAAG,eAAe,GAAG,eAAe,CAAC;IAChE,YAAY,IAAI,UAAU,GAAG,cAAc,GAAG,cAAc,CAAC;AAC7D;IACA,YAAY,IAAI,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5D,YAAY,IAAI,uBAAuB,GAAG,WAAW,CAAC,uBAAuB,CAAC;IAC9E,YAAY,IAAI,sBAAsB,GAAG,WAAW,CAAC,sBAAsB,CAAC;IAC5E,YAAY,IAAI,uBAAuB,GAAG,WAAW,CAAC,uBAAuB,CAAC;IAC9E,YAAY,IAAI,sBAAsB,GAAG,WAAW,CAAC,sBAAsB,CAAC;AAC5E;IACA,YAAY,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAClF,YAAY,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAC7D,YAAY,eAAe,CAAC,eAAe,CAAC,uBAAuB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,eAAe,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;AACxL;IACA,YAAY,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG;IAChD,gBAAgB,OAAO,GAAG,OAAO;IACjC,gBAAgB,uBAAuB,GAAG,uBAAuB;IACjE,gBAAgB,sBAAsB,GAAG,sBAAsB;IAC/D,gBAAgB,uBAAuB,GAAG,uBAAuB;IACjE,gBAAgB,sBAAsB,GAAG,sBAAsB;IAC/D,gBAAgB,uBAAuB,GAAG,cAAc;IACxD,aAAa,CAAC;IACd,SAAS;AACT;IACA,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,eAAe,GAAG,SAAS,uBAAuB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE;IAC/K,QAAQ,IAAI,WAAW,GAAG,WAAW,CAAC;IACtC,QAAQ,MAAM,GAAG,eAAe,CAAC,uBAAuB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACxF,QAAQ,WAAW,IAAI,uBAAuB,CAAC,MAAM,CAAC;IACtD,QAAQ,MAAM,GAAG,eAAe,CAAC,sBAAsB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACvF,QAAQ,WAAW,IAAI,sBAAsB,CAAC,MAAM,CAAC;IACrD,QAAQ,MAAM,GAAG,eAAe,CAAC,uBAAuB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACxF,QAAQ,WAAW,IAAI,uBAAuB,CAAC,MAAM,CAAC;IACtD,QAAQ,eAAe,CAAC,sBAAsB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC9E,KAAK,CAAC;AACN;IACA,IAAI,SAAS,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE;IAC3C,QAAQ,IAAI,uBAAuB,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IACxD,QAAQ,IAAI,sBAAsB,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACtD,QAAQ,IAAI,uBAAuB,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IACxD,QAAQ,IAAI,sBAAsB,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AACtD;IACA,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;IACpC,YAAY,sBAAsB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C,YAAY,sBAAsB,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/D,SAAS;AACT;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACrC,YAAY,uBAAuB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;IAC7D,YAAY,uBAAuB,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;IAClE,SAAS;AACT;IACA,QAAQ,OAAO;IACf,YAAY,uBAAuB,GAAG,uBAAuB;IAC7D,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,YAAY,uBAAuB,GAAG,uBAAuB;IAC7D,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,SAAS,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE;IACnE,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC7C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChD,gBAAgB,IAAI,SAAS,GAAG,KAAK,CAAC;IACtC,gBAAgB,IAAI,SAAS,GAAG,SAAS,GAAG,KAAK,CAAC;IAClD,gBAAgB,IAAI,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC;IAC/C,gBAAgB,IAAI,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC;AAC/C;IACA,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC;IAC9C,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC;IAC9C,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;IAC/C,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;IAC/C,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC;IAC9C,gBAAgB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;AAC/C;IACA,gBAAgB,EAAE,KAAK,CAAC;IACxB,aAAa;IACb,YAAY,EAAE,KAAK,CAAC;IACpB,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,eAAe,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE;IACxE,QAAQ,IAAI,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAC3C;IACA,QAAQ,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IACxC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,IAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AACvC;IACA,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,aAAa,CAAC;IAC9C,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC;IACtC,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,WAAW,CAAC;AAC5C;IACA,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,WAAW,CAAC;IAC5C,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC;IACtC,YAAY,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,CAAC;AAChD;IACA,YAAY,aAAa,GAAG,KAAK,CAAC;IAClC,YAAY,EAAE,WAAW,CAAC;IAC1B,SAAS;AACT;IACA,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,uBAAuB,GAAG,IAAI,CAAC;AACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,gDAAgD,GAAG,SAAS,SAAS,EAAE,cAAc,EAAE,wBAAwB,EAAE;IACrI,QAAQ,OAAO,SAAS,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,eAAe,CAAC,uBAAuB,IAAI,cAAc,GAAG,wBAAwB,CAAC,CAAC;IAC7I,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,CAAC,mBAAmB,GAAGH,oBAAc,CAAC,uBAAuB,CAAC;AAC3F;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,CAAC,6BAA6B,GAAGA,oBAAc,CAAC,uBAAuB,CAAC;AACrG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,CAAC,oBAAoB,GAAGA,oBAAc,CAAC,uBAAuB,CAAC;AAC5F;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,CAAC,wBAAwB,GAAGA,oBAAc,CAAC,uBAAuB;;IC9W3F,IAAI,QAAQ,GAAG,KAAK,CAAC;AACzB;IACA,IAAI,IAAI,iBAAiB,GAAG,IAAII,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAI,mBAAmB,GAAG,IAAIC,uBAAY,EAAE,CAAC;IACjD,IAAI,IAAI,MAAM,GAAG,IAAIC,qBAAU,EAAE,CAAC;IAClC,IAAI,IAAI,aAAa,GAAG,IAAIF,qBAAU,EAAE,CAAC;IACzC,IAAI,IAAI,YAAY,GAAG,IAAIG,kBAAO,EAAE,CAAC;IACrC,IAAI,IAAI,cAAc,GAAG,IAAIA,kBAAO,EAAE,CAAC;AACvC;IACA,IAAI,SAAS,sCAAsC,CAAC,UAAU,EAAE,mBAAmB,EAAE;IACrF,QAAQ,IAAI,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAI,oBAAoB,GAAG,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IAChE,QAAQ,IAAI,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAI,eAAe,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM;IAC3F,8BAA8B,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;IAC9F,QAAQ,IAAI,mBAAmB,GAAG,UAAU,CAAC,mBAAmB,CAAC;AACjE;IACA,QAAQ,IAAI,SAAS,GAAGC,oBAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC9D,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAClC,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAClC,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;AACpC;IACA,QAAQ,IAAI,SAAS,GAAGC,oBAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AAC9D;IACA,QAAQ,IAAI,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC;IACpE,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC;AACpE;IACA,QAAQ,IAAI,MAAM,GAAG,UAAU,CAAC,gBAAgB,CAAC;IACjD,QAAQ,IAAI,OAAO,GAAGC,qBAAU,CAAC,uBAAuB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC5E,QAAQ,IAAI,KAAK,GAAGH,kBAAO,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAIA,kBAAO,EAAE,CAAC,CAAC;AAC1E;IACA,QAAQ,IAAI,cAAc,CAAC;IAC3B,QAAQ,IAAI,qBAAqB,CAAC;IAClC,QAAQ,IAAI,mBAAmB,EAAE;IACjC,YAAY,cAAc,GAAGI,2CAAqB,CAAC,+BAA+B,CAAC,KAAK,CAAC,CAAC;IAC1F,YAAY,qBAAqB,GAAG,GAAG,IAAIA,2CAAqB,CAAC,+BAA+B,CAAC,KAAK,CAAC,GAAG,cAAc,CAAC,CAAC;IAC1H,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;IAC1E,QAAQ,IAAI,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC,GAAG,oBAAoB,CAAC,CAAC;IACjG,QAAQ,IAAI,YAAY,GAAG,iBAAiB,CAAC,QAAQ,CAAC,oBAAoB,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,CAAC;IAC1G,QAAQ,IAAI,gBAAgB,GAAGT,YAAO,CAAC,iBAAiB,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAClD,QAAQ,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACtD,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxD,QAAQ,IAAI,aAAa,GAAG,mBAAmB,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC;AACvF;IACA,QAAQ,IAAI,OAAO,GAAG,cAAc,CAAC;IACrC,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC7C,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC7C,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;AAC7C;IACA,QAAQ,IAAI,OAAO,GAAG,cAAc,CAAC;IACrC,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC7C,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;IAC7C,QAAQ,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC;AAC7C;IACA,QAAQ,IAAI,YAAY,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACpD,QAAQ,IAAI,YAAY,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACpD,QAAQ,IAAI,WAAW,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACnD,QAAQ,IAAI,WAAW,GAAG,MAAM,CAAC,iBAAiB,CAAC;AACnD;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,EAAE,EAAE,CAAC,EAAE;IACvD,YAAY,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAClC,YAAY,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAClC;IACA,YAAY,IAAI,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC;IACpC,YAAY,IAAI,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC;IACpC,YAAY,IAAI,MAAM,GAAGD,gBAAU,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;AACnG;IACA,YAAY,mBAAmB,CAAC,SAAS,GAAGA,gBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3E,YAAY,mBAAmB,CAAC,QAAQ,GAAGA,gBAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC5E,YAAY,mBAAmB,CAAC,MAAM,GAAG,MAAM,CAAC;AAChD;IACA,YAAY,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IACjF,YAAY,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IACjF,YAAY,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC9E,YAAY,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC9E;IACA,YAAY,IAAI,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;AAClF;IACA,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,IAAIK,qBAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;IAChC,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;AACpC;IACA,YAAY,IAAI,mBAAmB,EAAE;IACrC,gBAAgB,aAAa,CAAC,CAAC,CAAC,GAAG,CAACK,2CAAqB,CAAC,+BAA+B,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,cAAc,IAAI,qBAAqB,CAAC;IAClK,aAAa;AACb;IACA,YAAYJ,kBAAO,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AACxE;IACA,YAAYH,qBAAU,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/E,YAAYA,qBAAU,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/E,SAAS;AACT;IACA,QAAQ,IAAI,uBAAuB,GAAG,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACzF,YAAY,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS,CAAC,CAAC;IACX,QAAQ,IAAI,uBAAuB,GAAG,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACzF,YAAY,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS,CAAC,CAAC;IACX,QAAQ,IAAI,sBAAsB,GAAG,WAAW,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACzF,YAAY,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS,CAAC,CAAC;IACX,QAAQ,IAAI,sBAAsB,GAAG,WAAW,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACzF,YAAY,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,mBAAmB,CAAC;IAChC,QAAQ,IAAI,cAAc,CAAC;AAC3B;IACA,QAAQ,IAAI,YAAY,KAAK,GAAG,EAAE;IAClC;IACA,YAAY,cAAc,GAAGQ,yBAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAClE,YAAY,mBAAmB,GAAGC,uCAAmB,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IACxH,SAAS;AACT;IACA,QAAQ,IAAI,0BAA0B,CAAC;IACvC,QAAQ,IAAI,YAAY,KAAK,GAAG,IAAI,aAAa,GAAG,GAAG,EAAE;IACzD;IACA,YAAY,IAAI,QAAQ,GAAG,IAAIC,mCAAmB,CAAC,SAAS,CAAC,CAAC;IAC9D,YAAY,0BAA0B,GAAG,QAAQ,CAAC,gDAAgD,CAAC,MAAM,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IACrI,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,GAAG,aAAa,CAAC;IACjC,QAAQ,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IACjK,QAAQ,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,gBAAgB,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IACnK,QAAQ,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,eAAe,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IACjK,QAAQ,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,gBAAgB,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;AACnK;IACA,QAAQ,IAAI,KAAK,GAAG,IAAIC,4CAAsB,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACzE,QAAQ,IAAI,QAAQ,GAAG,IAAIC,+BAAe,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;IACvH,QAAQ,IAAI,YAAY,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;IAChD,QAAQ,IAAI,IAAI,GAAG,oBAAoB,GAAG,YAAY,GAAG,eAAe,GAAG,YAAY,CAAC;IACxF,QAAQ,IAAI,YAAY,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;AAClD;IACA,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IAC5B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,EAAE,EAAE,CAAC,EAAE;IACvD,YAAY,IAAI,gBAAgB,EAAE;IAClC,gBAAgB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,gBAAgB,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAChD,gBAAgB,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD;IACA,gBAAgB,IAAI,YAAY,KAAK,GAAG,EAAE;IAC1C,oBAAoB,IAAI,MAAM,GAAGC,yCAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;IACnG,oBAAoB,IAAI,aAAa,GAAGP,qBAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;IACpH,oBAAoB,IAAI,WAAW,GAAGH,kBAAO,CAAC,qBAAqB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AACjG;IACA,oBAAoBA,kBAAO,CAAC,uBAAuB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACjF,oBAAoB,MAAM,CAAC,CAAC,IAAI,YAAY,CAAC;IAC7C,oBAAoBH,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD;IACA,oBAAoBG,kBAAO,CAAC,uBAAuB,CAAC,aAAa,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnF,oBAAoBH,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD;IACA,oBAAoBa,yCAAoB,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACjI,SAAS;AACT;IACA,QAAQ,IAAI,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,QAAQ,IAAI,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,iBAAiB,GAAG,CAAC,CAAC;IAClF,QAAQ,IAAI,WAAW,GAAGd,2BAAa,CAAC,gBAAgB,CAAC,oBAAoB,GAAG,eAAe,EAAE,iBAAiB,CAAC,CAAC;IACpH,QAAQ,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C;IACA,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC;IAChC,QAAQ,IAAI,SAAS,GAAG,CAAC,YAAY,GAAG,YAAY,IAAI,UAAU,CAAC;IACnE,QAAQ,IAAI,SAAS,GAAG,CAAC,WAAW,GAAG,WAAW,IAAI,UAAU,CAAC;IACjE,QAAQ,IAAI,mBAAmB,GAAG,CAAC,SAAS,CAAC;IAC7C,QAAQ,IAAI,kBAAkB,GAAG,GAAG,CAAC;IACrC,QAAQ,IAAI,mBAAmB,GAAG,SAAS,CAAC;IAC5C,QAAQ,IAAI,kBAAkB,GAAG,GAAG,CAAC;IACrC,QAAQ,IAAI,oBAAoB,GAAG,GAAG,CAAC;IACvC,QAAQ,IAAI,mBAAmB,GAAG,SAAS,CAAC;IAC5C,QAAQ,IAAI,oBAAoB,GAAG,GAAG,CAAC;IACvC,QAAQ,IAAI,mBAAmB,GAAG,CAAC,SAAS,CAAC;AAC7C;IACA;IACA,QAAQ,IAAI,iBAAiB,GAAG,oBAAoB,GAAG,YAAY,CAAC;IACpE,QAAQ,QAAQ,CAAC,YAAY,EAAE,iBAAiB,EAAE,uBAAuB,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE,YAAY,EAAE,cAAc,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACtQ,QAAQ,iBAAiB,IAAI,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,YAAY,CAAC;IAC1E,QAAQ,QAAQ,CAAC,YAAY,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,gBAAgB,EAAE,YAAY,EAAE,cAAc,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;IACxQ,QAAQ,iBAAiB,IAAI,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC;IAC3E,QAAQ,QAAQ,CAAC,YAAY,EAAE,iBAAiB,EAAE,uBAAuB,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE,YAAY,EAAE,cAAc,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACtQ,QAAQ,iBAAiB,IAAI,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,YAAY,CAAC;IAC1E,QAAQ,QAAQ,CAAC,YAAY,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,gBAAgB,EAAE,YAAY,EAAE,cAAc,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;AACxQ;IACA,QAAQ,eAAe,CAAC,eAAe,CAAC,uBAAuB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,WAAW,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACxM;IACA,QAAQ,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;AAC1E;IACA,QAAQ,OAAO;IACf,YAAY,QAAQ,GAAG,YAAY,CAAC,MAAM;IAC1C,YAAY,OAAO,GAAG,WAAW,CAAC,MAAM;IACxC,YAAY,uBAAuB,GAAG,uBAAuB;IAC7D,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,YAAY,uBAAuB,GAAG,uBAAuB;IAC7D,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,YAAY,YAAY,GAAG,YAAY;IACvC,YAAY,MAAM,GAAG,MAAM;IAC3B,YAAY,aAAa,GAAG,aAAa;IACzC,YAAY,aAAa,GAAG,aAAa;IACzC,YAAY,cAAc,GAAG,cAAc;IAC3C,YAAY,mBAAmB,GAAG,mBAAmB;IACrD,YAAY,0BAA0B,GAAG,0BAA0B;IACnE,YAAY,QAAQ,GAAG,QAAQ;IAC/B,YAAY,uBAAuB,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM;IAC/D,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,SAAS,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;IACpH,QAAQ,IAAI,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;AAC5C;IACA,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAClC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;AAClC;IACA,QAAQ,IAAI,IAAI,GAAG,IAAI,EAAE;IACzB,YAAY,IAAI,IAAIF,gBAAU,CAAC,MAAM,CAAC;IACtC,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IACxC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,IAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,YAAY,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;AAChC;IACA,YAAY,mBAAmB,CAAC,SAAS,GAAGA,gBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,YAAY,mBAAmB,CAAC,QAAQ,GAAGA,gBAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/E,YAAY,mBAAmB,CAAC,MAAM,GAAG,CAAC,GAAG,UAAU,CAAC;AACxD;IACA,YAAY,IAAI,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IACrG,YAAYM,kBAAO,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC/D;IACA,YAAYH,qBAAU,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACtE,YAAYA,qBAAU,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACtE;IACA,YAAY,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,SAAS,QAAQ,CAAC,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,qBAAqB,EAAE,eAAe,EAAE,cAAc,EAAE;IACzO,QAAQ,IAAI,gBAAgB,GAAGF,YAAO,CAAC,iBAAiB,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAClC,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;AAClC;IACA,QAAQ,IAAI,IAAI,GAAG,IAAI,EAAE;IACzB,YAAY,IAAI,IAAID,gBAAU,CAAC,MAAM,CAAC;IACtC,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;IACzC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IACxC,YAAY,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,YAAY,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;AAChC;IACA,YAAY,mBAAmB,CAAC,SAAS,GAAGA,gBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC;IAChG,YAAY,mBAAmB,CAAC,QAAQ,GAAGA,gBAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC;IAChG,YAAY,mBAAmB,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC;AACzD;IACA,YAAY,IAAI,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;AACrG;IACA,YAAY,IAAI,gBAAgB,EAAE;IAClC,gBAAgB,IAAI,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC;IACpC,gBAAgB,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAChD,gBAAgB,MAAM,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD;IACA,gBAAgB,IAAI,YAAY,KAAK,GAAG,EAAE;IAC1C,oBAAoB,IAAI,MAAM,GAAGgB,yCAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;IACnG,oBAAoB,IAAI,aAAa,GAAGP,qBAAU,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;IACzH,oBAAoB,IAAI,WAAW,GAAGH,kBAAO,CAAC,qBAAqB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AACjG;IACA,oBAAoBA,kBAAO,CAAC,uBAAuB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACjF,oBAAoB,MAAM,CAAC,CAAC,IAAI,YAAY,CAAC;IAC7C,oBAAoBH,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD;IACA,oBAAoBG,kBAAO,CAAC,uBAAuB,CAAC,aAAa,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnF,oBAAoBH,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD;IACA,oBAAoBa,yCAAoB,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,YAAY,CAAC;IAC7B,YAAY,IAAI,QAAQ,CAAC,eAAe,EAAE;IAC1C,gBAAgB,YAAY,GAAG,CAACN,2CAAqB,CAAC,+BAA+B,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,cAAc,IAAI,qBAAqB,CAAC;IAC9J,aAAa;AACb;IACA,YAAY,iBAAiB,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,iBAAiB,EAAE,QAAQ,EAAE,EAAE,EAAE,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IACjJ,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;IACjD,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,OAAO,UAAU,CAAC,KAAK,KAAK,UAAU,EAAE;IACpD,YAAY,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;IACtC,YAAY,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;IACjD;IACA,gBAAgB,IAAI,GAAG,SAAS,CAAC;IACjC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,CAACT,YAAO,CAAC,IAAI,CAAC,EAAE;IAC5B,YAAY,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1D,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9B;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL,mDAAe,yBAAyB,CAAC,sCAAsC,CAAC,CAAC;;;;;;;;"}