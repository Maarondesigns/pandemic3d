{"version":3,"file":"FrustumGeometry-798ed03f.js","sources":["../../../../Source/Core/CullingVolume.js","../../../../Source/Core/OrthographicOffCenterFrustum.js","../../../../Source/Core/OrthographicFrustum.js","../../../../Source/Core/PerspectiveOffCenterFrustum.js","../../../../Source/Core/PerspectiveFrustum.js","../../../../Source/Core/FrustumGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Intersect from './Intersect.js';\nimport Plane from './Plane.js';\n\n    /**\n     * The culling volume defined by planes.\n     *\n     * @alias CullingVolume\n     * @constructor\n     *\n     * @param {Cartesian4[]} [planes] An array of clipping planes.\n     */\n    function CullingVolume(planes) {\n        /**\n         * Each plane is represented by a Cartesian4 object, where the x, y, and z components\n         * define the unit vector normal to the plane, and the w component is the distance of the\n         * plane from the origin.\n         * @type {Cartesian4[]}\n         * @default []\n         */\n        this.planes = defaultValue(planes, []);\n    }\n\n    var faces = [new Cartesian3(), new Cartesian3(), new Cartesian3()];\n    Cartesian3.clone(Cartesian3.UNIT_X, faces[0]);\n    Cartesian3.clone(Cartesian3.UNIT_Y, faces[1]);\n    Cartesian3.clone(Cartesian3.UNIT_Z, faces[2]);\n\n    var scratchPlaneCenter = new Cartesian3();\n    var scratchPlaneNormal = new Cartesian3();\n    var scratchPlane = new Plane(new Cartesian3(1.0, 0.0, 0.0), 0.0);\n\n    /**\n     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\n     * The planes are aligned to the x, y, and z axes in world coordinates.\n     *\n     * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.\n     * @param {CullingVolume} [result] The object onto which to store the result.\n     * @returns {CullingVolume} The culling volume created from the bounding sphere.\n     */\n    CullingVolume.fromBoundingSphere = function(boundingSphere, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(boundingSphere)) {\n            throw new DeveloperError('boundingSphere is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new CullingVolume();\n        }\n\n        var length = faces.length;\n        var planes = result.planes;\n        planes.length = 2 * length;\n\n        var center = boundingSphere.center;\n        var radius = boundingSphere.radius;\n\n        var planeIndex = 0;\n\n        for (var i = 0; i < length; ++i) {\n            var faceNormal = faces[i];\n\n            var plane0 = planes[planeIndex];\n            var plane1 = planes[planeIndex + 1];\n\n            if (!defined(plane0)) {\n                plane0 = planes[planeIndex] = new Cartesian4();\n            }\n            if (!defined(plane1)) {\n                plane1 = planes[planeIndex + 1] = new Cartesian4();\n            }\n\n            Cartesian3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\n\n            plane0.x = faceNormal.x;\n            plane0.y = faceNormal.y;\n            plane0.z = faceNormal.z;\n            plane0.w = -Cartesian3.dot(faceNormal, scratchPlaneCenter);\n\n            Cartesian3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\n\n            plane1.x = -faceNormal.x;\n            plane1.y = -faceNormal.y;\n            plane1.z = -faceNormal.z;\n            plane1.w = -Cartesian3.dot(Cartesian3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);\n\n            planeIndex += 2;\n        }\n\n        return result;\n    };\n\n    /**\n     * Determines whether a bounding volume intersects the culling volume.\n     *\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\n     * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.\n     */\n    CullingVolume.prototype.computeVisibility = function(boundingVolume) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(boundingVolume)) {\n            throw new DeveloperError('boundingVolume is required.');\n        }\n        //>>includeEnd('debug');\n\n        var planes = this.planes;\n        var intersecting = false;\n        for (var k = 0, len = planes.length; k < len; ++k) {\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\n            if (result === Intersect.OUTSIDE) {\n                return Intersect.OUTSIDE;\n            } else if (result === Intersect.INTERSECTING) {\n                intersecting = true;\n            }\n        }\n\n        return intersecting ? Intersect.INTERSECTING : Intersect.INSIDE;\n    };\n\n    /**\n     * Determines whether a bounding volume intersects the culling volume.\n     *\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\n     * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\n     *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\n     *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\n     *                                 and that plane check can be skipped.\n     * @returns {Number} A plane mask as described above (which can be applied to this boundingVolume's children).\n     *\n     * @private\n     */\n    CullingVolume.prototype.computeVisibilityWithPlaneMask = function(boundingVolume, parentPlaneMask) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(boundingVolume)) {\n            throw new DeveloperError('boundingVolume is required.');\n        }\n        if (!defined(parentPlaneMask)) {\n            throw new DeveloperError('parentPlaneMask is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\n            // parent is completely outside or completely inside, so this child is as well.\n            return parentPlaneMask;\n        }\n\n        // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n        // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n        var mask = CullingVolume.MASK_INSIDE;\n\n        var planes = this.planes;\n        for (var k = 0, len = planes.length; k < len; ++k) {\n            // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n            var flag = (k < 31) ? (1 << k) : 0;\n            if (k < 31 && (parentPlaneMask & flag) === 0) {\n                // boundingVolume is known to be INSIDE this plane.\n                continue;\n            }\n\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\n            if (result === Intersect.OUTSIDE) {\n                return CullingVolume.MASK_OUTSIDE;\n            } else if (result === Intersect.INTERSECTING) {\n                mask |= flag;\n            }\n        }\n\n        return mask;\n    };\n\n    /**\n     * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\n     * represents the case where the object bounding volume is entirely outside the culling volume.\n     *\n     * @type {Number}\n     * @private\n     */\n    CullingVolume.MASK_OUTSIDE = 0xffffffff;\n\n    /**\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n     * represents the case where the object bounding volume is entirely inside the culling volume.\n     *\n     * @type {Number}\n     * @private\n     */\n    CullingVolume.MASK_INSIDE = 0x00000000;\n\n    /**\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\n     * represents the case where the object bounding volume (may) intersect all planes of the culling volume.\n     *\n     * @type {Number}\n     * @private\n     */\n    CullingVolume.MASK_INDETERMINATE = 0x7fffffff;\nexport default CullingVolume;\n","import Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport CullingVolume from './CullingVolume.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\nimport Matrix4 from './Matrix4.js';\n\n    /**\n     * The viewing frustum is defined by 6 planes.\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n     * define the unit vector normal to the plane, and the w component is the distance of the\n     * plane from the origin/camera position.\n     *\n     * @alias OrthographicOffCenterFrustum\n     * @constructor\n     *\n     * @param {Object} [options] An object with the following properties:\n     * @param {Number} [options.left] The left clipping plane distance.\n     * @param {Number} [options.right] The right clipping plane distance.\n     * @param {Number} [options.top] The top clipping plane distance.\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n     *\n     * @example\n     * var maxRadii = ellipsoid.maximumRadius;\n     *\n     * var frustum = new Cesium.OrthographicOffCenterFrustum();\n     * frustum.right = maxRadii * Cesium.Math.PI;\n     * frustum.left = -c.frustum.right;\n     * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\n     * frustum.bottom = -c.frustum.top;\n     * frustum.near = 0.01 * maxRadii;\n     * frustum.far = 50.0 * maxRadii;\n     */\n    function OrthographicOffCenterFrustum(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        /**\n         * The left clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.left = options.left;\n        this._left = undefined;\n\n        /**\n         * The right clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.right = options.right;\n        this._right = undefined;\n\n        /**\n         * The top clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.top = options.top;\n        this._top = undefined;\n\n        /**\n         * The bottom clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.bottom = options.bottom;\n        this._bottom = undefined;\n\n        /**\n         * The distance of the near plane.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.near = defaultValue(options.near, 1.0);\n        this._near = this.near;\n\n        /**\n         * The distance of the far plane.\n         * @type {Number}\n         * @default 500000000.0;\n         */\n        this.far = defaultValue(options.far, 500000000.0);\n        this._far = this.far;\n\n        this._cullingVolume = new CullingVolume();\n        this._orthographicMatrix = new Matrix4();\n    }\n\n    function update(frustum) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(frustum.right) || !defined(frustum.left) ||\n            !defined(frustum.top) || !defined(frustum.bottom) ||\n            !defined(frustum.near) || !defined(frustum.far)) {\n            throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n        }\n        //>>includeEnd('debug');\n\n        if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom ||\n            frustum.left !== frustum._left || frustum.right !== frustum._right ||\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\n\n            //>>includeStart('debug', pragmas.debug);\n            if (frustum.left > frustum.right) {\n                throw new DeveloperError('right must be greater than left.');\n            }\n            if (frustum.bottom > frustum.top) {\n                throw new DeveloperError('top must be greater than bottom.');\n            }\n            if (frustum.near <= 0 || frustum.near > frustum.far) {\n                throw new DeveloperError('near must be greater than zero and less than far.');\n            }\n            //>>includeEnd('debug');\n\n            frustum._left = frustum.left;\n            frustum._right = frustum.right;\n            frustum._top = frustum.top;\n            frustum._bottom = frustum.bottom;\n            frustum._near = frustum.near;\n            frustum._far = frustum.far;\n            frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(frustum.left, frustum.right, frustum.bottom, frustum.top, frustum.near, frustum.far, frustum._orthographicMatrix);\n        }\n    }\n\n    Object.defineProperties(OrthographicOffCenterFrustum.prototype, {\n        /**\n         * Gets the orthographic projection matrix computed from the view frustum.\n         * @memberof OrthographicOffCenterFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         */\n        projectionMatrix : {\n            get : function() {\n                update(this);\n                return this._orthographicMatrix;\n            }\n        }\n    });\n\n    var getPlanesRight = new Cartesian3();\n    var getPlanesNearCenter = new Cartesian3();\n    var getPlanesPoint = new Cartesian3();\n    var negateScratch = new Cartesian3();\n\n    /**\n     * Creates a culling volume for this frustum.\n     *\n     * @param {Cartesian3} position The eye position.\n     * @param {Cartesian3} direction The view direction.\n     * @param {Cartesian3} up The up direction.\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\n     *\n     * @example\n     * // Check if a bounding volume intersects the frustum.\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\n     */\n    OrthographicOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(position)) {\n            throw new DeveloperError('position is required.');\n        }\n        if (!defined(direction)) {\n            throw new DeveloperError('direction is required.');\n        }\n        if (!defined(up)) {\n            throw new DeveloperError('up is required.');\n        }\n        //>>includeEnd('debug');\n\n        var planes = this._cullingVolume.planes;\n        var t = this.top;\n        var b = this.bottom;\n        var r = this.right;\n        var l = this.left;\n        var n = this.near;\n        var f = this.far;\n\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\n        Cartesian3.normalize(right, right);\n        var nearCenter = getPlanesNearCenter;\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\n        Cartesian3.add(position, nearCenter, nearCenter);\n\n        var point = getPlanesPoint;\n\n        // Left plane\n        Cartesian3.multiplyByScalar(right, l, point);\n        Cartesian3.add(nearCenter, point, point);\n\n        var plane = planes[0];\n        if (!defined(plane)) {\n            plane = planes[0] = new Cartesian4();\n        }\n        plane.x = right.x;\n        plane.y = right.y;\n        plane.z = right.z;\n        plane.w = -Cartesian3.dot(right, point);\n\n        // Right plane\n        Cartesian3.multiplyByScalar(right, r, point);\n        Cartesian3.add(nearCenter, point, point);\n\n        plane = planes[1];\n        if (!defined(plane)) {\n            plane = planes[1] = new Cartesian4();\n        }\n        plane.x = -right.x;\n        plane.y = -right.y;\n        plane.z = -right.z;\n        plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\n\n        // Bottom plane\n        Cartesian3.multiplyByScalar(up, b, point);\n        Cartesian3.add(nearCenter, point, point);\n\n        plane = planes[2];\n        if (!defined(plane)) {\n            plane = planes[2] = new Cartesian4();\n        }\n        plane.x = up.x;\n        plane.y = up.y;\n        plane.z = up.z;\n        plane.w = -Cartesian3.dot(up, point);\n\n        // Top plane\n        Cartesian3.multiplyByScalar(up, t, point);\n        Cartesian3.add(nearCenter, point, point);\n\n        plane = planes[3];\n        if (!defined(plane)) {\n            plane = planes[3] = new Cartesian4();\n        }\n        plane.x = -up.x;\n        plane.y = -up.y;\n        plane.z = -up.z;\n        plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\n\n        // Near plane\n        plane = planes[4];\n        if (!defined(plane)) {\n            plane = planes[4] = new Cartesian4();\n        }\n        plane.x = direction.x;\n        plane.y = direction.y;\n        plane.z = direction.z;\n        plane.w = -Cartesian3.dot(direction, nearCenter);\n\n        // Far plane\n        Cartesian3.multiplyByScalar(direction, f, point);\n        Cartesian3.add(position, point, point);\n\n        plane = planes[5];\n        if (!defined(plane)) {\n            plane = planes[5] = new Cartesian4();\n        }\n        plane.x = -direction.x;\n        plane.y = -direction.y;\n        plane.z = -direction.z;\n        plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\n\n        return this._cullingVolume;\n    };\n\n    /**\n     * Returns the pixel's width and height in meters.\n     *\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\n     * @param {Number} distance The distance to the near plane in meters.\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n     * @param {Cartesian2} result The object onto which to store the result.\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n     *\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\n     *\n     * @example\n     * // Example 1\n     * // Get the width and height of a pixel.\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n     */\n    OrthographicOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n        update(this);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n            throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\n        }\n        if (drawingBufferWidth <= 0) {\n            throw new DeveloperError('drawingBufferWidth must be greater than zero.');\n        }\n        if (drawingBufferHeight <= 0) {\n            throw new DeveloperError('drawingBufferHeight must be greater than zero.');\n        }\n        if (!defined(distance)) {\n            throw new DeveloperError('distance is required.');\n        }\n        if (!defined(pixelRatio)) {\n            throw new DeveloperError('pixelRatio is required.');\n        }\n        if (pixelRatio <= 0) {\n            throw new DeveloperError('pixelRatio must be greater than zero.');\n        }\n        if (!defined(result)) {\n            throw new DeveloperError('A result object is required.');\n        }\n        //>>includeEnd('debug');\n\n        var frustumWidth = this.right - this.left;\n        var frustumHeight = this.top - this.bottom;\n        var pixelWidth = pixelRatio * frustumWidth / drawingBufferWidth;\n        var pixelHeight = pixelRatio * frustumHeight / drawingBufferHeight;\n\n        result.x = pixelWidth;\n        result.y = pixelHeight;\n        return result;\n    };\n\n    /**\n     * Returns a duplicate of a OrthographicOffCenterFrustum instance.\n     *\n     * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\n     * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\n     */\n    OrthographicOffCenterFrustum.prototype.clone = function(result) {\n        if (!defined(result)) {\n            result = new OrthographicOffCenterFrustum();\n        }\n\n        result.left = this.left;\n        result.right = this.right;\n        result.top = this.top;\n        result.bottom = this.bottom;\n        result.near = this.near;\n        result.far = this.far;\n\n        // force update of clone to compute matrices\n        result._left = undefined;\n        result._right = undefined;\n        result._top = undefined;\n        result._bottom = undefined;\n        result._near = undefined;\n        result._far = undefined;\n\n        return result;\n    };\n\n    /**\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    OrthographicOffCenterFrustum.prototype.equals = function(other) {\n        return (defined(other) && other instanceof OrthographicOffCenterFrustum &&\n                this.right === other.right &&\n                this.left === other.left &&\n                this.top === other.top &&\n                this.bottom === other.bottom &&\n                this.near === other.near &&\n                this.far === other.far);\n    };\n\n    /**\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\n     * <code>true</code> if they pass an absolute or relative tolerance test,\n     * <code>false</code> otherwise.\n     *\n     * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n     */\n    OrthographicOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\n        return (other === this) ||\n               (defined(other) &&\n                other instanceof OrthographicOffCenterFrustum &&\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\n    };\nexport default OrthographicOffCenterFrustum;\n","import Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\nimport OrthographicOffCenterFrustum from './OrthographicOffCenterFrustum.js';\n\n    /**\n     * The viewing frustum is defined by 6 planes.\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n     * define the unit vector normal to the plane, and the w component is the distance of the\n     * plane from the origin/camera position.\n     *\n     * @alias OrthographicFrustum\n     * @constructor\n     *\n     * @param {Object} [options] An object with the following properties:\n     * @param {Number} [options.width] The width of the frustum in meters.\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n     * @param {Number} [options.near=1.0] The distance of the near plane.\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\n     *\n     * @example\n     * var maxRadii = ellipsoid.maximumRadius;\n     *\n     * var frustum = new Cesium.OrthographicFrustum();\n     * frustum.near = 0.01 * maxRadii;\n     * frustum.far = 50.0 * maxRadii;\n     */\n    function OrthographicFrustum(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        this._offCenterFrustum = new OrthographicOffCenterFrustum();\n\n        /**\n         * The horizontal width of the frustum in meters.\n         * @type {Number}\n         * @default undefined\n         */\n        this.width = options.width;\n        this._width = undefined;\n\n        /**\n         * The aspect ratio of the frustum's width to it's height.\n         * @type {Number}\n         * @default undefined\n         */\n        this.aspectRatio = options.aspectRatio;\n        this._aspectRatio = undefined;\n\n        /**\n         * The distance of the near plane.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.near = defaultValue(options.near, 1.0);\n        this._near = this.near;\n\n        /**\n         * The distance of the far plane.\n         * @type {Number}\n         * @default 500000000.0;\n         */\n        this.far = defaultValue(options.far, 500000000.0);\n        this._far = this.far;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    OrthographicFrustum.packedLength = 4;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {OrthographicFrustum} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    OrthographicFrustum.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value.width;\n        array[startingIndex++] = value.aspectRatio;\n        array[startingIndex++] = value.near;\n        array[startingIndex] = value.far;\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {OrthographicFrustum} [result] The object into which to store the result.\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n     */\n    OrthographicFrustum.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        if (!defined(result)) {\n            result = new OrthographicFrustum();\n        }\n\n        result.width = array[startingIndex++];\n        result.aspectRatio = array[startingIndex++];\n        result.near = array[startingIndex++];\n        result.far = array[startingIndex];\n\n        return result;\n    };\n\n    function update(frustum) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(frustum.width) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\n            throw new DeveloperError('width, aspectRatio, near, or far parameters are not set.');\n        }\n        //>>includeEnd('debug');\n\n        var f = frustum._offCenterFrustum;\n\n        if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio ||\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\n            //>>includeStart('debug', pragmas.debug);\n            if (frustum.aspectRatio < 0) {\n                throw new DeveloperError('aspectRatio must be positive.');\n            }\n            if (frustum.near < 0 || frustum.near > frustum.far) {\n                throw new DeveloperError('near must be greater than zero and less than far.');\n            }\n            //>>includeEnd('debug');\n\n            frustum._aspectRatio = frustum.aspectRatio;\n            frustum._width = frustum.width;\n            frustum._near = frustum.near;\n            frustum._far = frustum.far;\n\n            var ratio = 1.0 / frustum.aspectRatio;\n            f.right = frustum.width * 0.5;\n            f.left = -f.right;\n            f.top = ratio * f.right;\n            f.bottom = -f.top;\n            f.near = frustum.near;\n            f.far = frustum.far;\n\n        }\n    }\n\n    Object.defineProperties(OrthographicFrustum.prototype, {\n        /**\n         * Gets the orthographic projection matrix computed from the view frustum.\n         * @memberof OrthographicFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         */\n        projectionMatrix : {\n            get : function() {\n                update(this);\n                return this._offCenterFrustum.projectionMatrix;\n            }\n        }\n\n    });\n\n    /**\n     * Creates a culling volume for this frustum.\n     *\n     * @param {Cartesian3} position The eye position.\n     * @param {Cartesian3} direction The view direction.\n     * @param {Cartesian3} up The up direction.\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\n     *\n     * @example\n     * // Check if a bounding volume intersects the frustum.\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\n     */\n    OrthographicFrustum.prototype.computeCullingVolume = function(position, direction, up) {\n        update(this);\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    };\n\n    /**\n     * Returns the pixel's width and height in meters.\n     *\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\n     * @param {Number} distance The distance to the near plane in meters.\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n     * @param {Cartesian2} result The object onto which to store the result.\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n     *\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\n     *\n     * @example\n     * // Example 1\n     * // Get the width and height of a pixel.\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\n     */\n    OrthographicFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n        update(this);\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\n    };\n\n    /**\n     * Returns a duplicate of a OrthographicFrustum instance.\n     *\n     * @param {OrthographicFrustum} [result] The object onto which to store the result.\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\n     */\n    OrthographicFrustum.prototype.clone = function(result) {\n        if (!defined(result)) {\n            result = new OrthographicFrustum();\n        }\n\n        result.aspectRatio = this.aspectRatio;\n        result.width = this.width;\n        result.near = this.near;\n        result.far = this.far;\n\n        // force update of clone to compute matrices\n        result._aspectRatio = undefined;\n        result._width = undefined;\n        result._near = undefined;\n        result._far = undefined;\n\n        this._offCenterFrustum.clone(result._offCenterFrustum);\n\n        return result;\n    };\n\n    /**\n     * Compares the provided OrthographicFrustum componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    OrthographicFrustum.prototype.equals = function(other) {\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n            return false;\n        }\n\n        update(this);\n        update(other);\n\n        return (this.width === other.width &&\n                this.aspectRatio === other.aspectRatio &&\n                this._offCenterFrustum.equals(other._offCenterFrustum));\n    };\n\n    /**\n     * Compares the provided OrthographicFrustum componentwise and returns\n     * <code>true</code> if they pass an absolute or relative tolerance test,\n     * <code>false</code> otherwise.\n     *\n     * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n     */\n    OrthographicFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\n            return false;\n        }\n\n        update(this);\n        update(other);\n\n        return (CesiumMath.equalsEpsilon(this.width, other.width, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\n    };\nexport default OrthographicFrustum;\n","import Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport CullingVolume from './CullingVolume.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\nimport Matrix4 from './Matrix4.js';\n\n    /**\n     * The viewing frustum is defined by 6 planes.\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n     * define the unit vector normal to the plane, and the w component is the distance of the\n     * plane from the origin/camera position.\n     *\n     * @alias PerspectiveOffCenterFrustum\n     * @constructor\n     *\n     * @param {Object} [options] An object with the following properties:\n     * @param {Number} [options.left] The left clipping plane distance.\n     * @param {Number} [options.right] The right clipping plane distance.\n     * @param {Number} [options.top] The top clipping plane distance.\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n     *\n     * @example\n     * var frustum = new Cesium.PerspectiveOffCenterFrustum({\n     *     left : -1.0,\n     *     right : 1.0,\n     *     top : 1.0,\n     *     bottom : -1.0,\n     *     near : 1.0,\n     *     far : 100.0\n     * });\n     *\n     * @see PerspectiveFrustum\n     */\n    function PerspectiveOffCenterFrustum(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        /**\n         * Defines the left clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.left = options.left;\n        this._left = undefined;\n\n        /**\n         * Defines the right clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.right = options.right;\n        this._right = undefined;\n\n        /**\n         * Defines the top clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.top = options.top;\n        this._top = undefined;\n\n        /**\n         * Defines the bottom clipping plane.\n         * @type {Number}\n         * @default undefined\n         */\n        this.bottom = options.bottom;\n        this._bottom = undefined;\n\n        /**\n         * The distance of the near plane.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.near = defaultValue(options.near, 1.0);\n        this._near = this.near;\n\n        /**\n         * The distance of the far plane.\n         * @type {Number}\n         * @default 500000000.0\n         */\n        this.far = defaultValue(options.far, 500000000.0);\n        this._far = this.far;\n\n        this._cullingVolume = new CullingVolume();\n        this._perspectiveMatrix = new Matrix4();\n        this._infinitePerspective = new Matrix4();\n    }\n\n    function update(frustum) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(frustum.right) || !defined(frustum.left) ||\n            !defined(frustum.top) || !defined(frustum.bottom) ||\n            !defined(frustum.near) || !defined(frustum.far)) {\n            throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n        }\n        //>>includeEnd('debug');\n\n        var t = frustum.top;\n        var b = frustum.bottom;\n        var r = frustum.right;\n        var l = frustum.left;\n        var n = frustum.near;\n        var f = frustum.far;\n\n        if (t !== frustum._top || b !== frustum._bottom ||\n            l !== frustum._left || r !== frustum._right ||\n            n !== frustum._near || f !== frustum._far) {\n\n            //>>includeStart('debug', pragmas.debug);\n            if (frustum.near <= 0 || frustum.near > frustum.far) {\n                throw new DeveloperError('near must be greater than zero and less than far.');\n            }\n            //>>includeEnd('debug');\n\n            frustum._left = l;\n            frustum._right = r;\n            frustum._top = t;\n            frustum._bottom = b;\n            frustum._near = n;\n            frustum._far = f;\n            frustum._perspectiveMatrix = Matrix4.computePerspectiveOffCenter(l, r, b, t, n, f, frustum._perspectiveMatrix);\n            frustum._infinitePerspective = Matrix4.computeInfinitePerspectiveOffCenter(l, r, b, t, n, frustum._infinitePerspective);\n        }\n    }\n\n    Object.defineProperties(PerspectiveOffCenterFrustum.prototype, {\n        /**\n         * Gets the perspective projection matrix computed from the view frustum.\n         * @memberof PerspectiveOffCenterFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n         */\n        projectionMatrix : {\n            get : function() {\n                update(this);\n                return this._perspectiveMatrix;\n            }\n        },\n\n        /**\n         * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n         * @memberof PerspectiveOffCenterFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see PerspectiveOffCenterFrustum#projectionMatrix\n         */\n        infiniteProjectionMatrix : {\n            get : function() {\n                update(this);\n                return this._infinitePerspective;\n            }\n        }\n    });\n\n    var getPlanesRight = new Cartesian3();\n    var getPlanesNearCenter = new Cartesian3();\n    var getPlanesFarCenter = new Cartesian3();\n    var getPlanesNormal = new Cartesian3();\n    /**\n     * Creates a culling volume for this frustum.\n     *\n     * @param {Cartesian3} position The eye position.\n     * @param {Cartesian3} direction The view direction.\n     * @param {Cartesian3} up The up direction.\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\n     *\n     * @example\n     * // Check if a bounding volume intersects the frustum.\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\n     */\n    PerspectiveOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(position)) {\n            throw new DeveloperError('position is required.');\n        }\n\n        if (!defined(direction)) {\n            throw new DeveloperError('direction is required.');\n        }\n\n        if (!defined(up)) {\n            throw new DeveloperError('up is required.');\n        }\n        //>>includeEnd('debug');\n\n        var planes = this._cullingVolume.planes;\n\n        var t = this.top;\n        var b = this.bottom;\n        var r = this.right;\n        var l = this.left;\n        var n = this.near;\n        var f = this.far;\n\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\n\n        var nearCenter = getPlanesNearCenter;\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\n        Cartesian3.add(position, nearCenter, nearCenter);\n\n        var farCenter = getPlanesFarCenter;\n        Cartesian3.multiplyByScalar(direction, f, farCenter);\n        Cartesian3.add(position, farCenter, farCenter);\n\n        var normal = getPlanesNormal;\n\n        //Left plane computation\n        Cartesian3.multiplyByScalar(right, l, normal);\n        Cartesian3.add(nearCenter, normal, normal);\n        Cartesian3.subtract(normal, position, normal);\n        Cartesian3.normalize(normal, normal);\n        Cartesian3.cross(normal, up, normal);\n        Cartesian3.normalize(normal, normal);\n\n        var plane = planes[0];\n        if (!defined(plane)) {\n            plane = planes[0] = new Cartesian4();\n        }\n        plane.x = normal.x;\n        plane.y = normal.y;\n        plane.z = normal.z;\n        plane.w = -Cartesian3.dot(normal, position);\n\n        //Right plane computation\n        Cartesian3.multiplyByScalar(right, r, normal);\n        Cartesian3.add(nearCenter, normal, normal);\n        Cartesian3.subtract(normal, position, normal);\n        Cartesian3.cross(up, normal, normal);\n        Cartesian3.normalize(normal, normal);\n\n        plane = planes[1];\n        if (!defined(plane)) {\n            plane = planes[1] = new Cartesian4();\n        }\n        plane.x = normal.x;\n        plane.y = normal.y;\n        plane.z = normal.z;\n        plane.w = -Cartesian3.dot(normal, position);\n\n        //Bottom plane computation\n        Cartesian3.multiplyByScalar(up, b, normal);\n        Cartesian3.add(nearCenter, normal, normal);\n        Cartesian3.subtract(normal, position, normal);\n        Cartesian3.cross(right, normal, normal);\n        Cartesian3.normalize(normal, normal);\n\n        plane = planes[2];\n        if (!defined(plane)) {\n            plane = planes[2] = new Cartesian4();\n        }\n        plane.x = normal.x;\n        plane.y = normal.y;\n        plane.z = normal.z;\n        plane.w = -Cartesian3.dot(normal, position);\n\n        //Top plane computation\n        Cartesian3.multiplyByScalar(up, t, normal);\n        Cartesian3.add(nearCenter, normal, normal);\n        Cartesian3.subtract(normal, position, normal);\n        Cartesian3.cross(normal, right, normal);\n        Cartesian3.normalize(normal, normal);\n\n        plane = planes[3];\n        if (!defined(plane)) {\n            plane = planes[3] = new Cartesian4();\n        }\n        plane.x = normal.x;\n        plane.y = normal.y;\n        plane.z = normal.z;\n        plane.w = -Cartesian3.dot(normal, position);\n\n        //Near plane computation\n        plane = planes[4];\n        if (!defined(plane)) {\n            plane = planes[4] = new Cartesian4();\n        }\n        plane.x = direction.x;\n        plane.y = direction.y;\n        plane.z = direction.z;\n        plane.w = -Cartesian3.dot(direction, nearCenter);\n\n        //Far plane computation\n        Cartesian3.negate(direction, normal);\n\n        plane = planes[5];\n        if (!defined(plane)) {\n            plane = planes[5] = new Cartesian4();\n        }\n        plane.x = normal.x;\n        plane.y = normal.y;\n        plane.z = normal.z;\n        plane.w = -Cartesian3.dot(normal, farCenter);\n\n        return this._cullingVolume;\n    };\n\n    /**\n     * Returns the pixel's width and height in meters.\n     *\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\n     * @param {Number} distance The distance to the near plane in meters.\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n     * @param {Cartesian2} result The object onto which to store the result.\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n     *\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\n     *\n     * @example\n     * // Example 1\n     * // Get the width and height of a pixel.\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\n     *\n     * @example\n     * // Example 2\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\n     * // For example, get the size of a pixel of an image on a billboard.\n     * var position = camera.position;\n     * var direction = camera.direction;\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\n     */\n    PerspectiveOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n        update(this);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n            throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\n        }\n        if (drawingBufferWidth <= 0) {\n            throw new DeveloperError('drawingBufferWidth must be greater than zero.');\n        }\n        if (drawingBufferHeight <= 0) {\n            throw new DeveloperError('drawingBufferHeight must be greater than zero.');\n        }\n        if (!defined(distance)) {\n            throw new DeveloperError('distance is required.');\n        }\n        if (!defined(pixelRatio)) {\n            throw new DeveloperError('pixelRatio is required');\n        }\n        if (pixelRatio <= 0) {\n            throw new DeveloperError('pixelRatio must be greater than zero.');\n        }\n        if (!defined(result)) {\n            throw new DeveloperError('A result object is required.');\n        }\n        //>>includeEnd('debug');\n\n        var inverseNear = 1.0 / this.near;\n        var tanTheta = this.top * inverseNear;\n        var pixelHeight = 2.0 * pixelRatio * distance * tanTheta / drawingBufferHeight;\n        tanTheta = this.right * inverseNear;\n        var pixelWidth = 2.0 * pixelRatio * distance * tanTheta / drawingBufferWidth;\n\n        result.x = pixelWidth;\n        result.y = pixelHeight;\n        return result;\n    };\n\n    /**\n     * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n     *\n     * @param {PerspectiveOffCenterFrustum} [result] The object onto which to store the result.\n     * @returns {PerspectiveOffCenterFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n     */\n    PerspectiveOffCenterFrustum.prototype.clone = function(result) {\n        if (!defined(result)) {\n            result = new PerspectiveOffCenterFrustum();\n        }\n\n        result.right = this.right;\n        result.left = this.left;\n        result.top = this.top;\n        result.bottom = this.bottom;\n        result.near = this.near;\n        result.far = this.far;\n\n        // force update of clone to compute matrices\n        result._left = undefined;\n        result._right = undefined;\n        result._top = undefined;\n        result._bottom = undefined;\n        result._near = undefined;\n        result._far = undefined;\n\n        return result;\n    };\n\n    /**\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    PerspectiveOffCenterFrustum.prototype.equals = function(other) {\n        return (defined(other) && other instanceof PerspectiveOffCenterFrustum &&\n                this.right === other.right &&\n                this.left === other.left &&\n                this.top === other.top &&\n                this.bottom === other.bottom &&\n                this.near === other.near &&\n                this.far === other.far);\n    };\n\n    /**\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n     * <code>true</code> if they pass an absolute or relative tolerance test,\n     * <code>false</code> otherwise.\n     *\n     * @param {PerspectiveOffCenterFrustum} other The right hand side PerspectiveOffCenterFrustum.\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n     */\n    PerspectiveOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\n        return (other === this) ||\n               (defined(other) &&\n                other instanceof PerspectiveOffCenterFrustum &&\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\n    };\nexport default PerspectiveOffCenterFrustum;\n","import Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\nimport PerspectiveOffCenterFrustum from './PerspectiveOffCenterFrustum.js';\n\n    /**\n     * The viewing frustum is defined by 6 planes.\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n     * define the unit vector normal to the plane, and the w component is the distance of the\n     * plane from the origin/camera position.\n     *\n     * @alias PerspectiveFrustum\n     * @constructor\n     *\n     * @param {Object} [options] An object with the following properties:\n     * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n     * @param {Number} [options.near=1.0] The distance of the near plane.\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\n     * @param {Number} [options.xOffset=0.0] The offset in the x direction.\n     * @param {Number} [options.yOffset=0.0] The offset in the y direction.\n     *\n     * @example\n     * var frustum = new Cesium.PerspectiveFrustum({\n     *     fov : Cesium.Math.PI_OVER_THREE,\n     *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n     *     near : 1.0,\n     *     far : 1000.0\n     * });\n     *\n     * @see PerspectiveOffCenterFrustum\n     */\n    function PerspectiveFrustum(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n        /**\n         * The angle of the field of view (FOV), in radians.  This angle will be used\n         * as the horizontal FOV if the width is greater than the height, otherwise\n         * it will be the vertical FOV.\n         * @type {Number}\n         * @default undefined\n         */\n        this.fov = options.fov;\n        this._fov = undefined;\n        this._fovy = undefined;\n\n        this._sseDenominator = undefined;\n\n        /**\n         * The aspect ratio of the frustum's width to it's height.\n         * @type {Number}\n         * @default undefined\n         */\n        this.aspectRatio = options.aspectRatio;\n        this._aspectRatio = undefined;\n\n        /**\n         * The distance of the near plane.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.near = defaultValue(options.near, 1.0);\n        this._near = this.near;\n\n        /**\n         * The distance of the far plane.\n         * @type {Number}\n         * @default 500000000.0\n         */\n        this.far = defaultValue(options.far, 500000000.0);\n        this._far = this.far;\n\n        /**\n         * Offsets the frustum in the x direction.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.xOffset = defaultValue(options.xOffset, 0.0);\n        this._xOffset = this.xOffset;\n\n        /**\n         * Offsets the frustum in the y direction.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.yOffset = defaultValue(options.yOffset, 0.0);\n        this._yOffset = this.yOffset;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PerspectiveFrustum.packedLength = 6;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PerspectiveFrustum} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PerspectiveFrustum.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value.fov;\n        array[startingIndex++] = value.aspectRatio;\n        array[startingIndex++] = value.near;\n        array[startingIndex++] = value.far;\n        array[startingIndex++] = value.xOffset;\n        array[startingIndex] = value.yOffset;\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PerspectiveFrustum} [result] The object into which to store the result.\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n     */\n    PerspectiveFrustum.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        if (!defined(result)) {\n            result = new PerspectiveFrustum();\n        }\n\n        result.fov = array[startingIndex++];\n        result.aspectRatio = array[startingIndex++];\n        result.near = array[startingIndex++];\n        result.far = array[startingIndex++];\n        result.xOffset = array[startingIndex++];\n        result.yOffset = array[startingIndex];\n\n        return result;\n    };\n\n    function update(frustum) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(frustum.fov) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\n            throw new DeveloperError('fov, aspectRatio, near, or far parameters are not set.');\n        }\n        //>>includeEnd('debug');\n\n        var f = frustum._offCenterFrustum;\n\n        if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio ||\n            frustum.near !== frustum._near || frustum.far !== frustum._far ||\n            frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\n            //>>includeStart('debug', pragmas.debug);\n            if (frustum.fov < 0 || frustum.fov >= Math.PI) {\n                throw new DeveloperError('fov must be in the range [0, PI).');\n            }\n\n            if (frustum.aspectRatio < 0) {\n                throw new DeveloperError('aspectRatio must be positive.');\n            }\n\n            if (frustum.near < 0 || frustum.near > frustum.far) {\n                throw new DeveloperError('near must be greater than zero and less than far.');\n            }\n            //>>includeEnd('debug');\n\n            frustum._aspectRatio = frustum.aspectRatio;\n            frustum._fov = frustum.fov;\n            frustum._fovy = (frustum.aspectRatio <= 1) ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n            frustum._near = frustum.near;\n            frustum._far = frustum.far;\n            frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n            frustum._xOffset = frustum.xOffset;\n            frustum._yOffset = frustum.yOffset;\n\n            f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n            f.bottom = -f.top;\n            f.right = frustum.aspectRatio * f.top;\n            f.left = -f.right;\n            f.near = frustum.near;\n            f.far = frustum.far;\n\n            f.right += frustum.xOffset;\n            f.left += frustum.xOffset;\n            f.top += frustum.yOffset;\n            f.bottom += frustum.yOffset;\n        }\n    }\n\n    Object.defineProperties(PerspectiveFrustum.prototype, {\n        /**\n         * Gets the perspective projection matrix computed from the view frustum.\n         * @memberof PerspectiveFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see PerspectiveFrustum#infiniteProjectionMatrix\n         */\n        projectionMatrix : {\n            get : function() {\n                update(this);\n                return this._offCenterFrustum.projectionMatrix;\n            }\n        },\n\n        /**\n         * The perspective projection matrix computed from the view frustum with an infinite far plane.\n         * @memberof PerspectiveFrustum.prototype\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see PerspectiveFrustum#projectionMatrix\n         */\n        infiniteProjectionMatrix : {\n            get : function() {\n                update(this);\n                return this._offCenterFrustum.infiniteProjectionMatrix;\n            }\n        },\n\n        /**\n         * Gets the angle of the vertical field of view, in radians.\n         * @memberof PerspectiveFrustum.prototype\n         * @type {Number}\n         * @readonly\n         * @default undefined\n         */\n        fovy : {\n            get : function() {\n                update(this);\n                return this._fovy;\n            }\n        },\n\n        /**\n         * @readonly\n         * @private\n         */\n        sseDenominator : {\n            get : function () {\n                update(this);\n                return this._sseDenominator;\n            }\n        }\n    });\n\n    /**\n     * Creates a culling volume for this frustum.\n     *\n     * @param {Cartesian3} position The eye position.\n     * @param {Cartesian3} direction The view direction.\n     * @param {Cartesian3} up The up direction.\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\n     *\n     * @example\n     * // Check if a bounding volume intersects the frustum.\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\n     */\n    PerspectiveFrustum.prototype.computeCullingVolume = function(position, direction, up) {\n        update(this);\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    };\n\n    /**\n     * Returns the pixel's width and height in meters.\n     *\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\n     * @param {Number} distance The distance to the near plane in meters.\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\n     * @param {Cartesian2} result The object onto which to store the result.\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n     *\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\n     *\n     * @example\n     * // Example 1\n     * // Get the width and height of a pixel.\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\n     *\n     * @example\n     * // Example 2\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\n     * // For example, get the size of a pixel of an image on a billboard.\n     * var position = camera.position;\n     * var direction = camera.direction;\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\n     */\n    PerspectiveFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\n        update(this);\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\n    };\n\n    /**\n     * Returns a duplicate of a PerspectiveFrustum instance.\n     *\n     * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n     */\n    PerspectiveFrustum.prototype.clone = function(result) {\n        if (!defined(result)) {\n            result = new PerspectiveFrustum();\n        }\n\n        result.aspectRatio = this.aspectRatio;\n        result.fov = this.fov;\n        result.near = this.near;\n        result.far = this.far;\n\n        // force update of clone to compute matrices\n        result._aspectRatio = undefined;\n        result._fov = undefined;\n        result._near = undefined;\n        result._far = undefined;\n\n        this._offCenterFrustum.clone(result._offCenterFrustum);\n\n        return result;\n    };\n\n    /**\n     * Compares the provided PerspectiveFrustum componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    PerspectiveFrustum.prototype.equals = function(other) {\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n            return false;\n        }\n\n        update(this);\n        update(other);\n\n        return (this.fov === other.fov &&\n                this.aspectRatio === other.aspectRatio &&\n                this._offCenterFrustum.equals(other._offCenterFrustum));\n    };\n\n    /**\n     * Compares the provided PerspectiveFrustum componentwise and returns\n     * <code>true</code> if they pass an absolute or relative tolerance test,\n     * <code>false</code> otherwise.\n     *\n     * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\n     */\n    PerspectiveFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n            return false;\n        }\n\n        update(this);\n        update(other);\n\n        return (CesiumMath.equalsEpsilon(this.fov, other.fov, relativeEpsilon, absoluteEpsilon) &&\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\n    };\nexport default PerspectiveFrustum;\n","import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport Matrix3 from './Matrix3.js';\nimport Matrix4 from './Matrix4.js';\nimport OrthographicFrustum from './OrthographicFrustum.js';\nimport PerspectiveFrustum from './PerspectiveFrustum.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var PERSPECTIVE = 0;\n    var ORTHOGRAPHIC = 1;\n\n    /**\n     * Describes a frustum at the given the origin and orientation.\n     *\n     * @alias FrustumGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\n     * @param {Cartesian3} options.origin The origin of the frustum.\n     * @param {Quaternion} options.orientation The orientation of the frustum.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     */\n    function FrustumGeometry(options) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('options', options);\n        Check.typeOf.object('options.frustum', options.frustum);\n        Check.typeOf.object('options.origin', options.origin);\n        Check.typeOf.object('options.orientation', options.orientation);\n        //>>includeEnd('debug');\n\n        var frustum = options.frustum;\n        var orientation = options.orientation;\n        var origin = options.origin;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\n        // creating multiple FrustumGeometrys. This way the near plane of one frustum doesn't overlap\n        // the far plane of another.\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\n\n        var frustumType;\n        var frustumPackedLength;\n        if (frustum instanceof PerspectiveFrustum) {\n            frustumType = PERSPECTIVE;\n            frustumPackedLength = PerspectiveFrustum.packedLength;\n        } else if (frustum instanceof OrthographicFrustum) {\n            frustumType = ORTHOGRAPHIC;\n            frustumPackedLength = OrthographicFrustum.packedLength;\n        }\n\n        this._frustumType = frustumType;\n        this._frustum = frustum.clone();\n        this._origin = Cartesian3.clone(origin);\n        this._orientation = Quaternion.clone(orientation);\n        this._drawNearPlane = drawNearPlane;\n        this._vertexFormat = vertexFormat;\n        this._workerName = 'createFrustumGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength + VertexFormat.packedLength;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {FrustumGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    FrustumGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = value._frustumType;\n        var frustum = value._frustum;\n\n        array[startingIndex++] = frustumType;\n\n        if (frustumType === PERSPECTIVE) {\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            OrthographicFrustum.pack(frustum, array, startingIndex);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        Cartesian3.pack(value._origin, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n        Quaternion.pack(value._orientation, array, startingIndex);\n        startingIndex += Quaternion.packedLength;\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\n\n        return array;\n    };\n\n    var scratchPackPerspective = new PerspectiveFrustum();\n    var scratchPackOrthographic = new OrthographicFrustum();\n    var scratchPackQuaternion = new Quaternion();\n    var scratchPackorigin = new Cartesian3();\n    var scratchVertexFormat = new VertexFormat();\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {FrustumGeometry} [result] The object into which to store the result.\n     */\n    FrustumGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = array[startingIndex++];\n\n        var frustum;\n        if (frustumType === PERSPECTIVE) {\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\n        startingIndex += Cartesian3.packedLength;\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\n        startingIndex += Quaternion.packedLength;\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n        var drawNearPlane = array[startingIndex] === 1.0;\n\n        if (!defined(result)) {\n            return new FrustumGeometry({\n                frustum : frustum,\n                origin : origin,\n                orientation : orientation,\n                vertexFormat : vertexFormat,\n                _drawNearPlane : drawNearPlane\n            });\n        }\n\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\n        result._frustum = frustum.clone(frustumResult);\n\n        result._frustumType = frustumType;\n        result._origin = Cartesian3.clone(origin, result._origin);\n        result._orientation = Quaternion.clone(orientation, result._orientation);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._drawNearPlane = drawNearPlane;\n\n        return result;\n    };\n\n    function getAttributes(offset, normals, tangents, bitangents, st, normal, tangent, bitangent) {\n        var stOffset = offset / 3 * 2;\n\n        for (var i = 0; i < 4; ++i) {\n            if (defined(normals)) {\n                normals[offset] = normal.x;\n                normals[offset + 1] = normal.y;\n                normals[offset + 2] = normal.z;\n            }\n            if (defined(tangents)) {\n                tangents[offset] = tangent.x;\n                tangents[offset + 1] = tangent.y;\n                tangents[offset + 2] = tangent.z;\n            }\n            if (defined(bitangents)) {\n                bitangents[offset] = bitangent.x;\n                bitangents[offset + 1] = bitangent.y;\n                bitangents[offset + 2] = bitangent.z;\n            }\n            offset += 3;\n        }\n\n        st[stOffset] = 0.0;\n        st[stOffset + 1] = 0.0;\n        st[stOffset + 2] = 1.0;\n        st[stOffset + 3] = 0.0;\n        st[stOffset + 4] = 1.0;\n        st[stOffset + 5] = 1.0;\n        st[stOffset + 6] = 0.0;\n        st[stOffset + 7] = 1.0;\n    }\n\n    var scratchRotationMatrix = new Matrix3();\n    var scratchViewMatrix = new Matrix4();\n    var scratchInverseMatrix = new Matrix4();\n\n    var scratchXDirection = new Cartesian3();\n    var scratchYDirection = new Cartesian3();\n    var scratchZDirection = new Cartesian3();\n    var scratchNegativeX = new Cartesian3();\n    var scratchNegativeY = new Cartesian3();\n    var scratchNegativeZ = new Cartesian3();\n\n    var frustumSplits = new Array(3);\n\n    var frustumCornersNDC = new Array(4);\n    frustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[1] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[2] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\n    frustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\n\n    var scratchFrustumCorners = new Array(4);\n    for (var i = 0; i < 4; ++i) {\n        scratchFrustumCorners[i] = new Cartesian4();\n    }\n\n    FrustumGeometry._computeNearFarPlanes = function(origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {\n        var rotationMatrix = Matrix3.fromQuaternion(orientation, scratchRotationMatrix);\n        var x = defaultValue(xDirection, scratchXDirection);\n        var y = defaultValue(yDirection, scratchYDirection);\n        var z = defaultValue(zDirection, scratchZDirection);\n\n        x = Matrix3.getColumn(rotationMatrix, 0, x);\n        y = Matrix3.getColumn(rotationMatrix, 1, y);\n        z = Matrix3.getColumn(rotationMatrix, 2, z);\n\n        Cartesian3.normalize(x, x);\n        Cartesian3.normalize(y, y);\n        Cartesian3.normalize(z, z);\n\n        Cartesian3.negate(x, x);\n\n        var view = Matrix4.computeView(origin, z, y, x, scratchViewMatrix);\n\n        var inverseView;\n        var inverseViewProjection;\n        if (frustumType === PERSPECTIVE) {\n            var projection = frustum.projectionMatrix;\n            var viewProjection = Matrix4.multiply(projection, view, scratchInverseMatrix);\n            inverseViewProjection = Matrix4.inverse(viewProjection, scratchInverseMatrix);\n        } else {\n            inverseView = Matrix4.inverseTransformation(view, scratchInverseMatrix);\n        }\n\n        if (defined(inverseViewProjection)) {\n            frustumSplits[0] = frustum.near;\n            frustumSplits[1] = frustum.far;\n        } else {\n            frustumSplits[0] = 0.0;\n            frustumSplits[1] = frustum.near;\n            frustumSplits[2] = frustum.far;\n        }\n\n        for (var i = 0; i < 2; ++i) {\n            for (var j = 0; j < 4; ++j) {\n                var corner = Cartesian4.clone(frustumCornersNDC[j], scratchFrustumCorners[j]);\n\n                if (!defined(inverseViewProjection)) {\n                    if (defined(frustum._offCenterFrustum)) {\n                        frustum = frustum._offCenterFrustum;\n                    }\n\n                    var near = frustumSplits[i];\n                    var far = frustumSplits[i + 1];\n\n                    corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;\n                    corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;\n                    corner.z = (corner.z * (near - far) - near - far) * 0.5;\n                    corner.w = 1.0;\n\n                    Matrix4.multiplyByVector(inverseView, corner, corner);\n                } else {\n                    corner = Matrix4.multiplyByVector(inverseViewProjection, corner, corner);\n\n                    // Reverse perspective divide\n                    var w = 1.0 / corner.w;\n                    Cartesian3.multiplyByScalar(corner, w, corner);\n\n                    Cartesian3.subtract(corner, origin, corner);\n                    Cartesian3.normalize(corner, corner);\n\n                    var fac = Cartesian3.dot(z, corner);\n                    Cartesian3.multiplyByScalar(corner, frustumSplits[i] / fac, corner);\n                    Cartesian3.add(corner, origin, corner);\n                }\n\n                positions[12 * i + j * 3] = corner.x;\n                positions[12 * i + j * 3 + 1] = corner.y;\n                positions[12 * i + j * 3 + 2] = corner.z;\n            }\n        }\n    };\n\n    /**\n     * Computes the geometric representation of a frustum, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {FrustumGeometry} frustumGeometry A description of the frustum.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    FrustumGeometry.createGeometry = function(frustumGeometry) {\n        var frustumType = frustumGeometry._frustumType;\n        var frustum = frustumGeometry._frustum;\n        var origin = frustumGeometry._origin;\n        var orientation = frustumGeometry._orientation;\n        var drawNearPlane = frustumGeometry._drawNearPlane;\n        var vertexFormat = frustumGeometry._vertexFormat;\n\n        var numberOfPlanes = drawNearPlane ? 6 : 5;\n        var positions = new Float64Array(3 * 4 * 6);\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\n\n        // -x plane\n        var offset = 3 * 4 * 2;\n        positions[offset]      = positions[3 * 4];\n        positions[offset + 1]  = positions[3 * 4 + 1];\n        positions[offset + 2]  = positions[3 * 4 + 2];\n        positions[offset + 3]  = positions[0];\n        positions[offset + 4]  = positions[1];\n        positions[offset + 5]  = positions[2];\n        positions[offset + 6]  = positions[3 * 3];\n        positions[offset + 7]  = positions[3 * 3 + 1];\n        positions[offset + 8]  = positions[3 * 3 + 2];\n        positions[offset + 9]  = positions[3 * 7];\n        positions[offset + 10] = positions[3 * 7 + 1];\n        positions[offset + 11] = positions[3 * 7 + 2];\n\n        // -y plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3 * 5];\n        positions[offset + 1]  = positions[3 * 5 + 1];\n        positions[offset + 2]  = positions[3 * 5 + 2];\n        positions[offset + 3]  = positions[3];\n        positions[offset + 4]  = positions[3 + 1];\n        positions[offset + 5]  = positions[3 + 2];\n        positions[offset + 6]  = positions[0];\n        positions[offset + 7]  = positions[1];\n        positions[offset + 8]  = positions[2];\n        positions[offset + 9]  = positions[3 * 4];\n        positions[offset + 10] = positions[3 * 4 + 1];\n        positions[offset + 11] = positions[3 * 4 + 2];\n\n        // +x plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3];\n        positions[offset + 1]  = positions[3 + 1];\n        positions[offset + 2]  = positions[3 + 2];\n        positions[offset + 3]  = positions[3 * 5];\n        positions[offset + 4]  = positions[3 * 5 + 1];\n        positions[offset + 5]  = positions[3 * 5 + 2];\n        positions[offset + 6]  = positions[3 * 6];\n        positions[offset + 7]  = positions[3 * 6 + 1];\n        positions[offset + 8]  = positions[3 * 6 + 2];\n        positions[offset + 9]  = positions[3 * 2];\n        positions[offset + 10] = positions[3 * 2 + 1];\n        positions[offset + 11] = positions[3 * 2 + 2];\n\n        // +y plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3 * 2];\n        positions[offset + 1]  = positions[3 * 2 + 1];\n        positions[offset + 2]  = positions[3 * 2 + 2];\n        positions[offset + 3]  = positions[3 * 6];\n        positions[offset + 4]  = positions[3 * 6 + 1];\n        positions[offset + 5]  = positions[3 * 6 + 2];\n        positions[offset + 6]  = positions[3 * 7];\n        positions[offset + 7]  = positions[3 * 7 + 1];\n        positions[offset + 8]  = positions[3 * 7 + 2];\n        positions[offset + 9]  = positions[3 * 3];\n        positions[offset + 10] = positions[3 * 3 + 1];\n        positions[offset + 11] = positions[3 * 3 + 2];\n\n        if (!drawNearPlane) {\n            positions = positions.subarray(3 * 4);\n        }\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        if (defined(vertexFormat.normal) || defined(vertexFormat.tangent) || defined(vertexFormat.bitangent) || defined(vertexFormat.st)) {\n            var normals = defined(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var tangents = defined(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var bitangents = defined(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var st = defined(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : undefined;\n\n            var x = scratchXDirection;\n            var y = scratchYDirection;\n            var z = scratchZDirection;\n\n            var negativeX = Cartesian3.negate(x, scratchNegativeX);\n            var negativeY = Cartesian3.negate(y, scratchNegativeY);\n            var negativeZ = Cartesian3.negate(z, scratchNegativeZ);\n\n            offset = 0;\n            if (drawNearPlane) {\n                getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y); // near\n                offset += 3 * 4;\n            }\n            getAttributes(offset, normals, tangents, bitangents, st, z, negativeX, y); // far\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, negativeX, negativeZ, y); // -x\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, negativeY, negativeZ, negativeX); // -y\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, x, z, y); // +x\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX); // +y\n\n            if (defined(normals)) {\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n            if (defined(tangents)) {\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n            if (defined(bitangents)) {\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n            if (defined(st)) {\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : st\n                });\n            }\n        }\n\n        var indices = new Uint16Array(6 * numberOfPlanes);\n        for (var i = 0; i < numberOfPlanes; ++i) {\n            var indexOffset = i * 6;\n            var index = i * 4;\n\n            indices[indexOffset] = index;\n            indices[indexOffset + 1] = index + 1;\n            indices[indexOffset + 2] = index + 2;\n            indices[indexOffset + 3] = index;\n            indices[indexOffset + 4] = index + 2;\n            indices[indexOffset + 5] = index + 3;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromVertices(positions)\n        });\n    };\nexport default FrustumGeometry;\n"],"names":["defaultValue","Cartesian3","Plane","defined","DeveloperError","Cartesian4","Intersect","Matrix4","CesiumMath","Check","update","getPlanesRight","getPlanesNearCenter","VertexFormat","Quaternion","Matrix3","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}