{"version":3,"file":"createVectorTilePolylines.js","sources":["../../../../Source/WorkersES6/createVectorTilePolylines.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport CesiumMath from '../Core/Math.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\n\n    var maxShort = 32767;\n\n    var scratchBVCartographic = new Cartographic();\n    var scratchEncodedPosition = new Cartesian3();\n\n    function decodePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {\n        var positionsLength = positions.length / 3;\n        var uBuffer = positions.subarray(0, positionsLength);\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n        var heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n\n        var decoded = new Float64Array(positions.length);\n        for (var i = 0; i < positionsLength; ++i) {\n            var u = uBuffer[i];\n            var v = vBuffer[i];\n            var h = heightBuffer[i];\n\n            var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n            var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n            var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\n\n            var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\n            var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\n            Cartesian3.pack(decodedPosition, decoded, i * 3);\n        }\n        return decoded;\n    }\n\n    var scratchRectangle = new Rectangle();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchCenter = new Cartesian3();\n    var scratchMinMaxHeights = {\n        min : undefined,\n        max : undefined\n    };\n\n    function unpackBuffer(packedBuffer) {\n        packedBuffer = new Float64Array(packedBuffer);\n\n        var offset = 0;\n        scratchMinMaxHeights.min = packedBuffer[offset++];\n        scratchMinMaxHeights.max = packedBuffer[offset++];\n\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\n        offset += Rectangle.packedLength;\n\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\n        offset += Ellipsoid.packedLength;\n\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\n    }\n\n    var scratchP0 = new Cartesian3();\n    var scratchP1 = new Cartesian3();\n    var scratchPrev = new Cartesian3();\n    var scratchCur = new Cartesian3();\n    var scratchNext = new Cartesian3();\n\n    function createVectorTilePolylines(parameters, transferableObjects) {\n        var encodedPositions = new Uint16Array(parameters.positions);\n        var widths = new Uint16Array(parameters.widths);\n        var counts = new Uint32Array(parameters.counts);\n        var batchIds = new Uint16Array(parameters.batchIds);\n\n        unpackBuffer(parameters.packedBuffer);\n        var rectangle = scratchRectangle;\n        var ellipsoid = scratchEllipsoid;\n        var center = scratchCenter;\n        var minimumHeight = scratchMinMaxHeights.min;\n        var maximumHeight = scratchMinMaxHeights.max;\n\n        var positions = decodePositions(encodedPositions, rectangle, minimumHeight, maximumHeight, ellipsoid);\n\n        var positionsLength = positions.length / 3;\n        var size = positionsLength * 4 - 4;\n\n        var curPositions = new Float32Array(size * 3);\n        var prevPositions = new Float32Array(size * 3);\n        var nextPositions = new Float32Array(size * 3);\n        var expandAndWidth = new Float32Array(size * 2);\n        var vertexBatchIds = new Uint16Array(size);\n\n        var positionIndex = 0;\n        var expandAndWidthIndex = 0;\n        var batchIdIndex = 0;\n\n        var i;\n        var offset = 0;\n        var length = counts.length;\n\n        for (i = 0; i < length; ++i) {\n            var count = counts [i];\n            var width = widths[i];\n            var batchId = batchIds[i];\n\n            for (var j = 0; j < count; ++j) {\n                var previous;\n                if (j === 0) {\n                    var p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\n                    var p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\n\n                    previous = Cartesian3.subtract(p0, p1, scratchPrev);\n                    Cartesian3.add(p0, previous, previous);\n                } else {\n                    previous = Cartesian3.unpack(positions, (offset + j - 1) * 3, scratchPrev);\n                }\n\n                var current = Cartesian3.unpack(positions, (offset + j) * 3, scratchCur);\n\n                var next;\n                if (j === count - 1) {\n                    var p2 = Cartesian3.unpack(positions, (offset + count - 1) * 3, scratchP0);\n                    var p3 = Cartesian3.unpack(positions, (offset + count - 2) * 3, scratchP1);\n\n                    next = Cartesian3.subtract(p2, p3, scratchNext);\n                    Cartesian3.add(p2, next, next);\n                } else {\n                    next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\n                }\n\n                Cartesian3.subtract(previous, center, previous);\n                Cartesian3.subtract(current, center, current);\n                Cartesian3.subtract(next, center, next);\n\n                var startK = j === 0 ? 2 : 0;\n                var endK = j === count - 1 ? 2 : 4;\n\n                for (var k = startK; k < endK; ++k) {\n                    Cartesian3.pack(current, curPositions, positionIndex);\n                    Cartesian3.pack(previous, prevPositions, positionIndex);\n                    Cartesian3.pack(next, nextPositions, positionIndex);\n                    positionIndex += 3;\n\n                    var direction = (k - 2 < 0) ? -1.0 : 1.0;\n                    expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\n                    expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n                    vertexBatchIds[batchIdIndex++] = batchId;\n                }\n            }\n\n            offset += count;\n        }\n\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n        var index = 0;\n        var indicesIndex = 0;\n        length = positionsLength - 1;\n        for (i = 0; i < length; ++i) {\n            indices[indicesIndex++] = index;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 1;\n\n            indices[indicesIndex++] = index + 1;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 3;\n\n            index += 4;\n        }\n\n        transferableObjects.push(curPositions.buffer, prevPositions.buffer, nextPositions.buffer);\n        transferableObjects.push(expandAndWidth.buffer, vertexBatchIds.buffer, indices.buffer);\n\n        return {\n            indexDatatype : (indices.BYTES_PER_ELEMENT === 2) ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT,\n            currentPositions : curPositions.buffer,\n            previousPositions : prevPositions.buffer,\n            nextPositions : nextPositions.buffer,\n            expandAndWidth : expandAndWidth.buffer,\n            batchIds : vertexBatchIds.buffer,\n            indices : indices.buffer\n        };\n    }\nexport default createTaskProcessorWorker(createVectorTilePolylines);\n"],"names":["Cartographic","Cartesian3","AttributeCompression","CesiumMath","Rectangle","Ellipsoid","IndexDatatype"],"mappings":"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"}