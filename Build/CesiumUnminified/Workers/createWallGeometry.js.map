{"version":3,"file":"createWallGeometry.js","sources":["../../../../Source/Core/WallGeometry.js","../../../../Source/WorkersES6/createWallGeometry.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\nimport WallGeometryLibrary from './WallGeometryLibrary.js';\n\n    var scratchCartesian3Position1 = new Cartesian3();\n    var scratchCartesian3Position2 = new Cartesian3();\n    var scratchCartesian3Position3 = new Cartesian3();\n    var scratchCartesian3Position4 = new Cartesian3();\n    var scratchCartesian3Position5 = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @alias WallGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\n     *\n     * @see WallGeometry#createGeometry\n     * @see WallGeometry#fromConstantHeight\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n     *\n     * @example\n     * // create a wall that spans from ground level to 10000 meters\n     * var wall = new Cesium.WallGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *     19.0, 47.0, 10000.0,\n     *     19.0, 48.0, 10000.0,\n     *     20.0, 48.0, 10000.0,\n     *     20.0, 47.0, 10000.0,\n     *     19.0, 47.0, 10000.0\n     *   ])\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     */\n    function WallGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var wallPositions = options.positions;\n        var maximumHeights = options.maximumHeights;\n        var minimumHeights = options.minimumHeights;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(wallPositions)) {\n            throw new DeveloperError('options.positions is required.');\n        }\n        if (defined(maximumHeights) && maximumHeights.length !== wallPositions.length) {\n            throw new DeveloperError('options.positions and options.maximumHeights must have the same length.');\n        }\n        if (defined(minimumHeights) && minimumHeights.length !== wallPositions.length) {\n            throw new DeveloperError('options.positions and options.minimumHeights must have the same length.');\n        }\n        //>>includeEnd('debug');\n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._positions = wallPositions;\n        this._minimumHeights = minimumHeights;\n        this._maximumHeights = maximumHeights;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._granularity = granularity;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._workerName = 'createWallGeometry';\n\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n        if (defined(minimumHeights)) {\n            numComponents += minimumHeights.length;\n        }\n        if (defined(maximumHeights)) {\n            numComponents += maximumHeights.length;\n        }\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {WallGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    WallGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var minimumHeights = value._minimumHeights;\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(minimumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = minimumHeights[i];\n            }\n        }\n\n        var maximumHeights = value._maximumHeights;\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(maximumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = maximumHeights[i];\n            }\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex] = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        minimumHeights : undefined,\n        maximumHeights : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {WallGeometry} [result] The object into which to store the result.\n     * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n     */\n    WallGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var minimumHeights;\n\n        if (length > 0) {\n            minimumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                minimumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        length = array[startingIndex++];\n        var maximumHeights;\n\n        if (length > 0) {\n            maximumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                maximumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.minimumHeights = minimumHeights;\n            scratchOptions.maximumHeights = maximumHeights;\n            scratchOptions.granularity = granularity;\n            return new WallGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._minimumHeights = minimumHeights;\n        result._maximumHeights = maximumHeights;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @returns {WallGeometry}\n     *\n     *\n     * @example\n     * // create a wall that spans from 10000 meters to 20000 meters\n     * var wall = Cesium.WallGeometry.fromConstantHeights({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     19.0, 47.0,\n     *     19.0, 48.0,\n     *     20.0, 48.0,\n     *     20.0, 47.0,\n     *     19.0, 47.0,\n     *   ]),\n     *   minimumHeight : 20000.0,\n     *   maximumHeight : 10000.0\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     *\n     * @see WallGeometry#createGeometry\n     */\n    WallGeometry.fromConstantHeights = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(positions)) {\n            throw new DeveloperError('options.positions is required.');\n        }\n        //>>includeEnd('debug');\n\n        var minHeights;\n        var maxHeights;\n\n        var min = options.minimumHeight;\n        var max = options.maximumHeight;\n\n        var doMin = defined(min);\n        var doMax = defined(max);\n        if (doMin || doMax) {\n            var length = positions.length;\n            minHeights = (doMin) ? new Array(length) : undefined;\n            maxHeights = (doMax) ? new Array(length) : undefined;\n\n            for (var i = 0; i < length; ++i) {\n                if (doMin) {\n                    minHeights[i] = min;\n                }\n\n                if (doMax) {\n                    maxHeights[i] = max;\n                }\n            }\n        }\n\n        var newOptions = {\n            positions : positions,\n            maximumHeights : maxHeights,\n            minimumHeights : minHeights,\n            ellipsoid : options.ellipsoid,\n            vertexFormat : options.vertexFormat\n        };\n        return new WallGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {WallGeometry} wallGeometry A description of the wall.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    WallGeometry.createGeometry = function(wallGeometry) {\n        var wallPositions = wallGeometry._positions;\n        var minimumHeights = wallGeometry._minimumHeights;\n        var maximumHeights = wallGeometry._maximumHeights;\n        var vertexFormat = wallGeometry._vertexFormat;\n        var granularity = wallGeometry._granularity;\n        var ellipsoid = wallGeometry._ellipsoid;\n\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\n        if (!defined(pos)) {\n            return;\n        }\n\n        var bottomPositions = pos.bottomPositions;\n        var topPositions = pos.topPositions;\n        var numCorners = pos.numCorners;\n\n        var length = topPositions.length;\n        var size = length * 2;\n\n        var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n        var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\n\n        var positionIndex = 0;\n        var normalIndex = 0;\n        var bitangentIndex = 0;\n        var tangentIndex = 0;\n        var stIndex = 0;\n\n        // add lower and upper points one after the other, lower\n        // points being even and upper points being odd\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var recomputeNormal = true;\n        length /= 3;\n        var i;\n        var s = 0;\n        var ds = 1/(length - wallPositions.length + 1);\n        for (i = 0; i < length; ++i) {\n            var i3 = i * 3;\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n            if (vertexFormat.position) {\n                // insert the lower point\n                positions[positionIndex++] = bottomPosition.x;\n                positions[positionIndex++] = bottomPosition.y;\n                positions[positionIndex++] = bottomPosition.z;\n\n                // insert the upper point\n                positions[positionIndex++] = topPosition.x;\n                positions[positionIndex++] = topPosition.y;\n                positions[positionIndex++] = topPosition.z;\n            }\n\n            if (vertexFormat.st) {\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 0.0;\n\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 1.0;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                var nextPosition;\n                var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\n                var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\n                if (i + 1 < length) {\n                    nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\n                    nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\n                }\n\n                if (recomputeNormal) {\n                    var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\n                    var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\n                    normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\n                    recomputeNormal = false;\n                }\n\n                if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\n                    recomputeNormal = true;\n                } else {\n                    s += ds;\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\n                    }\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        // prepare the side walls, two triangles for each wall\n        //\n        //    A (i+1)  B (i+3) E\n        //    +--------+-------+\n        //    |      / |      /|    triangles:  A C B\n        //    |     /  |     / |                B C D\n        //    |    /   |    /  |\n        //    |   /    |   /   |\n        //    |  /     |  /    |\n        //    | /      | /     |\n        //    +--------+-------+\n        //    C (i)    D (i+2) F\n        //\n\n        var numVertices = size / 3;\n        size -= 6 * (numCorners + 1);\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n        var edgeIndex = 0;\n        for (i = 0; i < numVertices - 2; i += 2) {\n            var LL = i;\n            var LR = i + 2;\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            var UL = i + 1;\n            var UR = i + 3;\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere.fromVertices(positions)\n        });\n    };\nexport default WallGeometry;\n","import defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport WallGeometry from '../Core/WallGeometry.js';\n\n    function createWallGeometry(wallGeometry, offset) {\n        if (defined(offset)) {\n            wallGeometry = WallGeometry.unpack(wallGeometry, offset);\n        }\n        wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\n        return WallGeometry.createGeometry(wallGeometry);\n    }\nexport default createWallGeometry;\n"],"names":["Cartesian3","defaultValue","defined","DeveloperError","VertexFormat","CesiumMath","Ellipsoid","WallGeometryLibrary","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}