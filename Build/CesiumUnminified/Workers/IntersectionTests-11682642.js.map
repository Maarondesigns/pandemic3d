{"version":3,"file":"IntersectionTests-11682642.js","sources":["../../../../Source/Core/QuadraticRealPolynomial.js","../../../../Source/Core/CubicRealPolynomial.js","../../../../Source/Core/QuarticRealPolynomial.js","../../../../Source/Core/Ray.js","../../../../Source/Core/IntersectionTests.js"],"sourcesContent":["import DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\n     *\n     * @exports QuadraticRealPolynomial\n     */\n    var QuadraticRealPolynomial = {};\n\n    /**\n     * Provides the discriminant of the quadratic equation from the supplied coefficients.\n     *\n     * @param {Number} a The coefficient of the 2nd order monomial.\n     * @param {Number} b The coefficient of the 1st order monomial.\n     * @param {Number} c The coefficient of the 0th order monomial.\n     * @returns {Number} The value of the discriminant.\n     */\n    QuadraticRealPolynomial.computeDiscriminant = function(a, b, c) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        var discriminant = b * b - 4.0 * a * c;\n        return discriminant;\n    };\n\n    function addWithCancellationCheck(left, right, tolerance) {\n        var difference = left + right;\n        if ((CesiumMath.sign(left) !== CesiumMath.sign(right)) &&\n                Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\n            return 0.0;\n        }\n\n        return difference;\n    }\n\n    /**\n     * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\n     *\n     * @param {Number} a The coefficient of the 2nd order monomial.\n     * @param {Number} b The coefficient of the 1st order monomial.\n     * @param {Number} c The coefficient of the 0th order monomial.\n     * @returns {Number[]} The real valued roots.\n     */\n    QuadraticRealPolynomial.computeRealRoots = function(a, b, c) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        var ratio;\n        if (a === 0.0) {\n            if (b === 0.0) {\n                // Constant function: c = 0.\n                return [];\n            }\n\n            // Linear function: b * x + c = 0.\n            return [-c / b];\n        } else if (b === 0.0) {\n            if (c === 0.0) {\n                // 2nd order monomial: a * x^2 = 0.\n                return [0.0, 0.0];\n            }\n\n            var cMagnitude = Math.abs(c);\n            var aMagnitude = Math.abs(a);\n\n            if ((cMagnitude < aMagnitude) && (cMagnitude / aMagnitude < CesiumMath.EPSILON14)) { // c ~= 0.0.\n                // 2nd order monomial: a * x^2 = 0.\n                return [0.0, 0.0];\n            } else if ((cMagnitude > aMagnitude) && (aMagnitude / cMagnitude < CesiumMath.EPSILON14)) { // a ~= 0.0.\n                // Constant function: c = 0.\n                return [];\n            }\n\n            // a * x^2 + c = 0\n            ratio = -c / a;\n\n            if (ratio < 0.0) {\n                // Both roots are complex.\n                return [];\n            }\n\n            // Both roots are real.\n            var root = Math.sqrt(ratio);\n            return [-root, root];\n        } else if (c === 0.0) {\n            // a * x^2 + b * x = 0\n            ratio = -b / a;\n            if (ratio < 0.0) {\n                return [ratio, 0.0];\n            }\n\n            return [0.0, ratio];\n        }\n\n        // a * x^2 + b * x + c = 0\n        var b2 = b * b;\n        var four_ac = 4.0 * a * c;\n        var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\n\n        if (radicand < 0.0) {\n            // Both roots are complex.\n            return [];\n        }\n\n        var q = -0.5 * addWithCancellationCheck(b, CesiumMath.sign(b) * Math.sqrt(radicand), CesiumMath.EPSILON14);\n        if (b > 0.0) {\n            return [q / a, c / q];\n        }\n\n        return [c / q, q / a];\n    };\nexport default QuadraticRealPolynomial;\n","import DeveloperError from './DeveloperError.js';\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\n\n    /**\n     * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n     *\n     * @exports CubicRealPolynomial\n     */\n    var CubicRealPolynomial = {};\n\n    /**\n     * Provides the discriminant of the cubic equation from the supplied coefficients.\n     *\n     * @param {Number} a The coefficient of the 3rd order monomial.\n     * @param {Number} b The coefficient of the 2nd order monomial.\n     * @param {Number} c The coefficient of the 1st order monomial.\n     * @param {Number} d The coefficient of the 0th order monomial.\n     * @returns {Number} The value of the discriminant.\n     */\n    CubicRealPolynomial.computeDiscriminant = function(a, b, c, d) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        if (typeof d !== 'number') {\n            throw new DeveloperError('d is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        var a2 = a * a;\n        var b2 = b * b;\n        var c2 = c * c;\n        var d2 = d * d;\n\n        var discriminant = 18.0 * a * b * c * d + b2 * c2 - 27.0 * a2 * d2 - 4.0 * (a * c2 * c + b2 * b * d);\n        return discriminant;\n    };\n\n    function computeRealRoots(a, b, c, d) {\n        var A = a;\n        var B = b / 3.0;\n        var C = c / 3.0;\n        var D = d;\n\n        var AC = A * C;\n        var BD = B * D;\n        var B2 = B * B;\n        var C2 = C * C;\n        var delta1 = A * C - B2;\n        var delta2 = A * D - B * C;\n        var delta3 = B * D - C2;\n\n        var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n        var temp;\n        var temp1;\n\n        if (discriminant < 0.0) {\n            var ABar;\n            var CBar;\n            var DBar;\n\n            if (B2 * BD >= AC * C2) {\n                ABar = A;\n                CBar = delta1;\n                DBar = -2.0 * B * delta1 + A * delta2;\n            } else {\n                ABar = D;\n                CBar = delta3;\n                DBar = -D * delta2 + 2.0 * C * delta3;\n            }\n\n            var s = (DBar < 0.0) ? -1.0 : 1.0; // This is not Math.Sign()!\n            var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n            temp1 = -DBar + temp0;\n\n            var x = temp1 / 2.0;\n            var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n            var q = (temp1 === temp0) ? -p : -CBar / p;\n\n            temp = (CBar <= 0.0) ? p + q : -DBar / (p * p + q * q + CBar);\n\n            if (B2 * BD >= AC * C2) {\n                return [(temp - B) / A];\n            }\n\n            return [-D / (temp + C)];\n        }\n\n        var CBarA = delta1;\n        var DBarA = -2.0 * B * delta1 + A * delta2;\n\n        var CBarD = delta3;\n        var DBarD = -D * delta2 + 2.0 * C * delta3;\n\n        var squareRootOfDiscriminant = Math.sqrt(discriminant);\n        var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n\n        var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n        temp = 2.0 * Math.sqrt(-CBarA);\n        var cosine = Math.cos(theta);\n        temp1 = temp * cosine;\n        var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n        var numeratorLarge = (temp1 + temp3 > 2.0 * B) ? temp1 - B : temp3 - B;\n        var denominatorLarge = A;\n\n        var root1 = numeratorLarge / denominatorLarge;\n\n        theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n        temp = 2.0 * Math.sqrt(-CBarD);\n        cosine = Math.cos(theta);\n        temp1 = temp * cosine;\n        temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n        var numeratorSmall = -D;\n        var denominatorSmall = (temp1 + temp3 < 2.0 * C) ? temp1 + C : temp3 + C;\n\n        var root3 = numeratorSmall / denominatorSmall;\n\n        var E = denominatorLarge * denominatorSmall;\n        var F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n        var G = numeratorLarge * numeratorSmall;\n\n        var root2 = (C * F - B * G) / (-B * F + C * E);\n\n        if (root1 <= root2) {\n            if (root1 <= root3) {\n                if (root2 <= root3) {\n                    return [root1, root2, root3];\n                }\n                return [root1, root3, root2];\n            }\n            return [root3, root1, root2];\n        }\n        if (root1 <= root3) {\n            return [root2, root1, root3];\n        }\n        if (root2 <= root3) {\n            return [root2, root3, root1];\n        }\n        return [root3, root2, root1];\n    }\n\n    /**\n     * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n     *\n     * @param {Number} a The coefficient of the 3rd order monomial.\n     * @param {Number} b The coefficient of the 2nd order monomial.\n     * @param {Number} c The coefficient of the 1st order monomial.\n     * @param {Number} d The coefficient of the 0th order monomial.\n     * @returns {Number[]} The real valued roots.\n     */\n    CubicRealPolynomial.computeRealRoots = function(a, b, c, d) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        if (typeof d !== 'number') {\n            throw new DeveloperError('d is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        var roots;\n        var ratio;\n        if (a === 0.0) {\n            // Quadratic function: b * x^2 + c * x + d = 0.\n            return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n        } else if (b === 0.0) {\n            if (c === 0.0) {\n                if (d === 0.0) {\n                    // 3rd order monomial: a * x^3 = 0.\n                    return [0.0, 0.0, 0.0];\n                }\n\n                // a * x^3 + d = 0\n                ratio = -d / a;\n                var root = (ratio < 0.0) ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n                return [root, root, root];\n            } else if (d === 0.0) {\n                // x * (a * x^2 + c) = 0.\n                roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\n\n                // Return the roots in ascending order.\n                if (roots.Length === 0) {\n                    return [0.0];\n                }\n                return [roots[0], 0.0, roots[1]];\n            }\n\n            // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n            return computeRealRoots(a, 0, c, d);\n        } else if (c === 0.0) {\n            if (d === 0.0) {\n                // x^2 * (a * x + b) = 0.\n                ratio = -b / a;\n                if (ratio < 0.0) {\n                    return [ratio, 0.0, 0.0];\n                }\n                return [0.0, 0.0, ratio];\n            }\n            // a * x^3 + b * x^2 + d = 0.\n            return computeRealRoots(a, b, 0, d);\n        } else if (d === 0.0) {\n            // x * (a * x^2 + b * x + c) = 0\n            roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\n\n            // Return the roots in ascending order.\n            if (roots.length === 0) {\n                return [0.0];\n            } else if (roots[1] <= 0.0) {\n                return [roots[0], roots[1], 0.0];\n            } else if (roots[0] >= 0.0) {\n                return [0.0, roots[0], roots[1]];\n            }\n            return [roots[0], 0.0, roots[1]];\n        }\n\n        return computeRealRoots(a, b, c, d);\n    };\nexport default CubicRealPolynomial;\n","import CubicRealPolynomial from './CubicRealPolynomial.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\n\n    /**\n     * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n     *\n     * @exports QuarticRealPolynomial\n     */\n    var QuarticRealPolynomial = {};\n\n    /**\n     * Provides the discriminant of the quartic equation from the supplied coefficients.\n     *\n     * @param {Number} a The coefficient of the 4th order monomial.\n     * @param {Number} b The coefficient of the 3rd order monomial.\n     * @param {Number} c The coefficient of the 2nd order monomial.\n     * @param {Number} d The coefficient of the 1st order monomial.\n     * @param {Number} e The coefficient of the 0th order monomial.\n     * @returns {Number} The value of the discriminant.\n     */\n    QuarticRealPolynomial.computeDiscriminant = function(a, b, c, d, e) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        if (typeof d !== 'number') {\n            throw new DeveloperError('d is a required number.');\n        }\n        if (typeof e !== 'number') {\n            throw new DeveloperError('e is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        var a2 = a * a;\n        var a3 = a2 * a;\n        var b2 = b * b;\n        var b3 = b2 * b;\n        var c2 = c * c;\n        var c3 = c2 * c;\n        var d2 = d * d;\n        var d3 = d2 * d;\n        var e2 = e * e;\n        var e3 = e2 * e;\n\n        var discriminant = (b2 * c2 * d2 - 4.0 * b3 * d3 - 4.0 * a * c3 * d2 + 18 * a * b * c * d3 - 27.0 * a2 * d2 * d2 + 256.0 * a3 * e3) +\n            e * (18.0 * b3 * c * d - 4.0 * b2 * c3 + 16.0 * a * c2 * c2 - 80.0 * a * b * c2 * d - 6.0 * a * b2 * d2 + 144.0 * a2 * c * d2) +\n            e2 * (144.0 * a * b2 * c - 27.0 * b2 * b2 - 128.0 * a2 * c2 - 192.0 * a2 * b * d);\n        return discriminant;\n    };\n\n    function original(a3, a2, a1, a0) {\n        var a3Squared = a3 * a3;\n\n        var p = a2 - 3.0 * a3Squared / 8.0;\n        var q = a1 - a2 * a3 / 2.0 + a3Squared * a3 / 8.0;\n        var r = a0 - a1 * a3 / 4.0 + a2 * a3Squared / 16.0 - 3.0 * a3Squared * a3Squared / 256.0;\n\n        // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n        var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, 2.0 * p, p * p - 4.0 * r, -q * q);\n\n        if (cubicRoots.length > 0) {\n            var temp = -a3 / 4.0;\n\n            // Use the largest positive root.\n            var hSquared = cubicRoots[cubicRoots.length - 1];\n\n            if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n                // y^4 + p y^2 + r = 0.\n                var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n\n                if (roots.length === 2) {\n                    var root0 = roots[0];\n                    var root1 = roots[1];\n\n                    var y;\n                    if (root0 >= 0.0 && root1 >= 0.0) {\n                        var y0 = Math.sqrt(root0);\n                        var y1 = Math.sqrt(root1);\n\n                        return [temp - y1, temp - y0, temp + y0, temp + y1];\n                    } else if (root0 >= 0.0 && root1 < 0.0) {\n                        y = Math.sqrt(root0);\n                        return [temp - y, temp + y];\n                    } else if (root0 < 0.0 && root1 >= 0.0) {\n                        y = Math.sqrt(root1);\n                        return [temp - y, temp + y];\n                    }\n                }\n                return [];\n            } else if (hSquared > 0.0) {\n                var h = Math.sqrt(hSquared);\n\n                var m = (p + hSquared - q / h) / 2.0;\n                var n = (p + hSquared + q / h) / 2.0;\n\n                // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n                var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n                var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n\n                if (roots1.length !== 0) {\n                    roots1[0] += temp;\n                    roots1[1] += temp;\n\n                    if (roots2.length !== 0) {\n                        roots2[0] += temp;\n                        roots2[1] += temp;\n\n                        if (roots1[1] <= roots2[0]) {\n                            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n                        } else if (roots2[1] <= roots1[0]) {\n                            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n                        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n                            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n                        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n                            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n                        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n                            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n                        }\n                        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n                    }\n                    return roots1;\n                }\n\n                if (roots2.length !== 0) {\n                    roots2[0] += temp;\n                    roots2[1] += temp;\n\n                    return roots2;\n                }\n                return [];\n            }\n        }\n        return [];\n    }\n\n    function neumark(a3, a2, a1, a0) {\n        var a1Squared = a1 * a1;\n        var a2Squared = a2 * a2;\n        var a3Squared = a3 * a3;\n\n        var p = -2.0 * a2;\n        var q = a1 * a3 + a2Squared - 4.0 * a0;\n        var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n\n        var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n\n        if (cubicRoots.length > 0) {\n            // Use the most positive root\n            var y = cubicRoots[0];\n\n            var temp = (a2 - y);\n            var tempSquared = temp * temp;\n\n            var g1 = a3 / 2.0;\n            var h1 = temp / 2.0;\n\n            var m = tempSquared - 4.0 * a0;\n            var mError = tempSquared + 4.0 * Math.abs(a0);\n\n            var n = a3Squared - 4.0 * y;\n            var nError = a3Squared + 4.0 * Math.abs(y);\n\n            var g2;\n            var h2;\n\n            if (y < 0.0 || (m * nError < n * mError)) {\n                var squareRootOfN = Math.sqrt(n);\n                g2 = squareRootOfN / 2.0;\n                h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n            } else {\n                var squareRootOfM = Math.sqrt(m);\n                g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n                h2 = squareRootOfM / 2.0;\n            }\n\n            var G;\n            var g;\n            if (g1 === 0.0 && g2 === 0.0) {\n                G = 0.0;\n                g = 0.0;\n            } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n                G = g1 + g2;\n                g = y / G;\n            } else {\n                g = g1 - g2;\n                G = y / g;\n            }\n\n            var H;\n            var h;\n            if (h1 === 0.0 && h2 === 0.0) {\n                H = 0.0;\n                h = 0.0;\n            } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n                H = h1 + h2;\n                h = a0 / H;\n            } else {\n                h = h1 - h2;\n                H = a0 / h;\n            }\n\n            // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n            var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n            var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n\n            if (roots1.length !== 0) {\n                if (roots2.length !== 0) {\n                    if (roots1[1] <= roots2[0]) {\n                        return [roots1[0], roots1[1], roots2[0], roots2[1]];\n                    } else if (roots2[1] <= roots1[0]) {\n                        return [roots2[0], roots2[1], roots1[0], roots1[1]];\n                    } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n                        return [roots2[0], roots1[0], roots1[1], roots2[1]];\n                    } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n                        return [roots1[0], roots2[0], roots2[1], roots1[1]];\n                    } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n                        return [roots2[0], roots1[0], roots2[1], roots1[1]];\n                    }\n                    return [roots1[0], roots2[0], roots1[1], roots2[1]];\n                }\n                return roots1;\n            }\n            if (roots2.length !== 0) {\n                return roots2;\n            }\n        }\n        return [];\n    }\n\n    /**\n     * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n     *\n     * @param {Number} a The coefficient of the 4th order monomial.\n     * @param {Number} b The coefficient of the 3rd order monomial.\n     * @param {Number} c The coefficient of the 2nd order monomial.\n     * @param {Number} d The coefficient of the 1st order monomial.\n     * @param {Number} e The coefficient of the 0th order monomial.\n     * @returns {Number[]} The real valued roots.\n     */\n    QuarticRealPolynomial.computeRealRoots = function(a, b, c, d, e) {\n        //>>includeStart('debug', pragmas.debug);\n        if (typeof a !== 'number') {\n            throw new DeveloperError('a is a required number.');\n        }\n        if (typeof b !== 'number') {\n            throw new DeveloperError('b is a required number.');\n        }\n        if (typeof c !== 'number') {\n            throw new DeveloperError('c is a required number.');\n        }\n        if (typeof d !== 'number') {\n            throw new DeveloperError('d is a required number.');\n        }\n        if (typeof e !== 'number') {\n            throw new DeveloperError('e is a required number.');\n        }\n        //>>includeEnd('debug');\n\n        if (Math.abs(a) < CesiumMath.EPSILON15) {\n            return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n        }\n        var a3 = b / a;\n        var a2 = c / a;\n        var a1 = d / a;\n        var a0 = e / a;\n\n        var k = (a3 < 0.0) ? 1 : 0;\n        k += (a2 < 0.0) ? k + 1 : k;\n        k += (a1 < 0.0) ? k + 1 : k;\n        k += (a0 < 0.0) ? k + 1 : k;\n\n        switch (k) {\n        case 0:\n            return original(a3, a2, a1, a0);\n        case 1:\n            return neumark(a3, a2, a1, a0);\n        case 2:\n            return neumark(a3, a2, a1, a0);\n        case 3:\n            return original(a3, a2, a1, a0);\n        case 4:\n            return original(a3, a2, a1, a0);\n        case 5:\n            return neumark(a3, a2, a1, a0);\n        case 6:\n            return original(a3, a2, a1, a0);\n        case 7:\n            return original(a3, a2, a1, a0);\n        case 8:\n            return neumark(a3, a2, a1, a0);\n        case 9:\n            return original(a3, a2, a1, a0);\n        case 10:\n            return original(a3, a2, a1, a0);\n        case 11:\n            return neumark(a3, a2, a1, a0);\n        case 12:\n            return original(a3, a2, a1, a0);\n        case 13:\n            return original(a3, a2, a1, a0);\n        case 14:\n            return original(a3, a2, a1, a0);\n        case 15:\n            return original(a3, a2, a1, a0);\n        default:\n            return undefined;\n        }\n    };\nexport default QuarticRealPolynomial;\n","import Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\n\n    /**\n     * Represents a ray that extends infinitely from the provided origin in the provided direction.\n     * @alias Ray\n     * @constructor\n     *\n     * @param {Cartesian3} [origin=Cartesian3.ZERO] The origin of the ray.\n     * @param {Cartesian3} [direction=Cartesian3.ZERO] The direction of the ray.\n     */\n    function Ray(origin, direction) {\n        direction = Cartesian3.clone(defaultValue(direction, Cartesian3.ZERO));\n        if (!Cartesian3.equals(direction, Cartesian3.ZERO)) {\n            Cartesian3.normalize(direction, direction);\n        }\n\n        /**\n         * The origin of the ray.\n         * @type {Cartesian3}\n         * @default {@link Cartesian3.ZERO}\n         */\n        this.origin = Cartesian3.clone(defaultValue(origin, Cartesian3.ZERO));\n\n        /**\n         * The direction of the ray.\n         * @type {Cartesian3}\n         */\n        this.direction = direction;\n    }\n\n    /**\n     * Duplicates a Ray instance.\n     *\n     * @param {Ray} ray The ray to duplicate.\n     * @param {Ray} [result] The object onto which to store the result.\n     * @returns {Ray} The modified result parameter or a new Ray instance if one was not provided. (Returns undefined if ray is undefined)\n     */\n    Ray.clone = function(ray, result) {\n        if (!defined(ray)) {\n            return undefined;\n        }\n        if (!defined(result)) {\n            return new Ray(ray.origin, ray.direction);\n        }\n        result.origin = Cartesian3.clone(ray.origin);\n        result.direction = Cartesian3.clone(ray.direction);\n        return result;\n    };\n\n    /**\n     * Computes the point along the ray given by r(t) = o + t*d,\n     * where o is the origin of the ray and d is the direction.\n     *\n     * @param {Ray} ray The ray.\n     * @param {Number} t A scalar value.\n     * @param {Cartesian3} [result] The object in which the result will be stored.\n     * @returns {Cartesian3} The modified result parameter, or a new instance if none was provided.\n     *\n     * @example\n     * //Get the first intersection point of a ray and an ellipsoid.\n     * var intersection = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\n     * var point = Cesium.Ray.getPoint(ray, intersection.start);\n     */\n    Ray.getPoint = function(ray, t, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('ray', ray);\n        Check.typeOf.number('t', t);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        result = Cartesian3.multiplyByScalar(ray.direction, t, result);\n        return Cartesian3.add(ray.origin, result, result);\n    };\nexport default Ray;\n","import Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Interval from './Interval.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\nimport QuarticRealPolynomial from './QuarticRealPolynomial.js';\nimport Ray from './Ray.js';\n\n    /**\n     * Functions for computing the intersection between geometries such as rays, planes, triangles, and ellipsoids.\n     *\n     * @exports IntersectionTests\n     * @namespace\n     */\n    var IntersectionTests = {};\n\n    /**\n     * Computes the intersection of a ray and a plane.\n     *\n     * @param {Ray} ray The ray.\n     * @param {Plane} plane The plane.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n     */\n    IntersectionTests.rayPlane = function(ray, plane, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(ray)) {\n            throw new DeveloperError('ray is required.');\n        }\n        if (!defined(plane)) {\n            throw new DeveloperError('plane is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        var origin = ray.origin;\n        var direction = ray.direction;\n        var normal = plane.normal;\n        var denominator = Cartesian3.dot(normal, direction);\n\n        if (Math.abs(denominator) < CesiumMath.EPSILON15) {\n            // Ray is parallel to plane.  The ray may be in the polygon's plane.\n            return undefined;\n        }\n\n        var t = (-plane.distance - Cartesian3.dot(normal, origin)) / denominator;\n\n        if (t < 0) {\n            return undefined;\n        }\n\n        result = Cartesian3.multiplyByScalar(direction, t, result);\n        return Cartesian3.add(origin, result, result);\n    };\n\n    var scratchEdge0 = new Cartesian3();\n    var scratchEdge1 = new Cartesian3();\n    var scratchPVec = new Cartesian3();\n    var scratchTVec = new Cartesian3();\n    var scratchQVec = new Cartesian3();\n\n    /**\n     * Computes the intersection of a ray and a triangle as a parametric distance along the input ray. The result is negative when the triangle is behind the ray.\n     *\n     * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\n     * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\n     *\n     * @memberof IntersectionTests\n     *\n     * @param {Ray} ray The ray.\n     * @param {Cartesian3} p0 The first vertex of the triangle.\n     * @param {Cartesian3} p1 The second vertex of the triangle.\n     * @param {Cartesian3} p2 The third vertex of the triangle.\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n     *                  and return undefined for intersections with the back face.\n     * @returns {Number} The intersection as a parametric distance along the ray, or undefined if there is no intersection.\n     */\n    IntersectionTests.rayTriangleParametric  = function(ray, p0, p1, p2, cullBackFaces) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(ray)) {\n            throw new DeveloperError('ray is required.');\n        }\n        if (!defined(p0)) {\n            throw new DeveloperError('p0 is required.');\n        }\n        if (!defined(p1)) {\n            throw new DeveloperError('p1 is required.');\n        }\n        if (!defined(p2)) {\n            throw new DeveloperError('p2 is required.');\n        }\n        //>>includeEnd('debug');\n\n        cullBackFaces = defaultValue(cullBackFaces, false);\n\n        var origin = ray.origin;\n        var direction = ray.direction;\n\n        var edge0 = Cartesian3.subtract(p1, p0, scratchEdge0);\n        var edge1 = Cartesian3.subtract(p2, p0, scratchEdge1);\n\n        var p = Cartesian3.cross(direction, edge1, scratchPVec);\n        var det = Cartesian3.dot(edge0, p);\n\n        var tvec;\n        var q;\n\n        var u;\n        var v;\n        var t;\n\n        if (cullBackFaces) {\n            if (det < CesiumMath.EPSILON6) {\n                return undefined;\n            }\n\n            tvec = Cartesian3.subtract(origin, p0, scratchTVec);\n            u = Cartesian3.dot(tvec, p);\n            if (u < 0.0 || u > det) {\n                return undefined;\n            }\n\n            q = Cartesian3.cross(tvec, edge0, scratchQVec);\n\n            v = Cartesian3.dot(direction, q);\n            if (v < 0.0 || u + v > det) {\n                return undefined;\n            }\n\n            t = Cartesian3.dot(edge1, q) / det;\n        } else {\n            if (Math.abs(det) < CesiumMath.EPSILON6) {\n                return undefined;\n            }\n            var invDet = 1.0 / det;\n\n            tvec = Cartesian3.subtract(origin, p0, scratchTVec);\n            u = Cartesian3.dot(tvec, p) * invDet;\n            if (u < 0.0 || u > 1.0) {\n                return undefined;\n            }\n\n            q = Cartesian3.cross(tvec, edge0, scratchQVec);\n\n            v = Cartesian3.dot(direction, q) * invDet;\n            if (v < 0.0 || u + v > 1.0) {\n                return undefined;\n            }\n\n            t = Cartesian3.dot(edge1, q) * invDet;\n        }\n\n        return t;\n    };\n\n    /**\n     * Computes the intersection of a ray and a triangle as a Cartesian3 coordinate.\n     *\n     * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\n     * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\n     *\n     * @memberof IntersectionTests\n     *\n     * @param {Ray} ray The ray.\n     * @param {Cartesian3} p0 The first vertex of the triangle.\n     * @param {Cartesian3} p1 The second vertex of the triangle.\n     * @param {Cartesian3} p2 The third vertex of the triangle.\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n     *                  and return undefined for intersections with the back face.\n     * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n     */\n    IntersectionTests.rayTriangle = function(ray, p0, p1, p2, cullBackFaces, result) {\n        var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\n        if (!defined(t) || t < 0.0) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        Cartesian3.multiplyByScalar(ray.direction, t, result);\n        return Cartesian3.add(ray.origin, result, result);\n    };\n\n    var scratchLineSegmentTriangleRay = new Ray();\n\n    /**\n     * Computes the intersection of a line segment and a triangle.\n     * @memberof IntersectionTests\n     *\n     * @param {Cartesian3} v0 The an end point of the line segment.\n     * @param {Cartesian3} v1 The other end point of the line segment.\n     * @param {Cartesian3} p0 The first vertex of the triangle.\n     * @param {Cartesian3} p1 The second vertex of the triangle.\n     * @param {Cartesian3} p2 The third vertex of the triangle.\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n     *                  and return undefined for intersections with the back face.\n     * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n     */\n    IntersectionTests.lineSegmentTriangle = function(v0, v1, p0, p1, p2, cullBackFaces, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(v0)) {\n            throw new DeveloperError('v0 is required.');\n        }\n        if (!defined(v1)) {\n            throw new DeveloperError('v1 is required.');\n        }\n        if (!defined(p0)) {\n            throw new DeveloperError('p0 is required.');\n        }\n        if (!defined(p1)) {\n            throw new DeveloperError('p1 is required.');\n        }\n        if (!defined(p2)) {\n            throw new DeveloperError('p2 is required.');\n        }\n        //>>includeEnd('debug');\n\n        var ray = scratchLineSegmentTriangleRay;\n        Cartesian3.clone(v0, ray.origin);\n        Cartesian3.subtract(v1, v0, ray.direction);\n        Cartesian3.normalize(ray.direction, ray.direction);\n\n        var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\n        if (!defined(t) || t < 0.0 || t > Cartesian3.distance(v0, v1)) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        Cartesian3.multiplyByScalar(ray.direction, t, result);\n        return Cartesian3.add(ray.origin, result, result);\n    };\n\n    function solveQuadratic(a, b, c, result) {\n        var det = b * b - 4.0 * a * c;\n        if (det < 0.0) {\n            return undefined;\n        } else if (det > 0.0) {\n            var denom = 1.0 / (2.0 * a);\n            var disc = Math.sqrt(det);\n            var root0 = (-b + disc) * denom;\n            var root1 = (-b - disc) * denom;\n\n            if (root0 < root1) {\n                result.root0 = root0;\n                result.root1 = root1;\n            } else {\n                result.root0 = root1;\n                result.root1 = root0;\n            }\n\n            return result;\n        }\n\n        var root = -b / (2.0 * a);\n        if (root === 0.0) {\n            return undefined;\n        }\n\n        result.root0 = result.root1 = root;\n        return result;\n    }\n\n    var raySphereRoots = {\n        root0 : 0.0,\n        root1 : 0.0\n    };\n\n    function raySphere(ray, sphere, result) {\n        if (!defined(result)) {\n            result = new Interval();\n        }\n\n        var origin = ray.origin;\n        var direction = ray.direction;\n\n        var center = sphere.center;\n        var radiusSquared = sphere.radius * sphere.radius;\n\n        var diff = Cartesian3.subtract(origin, center, scratchPVec);\n\n        var a = Cartesian3.dot(direction, direction);\n        var b = 2.0 * Cartesian3.dot(direction, diff);\n        var c = Cartesian3.magnitudeSquared(diff) - radiusSquared;\n\n        var roots = solveQuadratic(a, b, c, raySphereRoots);\n        if (!defined(roots)) {\n            return undefined;\n        }\n\n        result.start = roots.root0;\n        result.stop = roots.root1;\n        return result;\n    }\n\n    /**\n     * Computes the intersection points of a ray with a sphere.\n     * @memberof IntersectionTests\n     *\n     * @param {Ray} ray The ray.\n     * @param {BoundingSphere} sphere The sphere.\n     * @param {Interval} [result] The result onto which to store the result.\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n     */\n    IntersectionTests.raySphere = function(ray, sphere, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(ray)) {\n            throw new DeveloperError('ray is required.');\n        }\n        if (!defined(sphere)) {\n            throw new DeveloperError('sphere is required.');\n        }\n        //>>includeEnd('debug');\n\n        result = raySphere(ray, sphere, result);\n        if (!defined(result) || result.stop < 0.0) {\n            return undefined;\n        }\n\n        result.start = Math.max(result.start, 0.0);\n        return result;\n    };\n\n    var scratchLineSegmentRay = new Ray();\n\n    /**\n     * Computes the intersection points of a line segment with a sphere.\n     * @memberof IntersectionTests\n     *\n     * @param {Cartesian3} p0 An end point of the line segment.\n     * @param {Cartesian3} p1 The other end point of the line segment.\n     * @param {BoundingSphere} sphere The sphere.\n     * @param {Interval} [result] The result onto which to store the result.\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n     */\n    IntersectionTests.lineSegmentSphere = function(p0, p1, sphere, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(p0)) {\n            throw new DeveloperError('p0 is required.');\n        }\n        if (!defined(p1)) {\n            throw new DeveloperError('p1 is required.');\n        }\n        if (!defined(sphere)) {\n            throw new DeveloperError('sphere is required.');\n        }\n        //>>includeEnd('debug');\n\n        var ray = scratchLineSegmentRay;\n        Cartesian3.clone(p0, ray.origin);\n        var direction = Cartesian3.subtract(p1, p0, ray.direction);\n\n        var maxT = Cartesian3.magnitude(direction);\n        Cartesian3.normalize(direction, direction);\n\n        result = raySphere(ray, sphere, result);\n        if (!defined(result) || result.stop < 0.0 || result.start > maxT) {\n            return undefined;\n        }\n\n        result.start = Math.max(result.start, 0.0);\n        result.stop = Math.min(result.stop, maxT);\n        return result;\n    };\n\n    var scratchQ = new Cartesian3();\n    var scratchW = new Cartesian3();\n\n    /**\n     * Computes the intersection points of a ray with an ellipsoid.\n     *\n     * @param {Ray} ray The ray.\n     * @param {Ellipsoid} ellipsoid The ellipsoid.\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n     */\n    IntersectionTests.rayEllipsoid = function(ray, ellipsoid) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(ray)) {\n            throw new DeveloperError('ray is required.');\n        }\n        if (!defined(ellipsoid)) {\n            throw new DeveloperError('ellipsoid is required.');\n        }\n        //>>includeEnd('debug');\n\n        var inverseRadii = ellipsoid.oneOverRadii;\n        var q = Cartesian3.multiplyComponents(inverseRadii, ray.origin, scratchQ);\n        var w = Cartesian3.multiplyComponents(inverseRadii, ray.direction, scratchW);\n\n        var q2 = Cartesian3.magnitudeSquared(q);\n        var qw = Cartesian3.dot(q, w);\n\n        var difference, w2, product, discriminant, temp;\n\n        if (q2 > 1.0) {\n            // Outside ellipsoid.\n            if (qw >= 0.0) {\n                // Looking outward or tangent (0 intersections).\n                return undefined;\n            }\n\n            // qw < 0.0.\n            var qw2 = qw * qw;\n            difference = q2 - 1.0; // Positively valued.\n            w2 = Cartesian3.magnitudeSquared(w);\n            product = w2 * difference;\n\n            if (qw2 < product) {\n                // Imaginary roots (0 intersections).\n                return undefined;\n            } else if (qw2 > product) {\n                // Distinct roots (2 intersections).\n                discriminant = qw * qw - product;\n                temp = -qw + Math.sqrt(discriminant); // Avoid cancellation.\n                var root0 = temp / w2;\n                var root1 = difference / temp;\n                if (root0 < root1) {\n                    return new Interval(root0, root1);\n                }\n\n                return {\n                    start : root1,\n                    stop : root0\n                };\n            }\n            // qw2 == product.  Repeated roots (2 intersections).\n            var root = Math.sqrt(difference / w2);\n            return new Interval(root, root);\n        } else if (q2 < 1.0) {\n            // Inside ellipsoid (2 intersections).\n            difference = q2 - 1.0; // Negatively valued.\n            w2 = Cartesian3.magnitudeSquared(w);\n            product = w2 * difference; // Negatively valued.\n\n            discriminant = qw * qw - product;\n            temp = -qw + Math.sqrt(discriminant); // Positively valued.\n            return new Interval(0.0, temp / w2);\n        }\n        // q2 == 1.0. On ellipsoid.\n        if (qw < 0.0) {\n            // Looking inward.\n            w2 = Cartesian3.magnitudeSquared(w);\n            return new Interval(0.0, -qw / w2);\n        }\n\n        // qw >= 0.0.  Looking outward or tangent.\n        return undefined;\n    };\n\n    function addWithCancellationCheck(left, right, tolerance) {\n        var difference = left + right;\n        if ((CesiumMath.sign(left) !== CesiumMath.sign(right)) &&\n                Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\n            return 0.0;\n        }\n\n        return difference;\n    }\n\n    function quadraticVectorExpression(A, b, c, x, w) {\n        var xSquared = x * x;\n        var wSquared = w * w;\n\n        var l2 = (A[Matrix3.COLUMN1ROW1] - A[Matrix3.COLUMN2ROW2]) * wSquared;\n        var l1 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN1ROW0], A[Matrix3.COLUMN0ROW1], CesiumMath.EPSILON15) + b.y);\n        var l0 = (A[Matrix3.COLUMN0ROW0] * xSquared + A[Matrix3.COLUMN2ROW2] * wSquared) + x * b.x + c;\n\n        var r1 = wSquared * addWithCancellationCheck(A[Matrix3.COLUMN2ROW1], A[Matrix3.COLUMN1ROW2], CesiumMath.EPSILON15);\n        var r0 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN2ROW0], A[Matrix3.COLUMN0ROW2]) + b.z);\n\n        var cosines;\n        var solutions = [];\n        if (r0 === 0.0 && r1 === 0.0) {\n            cosines = QuadraticRealPolynomial.computeRealRoots(l2, l1, l0);\n            if (cosines.length === 0) {\n                return solutions;\n            }\n\n            var cosine0 = cosines[0];\n            var sine0 = Math.sqrt(Math.max(1.0 - cosine0 * cosine0, 0.0));\n            solutions.push(new Cartesian3(x, w * cosine0, w * -sine0));\n            solutions.push(new Cartesian3(x, w * cosine0, w * sine0));\n\n            if (cosines.length === 2) {\n                var cosine1 = cosines[1];\n                var sine1 = Math.sqrt(Math.max(1.0 - cosine1 * cosine1, 0.0));\n                solutions.push(new Cartesian3(x, w * cosine1, w * -sine1));\n                solutions.push(new Cartesian3(x, w * cosine1, w * sine1));\n            }\n\n            return solutions;\n        }\n\n        var r0Squared = r0 * r0;\n        var r1Squared = r1 * r1;\n        var l2Squared = l2 * l2;\n        var r0r1 = r0 * r1;\n\n        var c4 = l2Squared + r1Squared;\n        var c3 = 2.0 * (l1 * l2 + r0r1);\n        var c2 = 2.0 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;\n        var c1 = 2.0 * (l0 * l1 - r0r1);\n        var c0 = l0 * l0 - r0Squared;\n\n        if (c4 === 0.0 && c3 === 0.0 && c2 === 0.0 && c1 === 0.0) {\n            return solutions;\n        }\n\n        cosines = QuarticRealPolynomial.computeRealRoots(c4, c3, c2, c1, c0);\n        var length = cosines.length;\n        if (length === 0) {\n            return solutions;\n        }\n\n        for ( var i = 0; i < length; ++i) {\n            var cosine = cosines[i];\n            var cosineSquared = cosine * cosine;\n            var sineSquared = Math.max(1.0 - cosineSquared, 0.0);\n            var sine = Math.sqrt(sineSquared);\n\n            //var left = l2 * cosineSquared + l1 * cosine + l0;\n            var left;\n            if (CesiumMath.sign(l2) === CesiumMath.sign(l0)) {\n                left = addWithCancellationCheck(l2 * cosineSquared + l0, l1 * cosine, CesiumMath.EPSILON12);\n            } else if (CesiumMath.sign(l0) === CesiumMath.sign(l1 * cosine)) {\n                left = addWithCancellationCheck(l2 * cosineSquared, l1 * cosine + l0, CesiumMath.EPSILON12);\n            } else {\n                left = addWithCancellationCheck(l2 * cosineSquared + l1 * cosine, l0, CesiumMath.EPSILON12);\n            }\n\n            var right = addWithCancellationCheck(r1 * cosine, r0, CesiumMath.EPSILON15);\n            var product = left * right;\n\n            if (product < 0.0) {\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\n            } else if (product > 0.0) {\n                solutions.push(new Cartesian3(x, w * cosine, w * -sine));\n            } else if (sine !== 0.0) {\n                solutions.push(new Cartesian3(x, w * cosine, w * -sine));\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\n                ++i;\n            } else {\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\n            }\n        }\n\n        return solutions;\n    }\n\n    var firstAxisScratch = new Cartesian3();\n    var secondAxisScratch = new Cartesian3();\n    var thirdAxisScratch = new Cartesian3();\n    var referenceScratch = new Cartesian3();\n    var bCart = new Cartesian3();\n    var bScratch = new Matrix3();\n    var btScratch = new Matrix3();\n    var diScratch = new Matrix3();\n    var dScratch = new Matrix3();\n    var cScratch = new Matrix3();\n    var tempMatrix = new Matrix3();\n    var aScratch = new Matrix3();\n    var sScratch = new Cartesian3();\n    var closestScratch = new Cartesian3();\n    var surfPointScratch = new Cartographic();\n\n    /**\n     * Provides the point along the ray which is nearest to the ellipsoid.\n     *\n     * @param {Ray} ray The ray.\n     * @param {Ellipsoid} ellipsoid The ellipsoid.\n     * @returns {Cartesian3} The nearest planetodetic point on the ray.\n     */\n    IntersectionTests.grazingAltitudeLocation = function(ray, ellipsoid) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(ray)) {\n            throw new DeveloperError('ray is required.');\n        }\n        if (!defined(ellipsoid)) {\n            throw new DeveloperError('ellipsoid is required.');\n        }\n        //>>includeEnd('debug');\n\n        var position = ray.origin;\n        var direction = ray.direction;\n\n        if (!Cartesian3.equals(position, Cartesian3.ZERO)) {\n            var normal = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);\n            if (Cartesian3.dot(direction, normal) >= 0.0) { // The location provided is the closest point in altitude\n                return position;\n            }\n        }\n\n        var intersects = defined(this.rayEllipsoid(ray, ellipsoid));\n\n        // Compute the scaled direction vector.\n        var f = ellipsoid.transformPositionToScaledSpace(direction, firstAxisScratch);\n\n        // Constructs a basis from the unit scaled direction vector. Construct its rotation and transpose.\n        var firstAxis = Cartesian3.normalize(f, f);\n        var reference = Cartesian3.mostOrthogonalAxis(f, referenceScratch);\n        var secondAxis = Cartesian3.normalize(Cartesian3.cross(reference, firstAxis, secondAxisScratch), secondAxisScratch);\n        var thirdAxis  = Cartesian3.normalize(Cartesian3.cross(firstAxis, secondAxis, thirdAxisScratch), thirdAxisScratch);\n        var B = bScratch;\n        B[0] = firstAxis.x;\n        B[1] = firstAxis.y;\n        B[2] = firstAxis.z;\n        B[3] = secondAxis.x;\n        B[4] = secondAxis.y;\n        B[5] = secondAxis.z;\n        B[6] = thirdAxis.x;\n        B[7] = thirdAxis.y;\n        B[8] = thirdAxis.z;\n\n        var B_T = Matrix3.transpose(B, btScratch);\n\n        // Get the scaling matrix and its inverse.\n        var D_I = Matrix3.fromScale(ellipsoid.radii, diScratch);\n        var D = Matrix3.fromScale(ellipsoid.oneOverRadii, dScratch);\n\n        var C = cScratch;\n        C[0] = 0.0;\n        C[1] = -direction.z;\n        C[2] = direction.y;\n        C[3] = direction.z;\n        C[4] = 0.0;\n        C[5] = -direction.x;\n        C[6] = -direction.y;\n        C[7] = direction.x;\n        C[8] = 0.0;\n\n        var temp = Matrix3.multiply(Matrix3.multiply(B_T, D, tempMatrix), C, tempMatrix);\n        var A = Matrix3.multiply(Matrix3.multiply(temp, D_I, aScratch), B, aScratch);\n        var b = Matrix3.multiplyByVector(temp, position, bCart);\n\n        // Solve for the solutions to the expression in standard form:\n        var solutions = quadraticVectorExpression(A, Cartesian3.negate(b, firstAxisScratch), 0.0, 0.0, 1.0);\n\n        var s;\n        var altitude;\n        var length = solutions.length;\n        if (length > 0) {\n            var closest = Cartesian3.clone(Cartesian3.ZERO, closestScratch);\n            var maximumValue = Number.NEGATIVE_INFINITY;\n\n            for ( var i = 0; i < length; ++i) {\n                s = Matrix3.multiplyByVector(D_I, Matrix3.multiplyByVector(B, solutions[i], sScratch), sScratch);\n                var v = Cartesian3.normalize(Cartesian3.subtract(s, position, referenceScratch), referenceScratch);\n                var dotProduct = Cartesian3.dot(v, direction);\n\n                if (dotProduct > maximumValue) {\n                    maximumValue = dotProduct;\n                    closest = Cartesian3.clone(s, closest);\n                }\n            }\n\n            var surfacePoint = ellipsoid.cartesianToCartographic(closest, surfPointScratch);\n            maximumValue = CesiumMath.clamp(maximumValue, 0.0, 1.0);\n            altitude = Cartesian3.magnitude(Cartesian3.subtract(closest, position, referenceScratch)) * Math.sqrt(1.0 - maximumValue * maximumValue);\n            altitude = intersects ? -altitude : altitude;\n            surfacePoint.height = altitude;\n            return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3());\n        }\n\n        return undefined;\n    };\n\n    var lineSegmentPlaneDifference = new Cartesian3();\n\n    /**\n     * Computes the intersection of a line segment and a plane.\n     *\n     * @param {Cartesian3} endPoint0 An end point of the line segment.\n     * @param {Cartesian3} endPoint1 The other end point of the line segment.\n     * @param {Plane} plane The plane.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersection.\n     *\n     * @example\n     * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n     * var normal = ellipsoid.geodeticSurfaceNormal(origin);\n     * var plane = Cesium.Plane.fromPointNormal(origin, normal);\n     *\n     * var p0 = new Cesium.Cartesian3(...);\n     * var p1 = new Cesium.Cartesian3(...);\n     *\n     * // find the intersection of the line segment from p0 to p1 and the tangent plane at origin.\n     * var intersection = Cesium.IntersectionTests.lineSegmentPlane(p0, p1, plane);\n     */\n    IntersectionTests.lineSegmentPlane = function(endPoint0, endPoint1, plane, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(endPoint0)) {\n            throw new DeveloperError('endPoint0 is required.');\n        }\n        if (!defined(endPoint1)) {\n            throw new DeveloperError('endPoint1 is required.');\n        }\n        if (!defined(plane)) {\n            throw new DeveloperError('plane is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        var difference = Cartesian3.subtract(endPoint1, endPoint0, lineSegmentPlaneDifference);\n        var normal = plane.normal;\n        var nDotDiff = Cartesian3.dot(normal, difference);\n\n        // check if the segment and plane are parallel\n        if (Math.abs(nDotDiff) < CesiumMath.EPSILON6) {\n            return undefined;\n        }\n\n        var nDotP0 = Cartesian3.dot(normal, endPoint0);\n        var t = -(plane.distance + nDotP0) / nDotDiff;\n\n        // intersection only if t is in [0, 1]\n        if (t < 0.0 || t > 1.0) {\n            return undefined;\n        }\n\n        // intersection is endPoint0 + t * (endPoint1 - endPoint0)\n        Cartesian3.multiplyByScalar(difference, t, result);\n        Cartesian3.add(endPoint0, result, result);\n        return result;\n    };\n\n    /**\n     * Computes the intersection of a triangle and a plane\n     *\n     * @param {Cartesian3} p0 First point of the triangle\n     * @param {Cartesian3} p1 Second point of the triangle\n     * @param {Cartesian3} p2 Third point of the triangle\n     * @param {Plane} plane Intersection plane\n     * @returns {Object} An object with properties <code>positions</code> and <code>indices</code>, which are arrays that represent three triangles that do not cross the plane. (Undefined if no intersection exists)\n     *\n     * @example\n     * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n     * var normal = ellipsoid.geodeticSurfaceNormal(origin);\n     * var plane = Cesium.Plane.fromPointNormal(origin, normal);\n     *\n     * var p0 = new Cesium.Cartesian3(...);\n     * var p1 = new Cesium.Cartesian3(...);\n     * var p2 = new Cesium.Cartesian3(...);\n     *\n     * // convert the triangle composed of points (p0, p1, p2) to three triangles that don't cross the plane\n     * var triangles = Cesium.IntersectionTests.trianglePlaneIntersection(p0, p1, p2, plane);\n     */\n    IntersectionTests.trianglePlaneIntersection = function(p0, p1, p2, plane) {\n        //>>includeStart('debug', pragmas.debug);\n        if ((!defined(p0)) ||\n            (!defined(p1)) ||\n            (!defined(p2)) ||\n            (!defined(plane))) {\n            throw new DeveloperError('p0, p1, p2, and plane are required.');\n        }\n        //>>includeEnd('debug');\n\n        var planeNormal = plane.normal;\n        var planeD = plane.distance;\n        var p0Behind = (Cartesian3.dot(planeNormal, p0) + planeD) < 0.0;\n        var p1Behind = (Cartesian3.dot(planeNormal, p1) + planeD) < 0.0;\n        var p2Behind = (Cartesian3.dot(planeNormal, p2) + planeD) < 0.0;\n        // Given these dots products, the calls to lineSegmentPlaneIntersection\n        // always have defined results.\n\n        var numBehind = 0;\n        numBehind += p0Behind ? 1 : 0;\n        numBehind += p1Behind ? 1 : 0;\n        numBehind += p2Behind ? 1 : 0;\n\n        var u1, u2;\n        if (numBehind === 1 || numBehind === 2) {\n            u1 = new Cartesian3();\n            u2 = new Cartesian3();\n        }\n\n        if (numBehind === 1) {\n            if (p0Behind) {\n                IntersectionTests.lineSegmentPlane(p0, p1, plane, u1);\n                IntersectionTests.lineSegmentPlane(p0, p2, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        0, 3, 4,\n\n                        // In front\n                        1, 2, 4,\n                        1, 4, 3\n                    ]\n                };\n            } else if (p1Behind) {\n                IntersectionTests.lineSegmentPlane(p1, p2, plane, u1);\n                IntersectionTests.lineSegmentPlane(p1, p0, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        1, 3, 4,\n\n                        // In front\n                        2, 0, 4,\n                        2, 4, 3\n                    ]\n                };\n            } else if (p2Behind) {\n                IntersectionTests.lineSegmentPlane(p2, p0, plane, u1);\n                IntersectionTests.lineSegmentPlane(p2, p1, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        2, 3, 4,\n\n                        // In front\n                        0, 1, 4,\n                        0, 4, 3\n                    ]\n                };\n            }\n        } else if (numBehind === 2) {\n            if (!p0Behind) {\n                IntersectionTests.lineSegmentPlane(p1, p0, plane, u1);\n                IntersectionTests.lineSegmentPlane(p2, p0, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        1, 2, 4,\n                        1, 4, 3,\n\n                        // In front\n                        0, 3, 4\n                    ]\n                };\n            } else if (!p1Behind) {\n                IntersectionTests.lineSegmentPlane(p2, p1, plane, u1);\n                IntersectionTests.lineSegmentPlane(p0, p1, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        2, 0, 4,\n                        2, 4, 3,\n\n                        // In front\n                        1, 3, 4\n                    ]\n                };\n            } else if (!p2Behind) {\n                IntersectionTests.lineSegmentPlane(p0, p2, plane, u1);\n                IntersectionTests.lineSegmentPlane(p1, p2, plane, u2);\n\n                return {\n                    positions : [p0, p1, p2, u1, u2 ],\n                    indices : [\n                        // Behind\n                        0, 1, 4,\n                        0, 4, 3,\n\n                        // In front\n                        2, 3, 4\n                    ]\n                };\n            }\n        }\n\n        // if numBehind is 3, the triangle is completely behind the plane;\n        // otherwise, it is completely in front (numBehind is 0).\n        return undefined;\n    };\nexport default IntersectionTests;\n"],"names":["DeveloperError","CesiumMath","Cartesian3","defaultValue","defined","Check","Interval","addWithCancellationCheck","Matrix3","Cartographic"],"mappings":"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"}