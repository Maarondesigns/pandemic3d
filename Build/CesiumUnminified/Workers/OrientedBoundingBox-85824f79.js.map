{"version":3,"file":"OrientedBoundingBox-85824f79.js","sources":["../../../../Source/Core/OrientedBoundingBox.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\nimport Intersect from './Intersect.js';\nimport Interval from './Interval.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport Plane from './Plane.js';\nimport Rectangle from './Rectangle.js';\n\n    /**\n     * Creates an instance of an OrientedBoundingBox.\n     * An OrientedBoundingBox of some object is a closed and convex cuboid. It can provide a tighter bounding volume than {@link BoundingSphere} or {@link AxisAlignedBoundingBox} in many cases.\n     * @alias OrientedBoundingBox\n     * @constructor\n     *\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the box.\n     * @param {Matrix3} [halfAxes=Matrix3.ZERO] The three orthogonal half-axes of the bounding box.\n     *                                          Equivalently, the transformation matrix, to rotate and scale a 0x0x0\n     *                                          cube centered at the origin.\n     *\n     *\n     * @example\n     * // Create an OrientedBoundingBox using a transformation matrix, a position where the box will be translated, and a scale.\n     * var center = new Cesium.Cartesian3(1.0, 0.0, 0.0);\n     * var halfAxes = Cesium.Matrix3.fromScale(new Cesium.Cartesian3(1.0, 3.0, 2.0), new Cesium.Matrix3());\n     *\n     * var obb = new Cesium.OrientedBoundingBox(center, halfAxes);\n     *\n     * @see BoundingSphere\n     * @see BoundingRectangle\n     */\n    function OrientedBoundingBox(center, halfAxes) {\n        /**\n         * The center of the box.\n         * @type {Cartesian3}\n         * @default {@link Cartesian3.ZERO}\n         */\n        this.center = Cartesian3.clone(defaultValue(center, Cartesian3.ZERO));\n        /**\n         * The transformation matrix, to rotate the box to the right position.\n         * @type {Matrix3}\n         * @default {@link Matrix3.ZERO}\n         */\n        this.halfAxes = Matrix3.clone(defaultValue(halfAxes, Matrix3.ZERO));\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    OrientedBoundingBox.packedLength = Cartesian3.packedLength + Matrix3.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {OrientedBoundingBox} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    OrientedBoundingBox.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value.center, array, startingIndex);\n        Matrix3.pack(value.halfAxes, array, startingIndex + Cartesian3.packedLength);\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {OrientedBoundingBox} [result] The object into which to store the result.\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\n     */\n    OrientedBoundingBox.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        if (!defined(result)) {\n            result = new OrientedBoundingBox();\n        }\n\n        Cartesian3.unpack(array, startingIndex, result.center);\n        Matrix3.unpack(array, startingIndex + Cartesian3.packedLength, result.halfAxes);\n        return result;\n    };\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var scratchCartesian5 = new Cartesian3();\n    var scratchCartesian6 = new Cartesian3();\n    var scratchCovarianceResult = new Matrix3();\n    var scratchEigenResult = {\n        unitary : new Matrix3(),\n        diagonal : new Matrix3()\n    };\n\n    /**\n     * Computes an instance of an OrientedBoundingBox of the given positions.\n     * This is an implementation of Stefan Gottschalk's Collision Queries using Oriented Bounding Boxes solution (PHD thesis).\n     * Reference: http://gamma.cs.unc.edu/users/gottschalk/main.pdf\n     *\n     * @param {Cartesian3[]} [positions] List of {@link Cartesian3} points that the bounding box will enclose.\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\n     *\n     * @example\n     * // Compute an object oriented bounding box enclosing two points.\n     * var box = Cesium.OrientedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\n     */\n    OrientedBoundingBox.fromPoints = function(positions, result) {\n        if (!defined(result)) {\n            result = new OrientedBoundingBox();\n        }\n\n        if (!defined(positions) || positions.length === 0) {\n            result.halfAxes = Matrix3.ZERO;\n            result.center = Cartesian3.ZERO;\n            return result;\n        }\n\n        var i;\n        var length = positions.length;\n\n        var meanPoint = Cartesian3.clone(positions[0], scratchCartesian1);\n        for (i = 1; i < length; i++) {\n            Cartesian3.add(meanPoint, positions[i], meanPoint);\n        }\n        var invLength = 1.0 / length;\n        Cartesian3.multiplyByScalar(meanPoint, invLength, meanPoint);\n\n        var exx = 0.0;\n        var exy = 0.0;\n        var exz = 0.0;\n        var eyy = 0.0;\n        var eyz = 0.0;\n        var ezz = 0.0;\n        var p;\n\n        for (i = 0; i < length; i++) {\n            p = Cartesian3.subtract(positions[i], meanPoint, scratchCartesian2);\n            exx += p.x * p.x;\n            exy += p.x * p.y;\n            exz += p.x * p.z;\n            eyy += p.y * p.y;\n            eyz += p.y * p.z;\n            ezz += p.z * p.z;\n        }\n\n        exx *= invLength;\n        exy *= invLength;\n        exz *= invLength;\n        eyy *= invLength;\n        eyz *= invLength;\n        ezz *= invLength;\n\n        var covarianceMatrix = scratchCovarianceResult;\n        covarianceMatrix[0] = exx;\n        covarianceMatrix[1] = exy;\n        covarianceMatrix[2] = exz;\n        covarianceMatrix[3] = exy;\n        covarianceMatrix[4] = eyy;\n        covarianceMatrix[5] = eyz;\n        covarianceMatrix[6] = exz;\n        covarianceMatrix[7] = eyz;\n        covarianceMatrix[8] = ezz;\n\n        var eigenDecomposition = Matrix3.computeEigenDecomposition(covarianceMatrix, scratchEigenResult);\n        var rotation = Matrix3.clone(eigenDecomposition.unitary, result.halfAxes);\n\n        var v1 = Matrix3.getColumn(rotation, 0, scratchCartesian4);\n        var v2 = Matrix3.getColumn(rotation, 1, scratchCartesian5);\n        var v3 = Matrix3.getColumn(rotation, 2, scratchCartesian6);\n\n        var u1 = -Number.MAX_VALUE;\n        var u2 = -Number.MAX_VALUE;\n        var u3 = -Number.MAX_VALUE;\n        var l1 = Number.MAX_VALUE;\n        var l2 = Number.MAX_VALUE;\n        var l3 = Number.MAX_VALUE;\n\n        for (i = 0; i < length; i++) {\n            p = positions[i];\n            u1 = Math.max(Cartesian3.dot(v1, p), u1);\n            u2 = Math.max(Cartesian3.dot(v2, p), u2);\n            u3 = Math.max(Cartesian3.dot(v3, p), u3);\n\n            l1 = Math.min(Cartesian3.dot(v1, p), l1);\n            l2 = Math.min(Cartesian3.dot(v2, p), l2);\n            l3 = Math.min(Cartesian3.dot(v3, p), l3);\n        }\n\n        v1 = Cartesian3.multiplyByScalar(v1, 0.5 * (l1 + u1), v1);\n        v2 = Cartesian3.multiplyByScalar(v2, 0.5 * (l2 + u2), v2);\n        v3 = Cartesian3.multiplyByScalar(v3, 0.5 * (l3 + u3), v3);\n\n        var center = Cartesian3.add(v1, v2, result.center);\n        Cartesian3.add(center, v3, center);\n\n        var scale = scratchCartesian3;\n        scale.x = u1 - l1;\n        scale.y = u2 - l2;\n        scale.z = u3 - l3;\n        Cartesian3.multiplyByScalar(scale, 0.5, scale);\n        Matrix3.multiplyByScale(result.halfAxes, scale, result.halfAxes);\n\n        return result;\n    };\n\n    var scratchOffset = new Cartesian3();\n    var scratchScale = new Cartesian3();\n    function fromPlaneExtents(planeOrigin, planeXAxis, planeYAxis, planeZAxis, minimumX, maximumX, minimumY, maximumY, minimumZ, maximumZ, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(minimumX) ||\n            !defined(maximumX) ||\n            !defined(minimumY) ||\n            !defined(maximumY) ||\n            !defined(minimumZ) ||\n            !defined(maximumZ)) {\n            throw new DeveloperError('all extents (minimum/maximum X/Y/Z) are required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new OrientedBoundingBox();\n        }\n\n        var halfAxes = result.halfAxes;\n        Matrix3.setColumn(halfAxes, 0, planeXAxis, halfAxes);\n        Matrix3.setColumn(halfAxes, 1, planeYAxis, halfAxes);\n        Matrix3.setColumn(halfAxes, 2, planeZAxis, halfAxes);\n\n        var centerOffset = scratchOffset;\n        centerOffset.x = (minimumX + maximumX) / 2.0;\n        centerOffset.y = (minimumY + maximumY) / 2.0;\n        centerOffset.z = (minimumZ + maximumZ) / 2.0;\n\n        var scale = scratchScale;\n        scale.x = (maximumX - minimumX) / 2.0;\n        scale.y = (maximumY - minimumY) / 2.0;\n        scale.z = (maximumZ - minimumZ) / 2.0;\n\n        var center = result.center;\n        centerOffset = Matrix3.multiplyByVector(halfAxes, centerOffset, centerOffset);\n        Cartesian3.add(planeOrigin, centerOffset, center);\n        Matrix3.multiplyByScale(halfAxes, scale, halfAxes);\n\n        return result;\n    }\n\n    var scratchRectangleCenterCartographic = new Cartographic();\n    var scratchRectangleCenter = new Cartesian3();\n    var scratchPerimeterCartographicNC = new Cartographic();\n    var scratchPerimeterCartographicNW = new Cartographic();\n    var scratchPerimeterCartographicCW = new Cartographic();\n    var scratchPerimeterCartographicSW = new Cartographic();\n    var scratchPerimeterCartographicSC = new Cartographic();\n    var scratchPerimeterCartesianNC = new Cartesian3();\n    var scratchPerimeterCartesianNW = new Cartesian3();\n    var scratchPerimeterCartesianCW = new Cartesian3();\n    var scratchPerimeterCartesianSW = new Cartesian3();\n    var scratchPerimeterCartesianSC = new Cartesian3();\n    var scratchPerimeterProjectedNC = new Cartesian2();\n    var scratchPerimeterProjectedNW = new Cartesian2();\n    var scratchPerimeterProjectedCW = new Cartesian2();\n    var scratchPerimeterProjectedSW = new Cartesian2();\n    var scratchPerimeterProjectedSC = new Cartesian2();\n\n    var scratchPlaneOrigin = new Cartesian3();\n    var scratchPlaneNormal = new Cartesian3();\n    var scratchPlaneXAxis = new Cartesian3();\n    var scratchHorizonCartesian = new Cartesian3();\n    var scratchHorizonProjected = new Cartesian2();\n    var scratchMaxY = new Cartesian3();\n    var scratchMinY = new Cartesian3();\n    var scratchZ = new Cartesian3();\n    var scratchPlane = new Plane(Cartesian3.UNIT_X, 0.0);\n\n    /**\n     * Computes an OrientedBoundingBox that bounds a {@link Rectangle} on the surface of an {@link Ellipsoid}.\n     * There are no guarantees about the orientation of the bounding box.\n     *\n     * @param {Rectangle} rectangle The cartographic rectangle on the surface of the ellipsoid.\n     * @param {Number} [minimumHeight=0.0] The minimum height (elevation) within the tile.\n     * @param {Number} [maximumHeight=0.0] The maximum height (elevation) within the tile.\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle is defined.\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if none was provided.\n     *\n     * @exception {DeveloperError} rectangle.width must be between 0 and pi.\n     * @exception {DeveloperError} rectangle.height must be between 0 and pi.\n     * @exception {DeveloperError} ellipsoid must be an ellipsoid of revolution (<code>radii.x == radii.y</code>)\n     */\n    OrientedBoundingBox.fromRectangle = function(rectangle, minimumHeight, maximumHeight, ellipsoid, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(rectangle)) {\n            throw new DeveloperError('rectangle is required');\n        }\n        if (rectangle.width < 0.0 || rectangle.width > CesiumMath.TWO_PI) {\n            throw new DeveloperError('Rectangle width must be between 0 and 2*pi');\n        }\n        if (rectangle.height < 0.0 || rectangle.height > CesiumMath.PI) {\n            throw new DeveloperError('Rectangle height must be between 0 and pi');\n        }\n        if (defined(ellipsoid) && !CesiumMath.equalsEpsilon(ellipsoid.radii.x, ellipsoid.radii.y, CesiumMath.EPSILON15)) {\n            throw new DeveloperError('Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)');\n        }\n        //>>includeEnd('debug');\n\n        minimumHeight = defaultValue(minimumHeight, 0.0);\n        maximumHeight = defaultValue(maximumHeight, 0.0);\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n        var minX, maxX, minY, maxY, minZ, maxZ, plane;\n\n        if (rectangle.width <= CesiumMath.PI) {\n            // The bounding box will be aligned with the tangent plane at the center of the rectangle.\n            var tangentPointCartographic = Rectangle.center(rectangle, scratchRectangleCenterCartographic);\n            var tangentPoint = ellipsoid.cartographicToCartesian(tangentPointCartographic, scratchRectangleCenter);\n            var tangentPlane = new EllipsoidTangentPlane(tangentPoint, ellipsoid);\n            plane = tangentPlane.plane;\n\n            // If the rectangle spans the equator, CW is instead aligned with the equator (because it sticks out the farthest at the equator).\n            var lonCenter = tangentPointCartographic.longitude;\n            var latCenter = (rectangle.south < 0.0 && rectangle.north > 0.0) ? 0.0 : tangentPointCartographic.latitude;\n\n            // Compute XY extents using the rectangle at maximum height\n            var perimeterCartographicNC = Cartographic.fromRadians(lonCenter, rectangle.north, maximumHeight, scratchPerimeterCartographicNC);\n            var perimeterCartographicNW = Cartographic.fromRadians(rectangle.west, rectangle.north, maximumHeight, scratchPerimeterCartographicNW);\n            var perimeterCartographicCW = Cartographic.fromRadians(rectangle.west, latCenter, maximumHeight, scratchPerimeterCartographicCW);\n            var perimeterCartographicSW = Cartographic.fromRadians(rectangle.west, rectangle.south, maximumHeight, scratchPerimeterCartographicSW);\n            var perimeterCartographicSC = Cartographic.fromRadians(lonCenter, rectangle.south, maximumHeight, scratchPerimeterCartographicSC);\n\n            var perimeterCartesianNC = ellipsoid.cartographicToCartesian(perimeterCartographicNC, scratchPerimeterCartesianNC);\n            var perimeterCartesianNW = ellipsoid.cartographicToCartesian(perimeterCartographicNW, scratchPerimeterCartesianNW);\n            var perimeterCartesianCW = ellipsoid.cartographicToCartesian(perimeterCartographicCW, scratchPerimeterCartesianCW);\n            var perimeterCartesianSW = ellipsoid.cartographicToCartesian(perimeterCartographicSW, scratchPerimeterCartesianSW);\n            var perimeterCartesianSC = ellipsoid.cartographicToCartesian(perimeterCartographicSC, scratchPerimeterCartesianSC);\n\n            var perimeterProjectedNC = tangentPlane.projectPointToNearestOnPlane(perimeterCartesianNC, scratchPerimeterProjectedNC);\n            var perimeterProjectedNW = tangentPlane.projectPointToNearestOnPlane(perimeterCartesianNW, scratchPerimeterProjectedNW);\n            var perimeterProjectedCW = tangentPlane.projectPointToNearestOnPlane(perimeterCartesianCW, scratchPerimeterProjectedCW);\n            var perimeterProjectedSW = tangentPlane.projectPointToNearestOnPlane(perimeterCartesianSW, scratchPerimeterProjectedSW);\n            var perimeterProjectedSC = tangentPlane.projectPointToNearestOnPlane(perimeterCartesianSC, scratchPerimeterProjectedSC);\n\n            minX = Math.min(perimeterProjectedNW.x, perimeterProjectedCW.x, perimeterProjectedSW.x);\n            maxX = -minX; // symmetrical\n\n            maxY = Math.max(perimeterProjectedNW.y, perimeterProjectedNC.y);\n            minY = Math.min(perimeterProjectedSW.y, perimeterProjectedSC.y);\n\n            // Compute minimum Z using the rectangle at minimum height, since it will be deeper than the maximum height\n            perimeterCartographicNW.height = perimeterCartographicSW.height = minimumHeight;\n            perimeterCartesianNW = ellipsoid.cartographicToCartesian(perimeterCartographicNW, scratchPerimeterCartesianNW);\n            perimeterCartesianSW = ellipsoid.cartographicToCartesian(perimeterCartographicSW, scratchPerimeterCartesianSW);\n\n            minZ = Math.min(Plane.getPointDistance(plane, perimeterCartesianNW), Plane.getPointDistance(plane, perimeterCartesianSW));\n            maxZ = maximumHeight;  // Since the tangent plane touches the surface at height = 0, this is okay\n\n            return fromPlaneExtents(tangentPlane.origin, tangentPlane.xAxis, tangentPlane.yAxis, tangentPlane.zAxis, minX, maxX, minY, maxY, minZ, maxZ, result);\n        }\n\n        // Handle the case where rectangle width is greater than PI (wraps around more than half the ellipsoid).\n        var fullyAboveEquator = rectangle.south > 0.0;\n        var fullyBelowEquator = rectangle.north < 0.0;\n        var latitudeNearestToEquator = fullyAboveEquator ? rectangle.south : (fullyBelowEquator ? rectangle.north : 0.0);\n        var centerLongitude = Rectangle.center(rectangle, scratchRectangleCenterCartographic).longitude;\n\n        // Plane is located at the rectangle's center longitude and the rectangle's latitude that is closest to the equator. It rotates around the Z axis.\n        // This results in a better fit than the obb approach for smaller rectangles, which orients with the rectangle's center normal.\n        var planeOrigin = Cartesian3.fromRadians(centerLongitude, latitudeNearestToEquator, maximumHeight, ellipsoid, scratchPlaneOrigin);\n        planeOrigin.z = 0.0; // center the plane on the equator to simpify plane normal calculation\n        var isPole = Math.abs(planeOrigin.x) < CesiumMath.EPSILON10 && Math.abs(planeOrigin.y) < CesiumMath.EPSILON10;\n        var planeNormal = !isPole ? Cartesian3.normalize(planeOrigin, scratchPlaneNormal) : Cartesian3.UNIT_X;\n        var planeYAxis = Cartesian3.UNIT_Z;\n        var planeXAxis = Cartesian3.cross(planeNormal, planeYAxis, scratchPlaneXAxis);\n        plane = Plane.fromPointNormal(planeOrigin, planeNormal, scratchPlane);\n\n        // Get the horizon point relative to the center. This will be the farthest extent in the plane's X dimension.\n        var horizonCartesian = Cartesian3.fromRadians(centerLongitude + CesiumMath.PI_OVER_TWO, latitudeNearestToEquator, maximumHeight, ellipsoid, scratchHorizonCartesian);\n        maxX = Cartesian3.dot(Plane.projectPointOntoPlane(plane, horizonCartesian, scratchHorizonProjected), planeXAxis);\n        minX = -maxX; // symmetrical\n\n        // Get the min and max Y, using the height that will give the largest extent\n        maxY = Cartesian3.fromRadians(0.0, rectangle.north, fullyBelowEquator ? minimumHeight : maximumHeight, ellipsoid, scratchMaxY).z;\n        minY = Cartesian3.fromRadians(0.0, rectangle.south, fullyAboveEquator ? minimumHeight : maximumHeight, ellipsoid, scratchMinY).z;\n\n        var farZ = Cartesian3.fromRadians(rectangle.east, latitudeNearestToEquator, maximumHeight, ellipsoid, scratchZ);\n        minZ = Plane.getPointDistance(plane, farZ);\n        maxZ = 0.0; // plane origin starts at maxZ already\n\n        // min and max are local to the plane axes\n        return fromPlaneExtents(planeOrigin, planeXAxis, planeYAxis, planeNormal, minX, maxX, minY, maxY, minZ, maxZ, result);\n    };\n\n    /**\n     * Duplicates a OrientedBoundingBox instance.\n     *\n     * @param {OrientedBoundingBox} box The bounding box to duplicate.\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\n     */\n    OrientedBoundingBox.clone = function(box, result) {\n        if (!defined(box)) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            return new OrientedBoundingBox(box.center, box.halfAxes);\n        }\n\n        Cartesian3.clone(box.center, result.center);\n        Matrix3.clone(box.halfAxes, result.halfAxes);\n\n        return result;\n    };\n\n    /**\n     * Determines which side of a plane the oriented bounding box is located.\n     *\n     * @param {OrientedBoundingBox} box The oriented bounding box to test.\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n     *                      intersects the plane.\n     */\n    OrientedBoundingBox.intersectPlane = function(box, plane) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(box)) {\n            throw new DeveloperError('box is required.');\n        }\n\n        if (!defined(plane)) {\n            throw new DeveloperError('plane is required.');\n        }\n        //>>includeEnd('debug');\n\n        var center = box.center;\n        var normal = plane.normal;\n        var halfAxes = box.halfAxes;\n        var normalX = normal.x, normalY = normal.y, normalZ = normal.z;\n        // plane is used as if it is its normal; the first three components are assumed to be normalized\n        var radEffective = Math.abs(normalX * halfAxes[Matrix3.COLUMN0ROW0] + normalY * halfAxes[Matrix3.COLUMN0ROW1] + normalZ * halfAxes[Matrix3.COLUMN0ROW2]) +\n                           Math.abs(normalX * halfAxes[Matrix3.COLUMN1ROW0] + normalY * halfAxes[Matrix3.COLUMN1ROW1] + normalZ * halfAxes[Matrix3.COLUMN1ROW2]) +\n                           Math.abs(normalX * halfAxes[Matrix3.COLUMN2ROW0] + normalY * halfAxes[Matrix3.COLUMN2ROW1] + normalZ * halfAxes[Matrix3.COLUMN2ROW2]);\n        var distanceToPlane = Cartesian3.dot(normal, center) + plane.distance;\n\n        if (distanceToPlane <= -radEffective) {\n            // The entire box is on the negative side of the plane normal\n            return Intersect.OUTSIDE;\n        } else if (distanceToPlane >= radEffective) {\n            // The entire box is on the positive side of the plane normal\n            return Intersect.INSIDE;\n        }\n        return Intersect.INTERSECTING;\n    };\n\n    var scratchCartesianU = new Cartesian3();\n    var scratchCartesianV = new Cartesian3();\n    var scratchCartesianW = new Cartesian3();\n    var scratchPPrime = new Cartesian3();\n\n    /**\n     * Computes the estimated distance squared from the closest point on a bounding box to a point.\n     *\n     * @param {OrientedBoundingBox} box The box.\n     * @param {Cartesian3} cartesian The point\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\n     *\n     * @example\n     * // Sort bounding boxes from back to front\n     * boxes.sort(function(a, b) {\n     *     return Cesium.OrientedBoundingBox.distanceSquaredTo(b, camera.positionWC) - Cesium.OrientedBoundingBox.distanceSquaredTo(a, camera.positionWC);\n     * });\n     */\n    OrientedBoundingBox.distanceSquaredTo = function(box, cartesian) {\n        // See Geometric Tools for Computer Graphics 10.4.2\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(box)) {\n            throw new DeveloperError('box is required.');\n        }\n        if (!defined(cartesian)) {\n            throw new DeveloperError('cartesian is required.');\n        }\n        //>>includeEnd('debug');\n\n        var offset = Cartesian3.subtract(cartesian, box.center, scratchOffset);\n\n        var halfAxes = box.halfAxes;\n        var u = Matrix3.getColumn(halfAxes, 0, scratchCartesianU);\n        var v = Matrix3.getColumn(halfAxes, 1, scratchCartesianV);\n        var w = Matrix3.getColumn(halfAxes, 2, scratchCartesianW);\n\n        var uHalf = Cartesian3.magnitude(u);\n        var vHalf = Cartesian3.magnitude(v);\n        var wHalf = Cartesian3.magnitude(w);\n\n        Cartesian3.normalize(u, u);\n        Cartesian3.normalize(v, v);\n        Cartesian3.normalize(w, w);\n\n        var pPrime = scratchPPrime;\n        pPrime.x = Cartesian3.dot(offset, u);\n        pPrime.y = Cartesian3.dot(offset, v);\n        pPrime.z = Cartesian3.dot(offset, w);\n\n        var distanceSquared = 0.0;\n        var d;\n\n        if (pPrime.x < -uHalf) {\n            d = pPrime.x + uHalf;\n            distanceSquared += d * d;\n        } else if (pPrime.x > uHalf) {\n            d = pPrime.x - uHalf;\n            distanceSquared += d * d;\n        }\n\n        if (pPrime.y < -vHalf) {\n            d = pPrime.y + vHalf;\n            distanceSquared += d * d;\n        } else if (pPrime.y > vHalf) {\n            d = pPrime.y - vHalf;\n            distanceSquared += d * d;\n        }\n\n        if (pPrime.z < -wHalf) {\n            d = pPrime.z + wHalf;\n            distanceSquared += d * d;\n        } else if (pPrime.z > wHalf) {\n            d = pPrime.z - wHalf;\n            distanceSquared += d * d;\n        }\n\n        return distanceSquared;\n    };\n\n    var scratchCorner = new Cartesian3();\n    var scratchToCenter = new Cartesian3();\n\n    /**\n     * The distances calculated by the vector from the center of the bounding box to position projected onto direction.\n     * <br>\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\n     * closest and farthest planes from position that intersect the bounding box.\n     *\n     * @param {OrientedBoundingBox} box The bounding box to calculate the distance to.\n     * @param {Cartesian3} position The position to calculate the distance from.\n     * @param {Cartesian3} direction The direction from position.\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\n     * @returns {Interval} The nearest and farthest distances on the bounding box from position in direction.\n     */\n    OrientedBoundingBox.computePlaneDistances = function(box, position, direction, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(box)) {\n            throw new DeveloperError('box is required.');\n        }\n\n        if (!defined(position)) {\n            throw new DeveloperError('position is required.');\n        }\n\n        if (!defined(direction)) {\n            throw new DeveloperError('direction is required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Interval();\n        }\n\n        var minDist = Number.POSITIVE_INFINITY;\n        var maxDist = Number.NEGATIVE_INFINITY;\n\n        var center = box.center;\n        var halfAxes = box.halfAxes;\n\n        var u = Matrix3.getColumn(halfAxes, 0, scratchCartesianU);\n        var v = Matrix3.getColumn(halfAxes, 1, scratchCartesianV);\n        var w = Matrix3.getColumn(halfAxes, 2, scratchCartesianW);\n\n        // project first corner\n        var corner = Cartesian3.add(u, v, scratchCorner);\n        Cartesian3.add(corner, w, corner);\n        Cartesian3.add(corner, center, corner);\n\n        var toCenter = Cartesian3.subtract(corner, position, scratchToCenter);\n        var mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project second corner\n        Cartesian3.add(center, u, corner);\n        Cartesian3.add(corner, v, corner);\n        Cartesian3.subtract(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project third corner\n        Cartesian3.add(center, u, corner);\n        Cartesian3.subtract(corner, v, corner);\n        Cartesian3.add(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project fourth corner\n        Cartesian3.add(center, u, corner);\n        Cartesian3.subtract(corner, v, corner);\n        Cartesian3.subtract(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project fifth corner\n        Cartesian3.subtract(center, u, corner);\n        Cartesian3.add(corner, v, corner);\n        Cartesian3.add(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project sixth corner\n        Cartesian3.subtract(center, u, corner);\n        Cartesian3.add(corner, v, corner);\n        Cartesian3.subtract(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project seventh corner\n        Cartesian3.subtract(center, u, corner);\n        Cartesian3.subtract(corner, v, corner);\n        Cartesian3.add(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        // project eighth corner\n        Cartesian3.subtract(center, u, corner);\n        Cartesian3.subtract(corner, v, corner);\n        Cartesian3.subtract(corner, w, corner);\n\n        Cartesian3.subtract(corner, position, toCenter);\n        mag = Cartesian3.dot(direction, toCenter);\n\n        minDist = Math.min(mag, minDist);\n        maxDist = Math.max(mag, maxDist);\n\n        result.start = minDist;\n        result.stop = maxDist;\n        return result;\n    };\n\n    var scratchBoundingSphere = new BoundingSphere();\n\n    /**\n     * Determines whether or not a bounding box is hidden from view by the occluder.\n     *\n     * @param {OrientedBoundingBox} box The bounding box surrounding the occludee object.\n     * @param {Occluder} occluder The occluder.\n     * @returns {Boolean} <code>true</code> if the box is not visible; otherwise <code>false</code>.\n     */\n    OrientedBoundingBox.isOccluded = function(box, occluder) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(box)) {\n            throw new DeveloperError('box is required.');\n        }\n        if (!defined(occluder)) {\n            throw new DeveloperError('occluder is required.');\n        }\n        //>>includeEnd('debug');\n\n        var sphere = BoundingSphere.fromOrientedBoundingBox(box, scratchBoundingSphere);\n\n        return !occluder.isBoundingSphereVisible(sphere);\n    };\n\n    /**\n     * Determines which side of a plane the oriented bounding box is located.\n     *\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n     *                      intersects the plane.\n     */\n    OrientedBoundingBox.prototype.intersectPlane = function(plane) {\n        return OrientedBoundingBox.intersectPlane(this, plane);\n    };\n\n    /**\n     * Computes the estimated distance squared from the closest point on a bounding box to a point.\n     *\n     * @param {Cartesian3} cartesian The point\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\n     *\n     * @example\n     * // Sort bounding boxes from back to front\n     * boxes.sort(function(a, b) {\n     *     return b.distanceSquaredTo(camera.positionWC) - a.distanceSquaredTo(camera.positionWC);\n     * });\n     */\n    OrientedBoundingBox.prototype.distanceSquaredTo = function(cartesian) {\n        return OrientedBoundingBox.distanceSquaredTo(this, cartesian);\n    };\n\n    /**\n     * The distances calculated by the vector from the center of the bounding box to position projected onto direction.\n     * <br>\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\n     * closest and farthest planes from position that intersect the bounding box.\n     *\n     * @param {Cartesian3} position The position to calculate the distance from.\n     * @param {Cartesian3} direction The direction from position.\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\n     * @returns {Interval} The nearest and farthest distances on the bounding box from position in direction.\n     */\n    OrientedBoundingBox.prototype.computePlaneDistances = function(position, direction, result) {\n        return OrientedBoundingBox.computePlaneDistances(this, position, direction, result);\n    };\n\n    /**\n     * Determines whether or not a bounding box is hidden from view by the occluder.\n     *\n     * @param {Occluder} occluder The occluder.\n     * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\n     */\n    OrientedBoundingBox.prototype.isOccluded = function(occluder) {\n        return OrientedBoundingBox.isOccluded(this, occluder);\n    };\n\n    /**\n     * Compares the provided OrientedBoundingBox componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {OrientedBoundingBox} left The first OrientedBoundingBox.\n     * @param {OrientedBoundingBox} right The second OrientedBoundingBox.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    OrientedBoundingBox.equals = function(left, right) {\n        return (left === right) ||\n                ((defined(left)) &&\n                 (defined(right)) &&\n                 Cartesian3.equals(left.center, right.center) &&\n                 Matrix3.equals(left.halfAxes, right.halfAxes));\n    };\n\n    /**\n     * Duplicates this OrientedBoundingBox instance.\n     *\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\n     */\n    OrientedBoundingBox.prototype.clone = function(result) {\n        return OrientedBoundingBox.clone(this, result);\n    };\n\n    /**\n     * Compares this OrientedBoundingBox against the provided OrientedBoundingBox componentwise and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {OrientedBoundingBox} [right] The right hand side OrientedBoundingBox.\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n     */\n    OrientedBoundingBox.prototype.equals = function(right) {\n        return OrientedBoundingBox.equals(this, right);\n    };\nexport default OrientedBoundingBox;\n"],"names":["Cartesian3","defaultValue","Matrix3","Check","defined","DeveloperError","Cartographic","Cartesian2","Plane","CesiumMath","Ellipsoid","Rectangle","EllipsoidTangentPlane","Intersect","Interval","BoundingSphere"],"mappings":"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"}