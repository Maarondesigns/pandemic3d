{"version":3,"file":"CorridorGeometryLibrary-14c42c80.js","sources":["../../../../Source/Core/CorridorGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport CornerType from './CornerType.js';\nimport defined from './defined.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\nimport Quaternion from './Quaternion.js';\n\n    /**\n     * @private\n     */\n    var CorridorGeometryLibrary = {};\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n    var scratch3 = new Cartesian3();\n    var scratch4 = new Cartesian3();\n\n    var scaleArray2 = [new Cartesian3(), new Cartesian3()];\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n    var cartesian4 = new Cartesian3();\n    var cartesian5 = new Cartesian3();\n    var cartesian6 = new Cartesian3();\n    var cartesian7 = new Cartesian3();\n    var cartesian8 = new Cartesian3();\n    var cartesian9 = new Cartesian3();\n    var cartesian10 = new Cartesian3();\n\n    var quaterion = new Quaternion();\n    var rotMatrix = new Matrix3();\n    function computeRoundCorner(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, cornerPoint, scratch1), Cartesian3.subtract(endPoint, cornerPoint, scratch2));\n        var granularity = (cornerType === CornerType.BEVELED) ? 1 : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\n\n        var size = granularity * 3;\n        var array = new Array(size);\n\n        array[size - 3] = endPoint.x;\n        array[size - 2] = endPoint.y;\n        array[size - 1] = endPoint.z;\n\n        var m;\n        if (leftIsOutside) {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(cornerPoint, scratch1), angle / granularity, quaterion), rotMatrix);\n        } else {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion), rotMatrix);\n        }\n\n        var index = 0;\n        startPoint = Cartesian3.clone(startPoint, scratch1);\n        for (var i = 0; i < granularity; i++) {\n            startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n            array[index++] = startPoint.x;\n            array[index++] = startPoint.y;\n            array[index++] = startPoint.z;\n        }\n\n        return array;\n    }\n\n    function addEndCaps(calculatedPositions) {\n        var cornerPoint = cartesian1;\n        var startPoint = cartesian2;\n        var endPoint = cartesian3;\n\n        var leftEdge = calculatedPositions[1];\n        startPoint = Cartesian3.fromArray(calculatedPositions[1], leftEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var firstEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        var length = calculatedPositions.length - 1;\n        var rightEdge = calculatedPositions[length - 1];\n        leftEdge = calculatedPositions[length];\n        startPoint = Cartesian3.fromArray(rightEdge, rightEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var lastEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        return [firstEndCap, lastEndCap];\n    }\n\n    function computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {\n        var cornerPoint = scratch1;\n        if (leftIsOutside) {\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        } else {\n            leftCornerDirection = Cartesian3.negate(leftCornerDirection, leftCornerDirection);\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        }\n        return [cornerPoint.x, cornerPoint.y, cornerPoint.z, lastPoint.x, lastPoint.y, lastPoint.z];\n    }\n\n    function addShiftedPositions(positions, left, scalar, calculatedPositions) {\n        var rightPositions = new Array(positions.length);\n        var leftPositions = new Array(positions.length);\n        var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\n        var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\n        var rightIndex = 0;\n        var leftIndex = positions.length - 1;\n\n        for (var i = 0; i < positions.length; i += 3) {\n            var pos = Cartesian3.fromArray(positions, i, scratch3);\n            var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\n            rightPositions[rightIndex++] = rightPos.x;\n            rightPositions[rightIndex++] = rightPos.y;\n            rightPositions[rightIndex++] = rightPos.z;\n\n            var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\n            leftPositions[leftIndex--] = leftPos.z;\n            leftPositions[leftIndex--] = leftPos.y;\n            leftPositions[leftIndex--] = leftPos.x;\n        }\n        calculatedPositions.push(rightPositions, leftPositions);\n\n        return calculatedPositions;\n    }\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.addAttribute = function(attribute, value, front, back) {\n        var x = value.x;\n        var y = value.y;\n        var z = value.z;\n        if (defined(front)) {\n            attribute[front] = x;\n            attribute[front + 1] = y;\n            attribute[front + 2] = z;\n        }\n        if (defined(back)) {\n            attribute[back] = z;\n            attribute[back - 1] = y;\n            attribute[back - 2] = x;\n        }\n    };\n\n    var scratchForwardProjection = new Cartesian3();\n    var scratchBackwardProjection = new Cartesian3();\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.computePositions = function(params) {\n        var granularity = params.granularity;\n        var positions = params.positions;\n        var ellipsoid = params.ellipsoid;\n        var width = params.width / 2;\n        var cornerType = params.cornerType;\n        var saveAttributes = params.saveAttributes;\n        var normal = cartesian1;\n        var forward = cartesian2;\n        var backward = cartesian3;\n        var left = cartesian4;\n        var cornerDirection = cartesian5;\n        var startPoint = cartesian6;\n        var previousPos = cartesian7;\n        var rightPos = cartesian8;\n        var leftPos = cartesian9;\n        var center = cartesian10;\n        var calculatedPositions = [];\n        var calculatedLefts = (saveAttributes) ? [] : undefined;\n        var calculatedNormals = (saveAttributes) ? [] : undefined;\n        var position = positions[0]; //add first point\n        var nextPosition = positions[1];\n\n        forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n        previousPos = Cartesian3.clone(position, previousPos);\n        position = nextPosition;\n        backward = Cartesian3.negate(forward, backward);\n\n        var subdividedPositions;\n        var corners = [];\n        var i;\n        var length = positions.length;\n        for (i = 1; i < length - 1; i++) { // add middle points and corners\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n            nextPosition = positions[i + 1];\n            forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n            cornerDirection = Cartesian3.normalize(Cartesian3.add(forward, backward, cornerDirection), cornerDirection);\n\n            var forwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(forward, normal), scratchForwardProjection);\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n            Cartesian3.normalize(forwardProjection, forwardProjection);\n\n            var backwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(backward, normal), scratchBackwardProjection);\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n            Cartesian3.normalize(backwardProjection, backwardProjection);\n\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\n\n            if (doCorner) {\n                cornerDirection = Cartesian3.cross(cornerDirection, normal, cornerDirection);\n                cornerDirection = Cartesian3.cross(normal, cornerDirection, cornerDirection);\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n                var scalar = width / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\n                cornerDirection = Cartesian3.multiplyByScalar(cornerDirection, scalar, cornerDirection);\n                if (leftIsOutside) {\n                    rightPos = Cartesian3.add(position, cornerDirection, rightPos);\n                    center = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, center), center);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(leftPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    previousPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            leftPositions : computeRoundCorner(rightPos, startPoint, leftPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            leftPositions : computeMiteredCorner(position, Cartesian3.negate(cornerDirection, cornerDirection), leftPos, leftIsOutside)\n                        });\n                    }\n                } else {\n                    leftPos = Cartesian3.add(position, cornerDirection, leftPos);\n                    center = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, center), center), center);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(rightPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    previousPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, previousPos), previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            rightPositions : computeRoundCorner(leftPos, startPoint, rightPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            rightPositions : computeMiteredCorner(position, cornerDirection, rightPos, leftIsOutside)\n                        });\n                    }\n                }\n                backward = Cartesian3.negate(forward, backward);\n            }\n            position = nextPosition;\n        }\n\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n        scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\n        subdividedPositions = PolylinePipeline.generateArc({\n            positions: scaleArray2,\n            granularity: granularity,\n            ellipsoid: ellipsoid\n        });\n        calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n\n        var endPositions;\n        if (cornerType === CornerType.ROUNDED) {\n            endPositions = addEndCaps(calculatedPositions);\n        }\n\n        return {\n            positions : calculatedPositions,\n            corners : corners,\n            lefts : calculatedLefts,\n            normals : calculatedNormals,\n            endPositions : endPositions\n        };\n    };\nexport default CorridorGeometryLibrary;\n"],"names":["Cartesian3","Quaternion","Matrix3","CornerType","CesiumMath","defined","PolylineVolumeGeometryLibrary","PolylinePipeline"],"mappings":"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"}