{"version":3,"file":"AttributeCompression-6b12d004.js","sources":["../../../../Source/Core/AttributeCompression.js"],"sourcesContent":["import Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\n\n    var RIGHT_SHIFT = 1.0 / 256.0;\n    var LEFT_SHIFT = 256.0;\n\n    /**\n     * Attribute compression and decompression functions.\n     *\n     * @exports AttributeCompression\n     *\n     * @private\n     */\n    var AttributeCompression = {};\n\n    /**\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\n     *\n     * Oct encoding is a compact representation of unit length vectors.\n     * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n     * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\n     *\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\n     * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\n     * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n     * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\n     *\n     * @exception {DeveloperError} vector must be normalized.\n     *\n     * @see AttributeCompression.octDecodeInRange\n     */\n    AttributeCompression.octEncodeInRange = function(vector, rangeMax, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('vector', vector);\n        Check.defined('result', result);\n        var magSquared = Cartesian3.magnitudeSquared(vector);\n        if (Math.abs(magSquared - 1.0) > CesiumMath.EPSILON6) {\n            throw new DeveloperError('vector must be normalized.');\n        }\n        //>>includeEnd('debug');\n\n        result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n        result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n        if (vector.z < 0) {\n            var x = result.x;\n            var y = result.y;\n            result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\n            result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\n        }\n\n        result.x = CesiumMath.toSNorm(result.x, rangeMax);\n        result.y = CesiumMath.toSNorm(result.y, rangeMax);\n\n        return result;\n    };\n\n    /**\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\n     *\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n     * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\n     * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\n     *\n     * @exception {DeveloperError} vector must be normalized.\n     *\n     * @see AttributeCompression.octEncodeInRange\n     * @see AttributeCompression.octDecode\n     */\n    AttributeCompression.octEncode = function(vector, result) {\n        return AttributeCompression.octEncodeInRange(vector, 255, result);\n    };\n\n    var octEncodeScratch = new Cartesian2();\n    var uint8ForceArray = new Uint8Array(1);\n    function forceUint8(value) {\n        uint8ForceArray[0] = value;\n        return uint8ForceArray[0];\n    }\n    /**\n     * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\n     * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\n     * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\n     *\n     * @exception {DeveloperError} vector must be normalized.\n     *\n     * @see AttributeCompression.octEncodeInRange\n     * @see AttributeCompression.octDecodeFromCartesian4\n     */\n    AttributeCompression.octEncodeToCartesian4 = function(vector, result) {\n        AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\n        result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\n        result.y = forceUint8(octEncodeScratch.x);\n        result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\n        result.w = forceUint8(octEncodeScratch.y);\n        return result;\n    };\n\n    /**\n     * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\n     *\n     * @param {Number} x The x component of the oct-encoded unit length vector.\n     * @param {Number} y The y component of the oct-encoded unit length vector.\n     * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n     * @param {Cartesian3} result The decoded and normalized vector\n     * @returns {Cartesian3} The decoded and normalized vector.\n     *\n     * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\n     *\n     * @see AttributeCompression.octEncodeInRange\n     */\n    AttributeCompression.octDecodeInRange = function(x, y, rangeMax, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('result', result);\n        if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\n            throw new DeveloperError('x and y must be unsigned normalized integers between 0 and ' + rangeMax);\n        }\n        //>>includeEnd('debug');\n\n        result.x = CesiumMath.fromSNorm(x, rangeMax);\n        result.y = CesiumMath.fromSNorm(y, rangeMax);\n        result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\n\n        if (result.z < 0.0)\n        {\n            var oldVX = result.x;\n            result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\n            result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\n        }\n\n        return Cartesian3.normalize(result, result);\n    };\n\n    /**\n     * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\n     *\n     * @param {Number} x The x component of the oct-encoded unit length vector.\n     * @param {Number} y The y component of the oct-encoded unit length vector.\n     * @param {Cartesian3} result The decoded and normalized vector.\n     * @returns {Cartesian3} The decoded and normalized vector.\n     *\n     * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\n     *\n     * @see AttributeCompression.octDecodeInRange\n     */\n    AttributeCompression.octDecode = function(x, y, result) {\n        return AttributeCompression.octDecodeInRange(x, y, 255, result);\n    };\n\n    /**\n     * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\n     *\n     * @param {Cartesian4} encoded The oct-encoded unit length vector.\n     * @param {Cartesian3} result The decoded and normalized vector.\n     * @returns {Cartesian3} The decoded and normalized vector.\n     *\n     * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\n     *\n     * @see AttributeCompression.octDecodeInRange\n     * @see AttributeCompression.octEncodeToCartesian4\n     */\n    AttributeCompression.octDecodeFromCartesian4 = function(encoded, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('encoded', encoded);\n        Check.typeOf.object('result', result);\n        //>>includeEnd('debug');\n        var x = encoded.x;\n        var y = encoded.y;\n        var z = encoded.z;\n        var w = encoded.w;\n        //>>includeStart('debug', pragmas.debug);\n        if (x < 0 || x > 255 || y < 0 || y > 255 || z < 0 || z > 255 || w < 0 || w > 255) {\n            throw new DeveloperError('x, y, z, and w must be unsigned normalized integers between 0 and 255');\n        }\n        //>>includeEnd('debug');\n\n        var xOct16 = x * LEFT_SHIFT + y;\n        var yOct16 = z * LEFT_SHIFT + w;\n        return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\n    };\n\n    /**\n     * Packs an oct encoded vector into a single floating-point number.\n     *\n     * @param {Cartesian2} encoded The oct encoded vector.\n     * @returns {Number} The oct encoded vector packed into a single float.\n     *\n     */\n    AttributeCompression.octPackFloat = function(encoded) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('encoded', encoded);\n        //>>includeEnd('debug');\n        return 256.0 * encoded.x + encoded.y;\n    };\n\n    var scratchEncodeCart2 = new Cartesian2();\n\n    /**\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\n     * stores those values in a single float-point number.\n     *\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n     * @returns {Number} The 2 byte oct-encoded unit length vector.\n     *\n     * @exception {DeveloperError} vector must be normalized.\n     */\n    AttributeCompression.octEncodeFloat = function(vector) {\n        AttributeCompression.octEncode(vector, scratchEncodeCart2);\n        return AttributeCompression.octPackFloat(scratchEncodeCart2);\n    };\n\n    /**\n     * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\n     *\n     * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\n     * @param {Cartesian3} result The decoded and normalized vector\n     * @returns {Cartesian3} The decoded and normalized vector.\n     *\n     */\n    AttributeCompression.octDecodeFloat = function(value, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('value', value);\n        //>>includeEnd('debug');\n\n        var temp = value / 256.0;\n        var x = Math.floor(temp);\n        var y = (temp - x) * 256.0;\n\n        return AttributeCompression.octDecode(x, y, result);\n    };\n\n    /**\n     * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\n     * packs those into two floating-point numbers.\n     *\n     * @param {Cartesian3} v1 A normalized vector to be compressed.\n     * @param {Cartesian3} v2 A normalized vector to be compressed.\n     * @param {Cartesian3} v3 A normalized vector to be compressed.\n     * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\n     * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\n     *\n     */\n    AttributeCompression.octPack = function(v1, v2, v3, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('v1', v1);\n        Check.defined('v2', v2);\n        Check.defined('v3', v3);\n        Check.defined('result', result);\n        //>>includeEnd('debug');\n\n        var encoded1 = AttributeCompression.octEncodeFloat(v1);\n        var encoded2 = AttributeCompression.octEncodeFloat(v2);\n\n        var encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\n        result.x = 65536.0 * encoded3.x + encoded1;\n        result.y = 65536.0 * encoded3.y + encoded2;\n        return result;\n    };\n\n    /**\n     * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\n     *\n     * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\n     * @param {Cartesian3} v1 One decoded and normalized vector.\n     * @param {Cartesian3} v2 One decoded and normalized vector.\n     * @param {Cartesian3} v3 One decoded and normalized vector.\n     */\n    AttributeCompression.octUnpack = function(packed, v1, v2, v3) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('packed', packed);\n        Check.defined('v1', v1);\n        Check.defined('v2', v2);\n        Check.defined('v3', v3);\n        //>>includeEnd('debug');\n\n        var temp = packed.x / 65536.0;\n        var x = Math.floor(temp);\n        var encodedFloat1 = (temp - x) * 65536.0;\n\n        temp = packed.y / 65536.0;\n        var y = Math.floor(temp);\n        var encodedFloat2 = (temp - y) * 65536.0;\n\n        AttributeCompression.octDecodeFloat(encodedFloat1, v1);\n        AttributeCompression.octDecodeFloat(encodedFloat2, v2);\n        AttributeCompression.octDecode(x, y, v3);\n    };\n\n    /**\n     * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\n     *\n     * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\n     * @returns {Number} The packed texture coordinates.\n     *\n     */\n    AttributeCompression.compressTextureCoordinates = function(textureCoordinates) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('textureCoordinates', textureCoordinates);\n        //>>includeEnd('debug');\n\n        // Move x and y to the range 0-4095;\n        var x = (textureCoordinates.x * 4095.0) | 0;\n        var y = (textureCoordinates.y * 4095.0) | 0;\n        return 4096.0 * x + y;\n    };\n\n    /**\n     * Decompresses texture coordinates that were packed into a single float.\n     *\n     * @param {Number} compressed The compressed texture coordinates.\n     * @param {Cartesian2} result The decompressed texture coordinates.\n     * @returns {Cartesian2} The modified result parameter.\n     *\n     */\n    AttributeCompression.decompressTextureCoordinates = function(compressed, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('compressed', compressed);\n        Check.defined('result', result);\n        //>>includeEnd('debug');\n\n        var temp = compressed / 4096.0;\n        var xZeroTo4095 = Math.floor(temp);\n        result.x = xZeroTo4095 / 4095.0;\n        result.y = (compressed - xZeroTo4095 * 4096) / 4095;\n        return result;\n    };\n\n    function zigZagDecode(value) {\n        return (value >> 1) ^ (-(value & 1));\n    }\n\n    /**\n     * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\n     *\n     * @param {Uint16Array} uBuffer The buffer view of u values.\n     * @param {Uint16Array} vBuffer The buffer view of v values.\n     * @param {Uint16Array} [heightBuffer] The buffer view of height values.\n     *\n     * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\n     */\n    AttributeCompression.zigZagDeltaDecode = function(uBuffer, vBuffer, heightBuffer) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('uBuffer', uBuffer);\n        Check.defined('vBuffer', vBuffer);\n        Check.typeOf.number.equals('uBuffer.length', 'vBuffer.length', uBuffer.length, vBuffer.length);\n        if (defined(heightBuffer)) {\n            Check.typeOf.number.equals('uBuffer.length', 'heightBuffer.length', uBuffer.length, heightBuffer.length);\n        }\n        //>>includeEnd('debug');\n\n        var count = uBuffer.length;\n\n        var u = 0;\n        var v = 0;\n        var height = 0;\n\n        for (var i = 0; i < count; ++i) {\n            u += zigZagDecode(uBuffer[i]);\n            v += zigZagDecode(vBuffer[i]);\n\n            uBuffer[i] = u;\n            vBuffer[i] = v;\n\n            if (defined(heightBuffer)) {\n                height += zigZagDecode(heightBuffer[i]);\n                heightBuffer[i] = height;\n            }\n        }\n    };\nexport default AttributeCompression;\n"],"names":["Check","Cartesian3","CesiumMath","DeveloperError","Cartesian2","defined"],"mappings":"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"}