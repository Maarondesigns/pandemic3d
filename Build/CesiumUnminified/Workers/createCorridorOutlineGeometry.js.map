{"version":3,"file":"createCorridorOutlineGeometry.js","sources":["../../../../Source/Core/CorridorOutlineGeometry.js","../../../../Source/WorkersES6/createCorridorOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport CorridorGeometryLibrary from './CorridorGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n\n    function scaleToSurface(positions, ellipsoid) {\n        for (var i = 0; i < positions.length; i++) {\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n        }\n        return positions;\n    }\n\n    function combine(computedPositions, cornerType) {\n        var wallIndices = [];\n        var positions = computedPositions.positions;\n        var corners = computedPositions.corners;\n        var endPositions = computedPositions.endPositions;\n        var attributes = new GeometryAttributes();\n        var corner;\n        var leftCount = 0;\n        var rightCount = 0;\n        var i;\n        var indicesLength = 0;\n        var length;\n        for (i = 0; i < positions.length; i += 2) {\n            length = positions[i].length - 3;\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\n            indicesLength += length / 3 * 4;\n            rightCount += positions[i + 1].length - 3;\n        }\n        leftCount += 3; //add back count for end positions\n        rightCount += 3;\n        for (i = 0; i < corners.length; i++) {\n            corner = corners[i];\n            var leftSide = corners[i].leftPositions;\n            if (defined(leftSide)) {\n                length = leftSide.length;\n                leftCount += length;\n                indicesLength += length / 3 * 2;\n            } else {\n                length = corners[i].rightPositions.length;\n                rightCount += length;\n                indicesLength += length / 3 * 2;\n            }\n        }\n\n        var addEndPositions = defined(endPositions);\n        var endPositionLength;\n        if (addEndPositions) {\n            endPositionLength = endPositions[0].length - 3;\n            leftCount += endPositionLength;\n            rightCount += endPositionLength;\n            endPositionLength /= 3;\n            indicesLength += endPositionLength * 4;\n        }\n        var size = leftCount + rightCount;\n        var finalPositions = new Float64Array(size);\n        var front = 0;\n        var back = size - 1;\n        var UL, LL, UR, LR;\n        var rightPos, leftPos;\n        var halfLength = endPositionLength / 2;\n\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\n        var index = 0;\n\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n        if (addEndPositions) { // add rounded end\n            wallIndices.push(front / 3);\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var firstEndPositions = endPositions[0];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n\n                LL = front / 3;\n                LR = LL + 1;\n                UL = (back - 2) / 3;\n                UR = UL - 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        var posIndex = 0;\n        var rightEdge = positions[posIndex++]; //add first two edges\n        var leftEdge = positions[posIndex++];\n        finalPositions.set(rightEdge, front);\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n        length = leftEdge.length - 3;\n        wallIndices.push(front / 3, (back - 2) / 3);\n        for (i = 0; i < length; i += 3) {\n            LL = front / 3;\n            LR = LL + 1;\n            UL = (back - 2) / 3;\n            UR = UL - 1;\n            indices[index++] = UL;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n\n            front += 3;\n            back -= 3;\n        }\n\n        for (i = 0; i < corners.length; i++) {\n            var j;\n            corner = corners[i];\n            var l = corner.leftPositions;\n            var r = corner.rightPositions;\n            var start;\n            var outsidePoint = cartesian3;\n            if (defined(l)) {\n                back -= 3;\n                start = UR;\n                wallIndices.push(LR);\n                for (j = 0; j < l.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n                    indices[index++] = start - j - 1;\n                    indices[index++] = start - j;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\n                    back -= 3;\n                }\n                wallIndices.push(start - Math.floor(l.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push((back - 2) / 3 + 1);\n                }\n                front += 3;\n            } else {\n                front += 3;\n                start = LR;\n                wallIndices.push(UR);\n                for (j = 0; j < r.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n                    indices[index++] = start + j;\n                    indices[index++] = start + j + 1;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\n                    front += 3;\n                }\n                wallIndices.push(start + Math.floor(r.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push(front / 3 - 1);\n                }\n                back -= 3;\n            }\n            rightEdge = positions[posIndex++];\n            leftEdge = positions[posIndex++];\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\n            leftEdge.splice(leftEdge.length - 3, 3);\n            finalPositions.set(rightEdge, front);\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\n            length = leftEdge.length - 3;\n\n            for (j = 0; j < leftEdge.length; j += 3) {\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n                front += 3;\n                back -= 3;\n            }\n            front -= 3;\n            back += 3;\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n\n        if (addEndPositions) { // add rounded end\n            front += 3;\n            back -= 3;\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var lastEndPositions = endPositions[1];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n\n            wallIndices.push(front / 3);\n        } else {\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        return {\n            attributes : attributes,\n            indices : indices,\n            wallIndices : wallIndices\n        };\n    }\n\n    function computePositionsExtruded(params) {\n        var ellipsoid = params.ellipsoid;\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\n        var attr = combine(computedPositions, params.cornerType);\n        var wallIndices = attr.wallIndices;\n        var height = params.height;\n        var extrudedHeight = params.extrudedHeight;\n        var attributes = attr.attributes;\n        var indices = attr.indices;\n        var positions = attributes.position.values;\n        var length = positions.length;\n        var extrudedPositions = new Float64Array(length);\n        extrudedPositions.set(positions);\n        var newPositions = new Float64Array(length * 2);\n\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\n        newPositions.set(positions);\n        newPositions.set(extrudedPositions, length);\n        attributes.position.values = newPositions;\n\n        length /= 3;\n        if (defined(params.offsetAttribute)) {\n            var applyOffset = new Uint8Array(length * 2);\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, length);\n            } else {\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var i;\n        var iLength = indices.length;\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, (iLength + wallIndices.length) * 2);\n        newIndices.set(indices);\n        var index = iLength;\n        for (i = 0; i < iLength; i += 2) { // bottom indices\n            var v0 = indices[i];\n            var v1 = indices[i + 1];\n            newIndices[index++] = v0 + length;\n            newIndices[index++] = v1 + length;\n        }\n\n        var UL, LL;\n        for (i = 0; i < wallIndices.length; i++) { //wall indices\n            UL = wallIndices[i];\n            LL = UL + length;\n            newIndices[index++] = UL;\n            newIndices[index++] = LL;\n        }\n\n        return {\n            attributes : attributes,\n            indices : newIndices\n        };\n    }\n\n    /**\n     * A description of a corridor outline.\n     *\n     * @alias CorridorOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\n     * @param {Number} options.width The distance between the edges of the corridor outline.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see CorridorOutlineGeometry.createGeometry\n     *\n     * @example\n     * var corridor = new Cesium.CorridorOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n     *   width : 100000\n     * });\n     */\n    function CorridorOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('options.positions', positions);\n        Check.typeOf.number('options.width', width);\n        //>>includeEnd('debug');\n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._positions = positions;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._width = width;\n        this._height = Math.max(height, extrudedHeight);\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCorridorOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CorridorOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CorridorOutlineGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.typeOf.object('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        positions : undefined,\n        ellipsoid : scratchEllipsoid,\n        width : undefined,\n        height : undefined,\n        extrudedHeight : undefined,\n        cornerType : undefined,\n        granularity : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\n     */\n    CorridorOutlineGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var width = array[startingIndex++];\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.width = width;\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CorridorOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._width = width;\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CorridorOutlineGeometry.createGeometry = function(corridorOutlineGeometry) {\n        var positions = corridorOutlineGeometry._positions;\n        var width = corridorOutlineGeometry._width;\n        var ellipsoid = corridorOutlineGeometry._ellipsoid;\n\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if ((cleanPositions.length < 2) || (width <= 0)) {\n            return;\n        }\n\n        var height = corridorOutlineGeometry._height;\n        var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var params = {\n            ellipsoid : ellipsoid,\n            positions : cleanPositions,\n            width : width,\n            cornerType : corridorOutlineGeometry._cornerType,\n            granularity : corridorOutlineGeometry._granularity,\n            saveAttributes : false\n        };\n        var attr;\n        if (extrude) {\n            params.height = height;\n            params.extrudedHeight = extrudedHeight;\n            params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\n            attr = computePositionsExtruded(params);\n        } else {\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\n            attr = combine(computedPositions, params.cornerType);\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\n\n            if (defined(corridorOutlineGeometry._offsetAttribute)) {\n                var length = attr.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                attr.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n        var attributes = attr.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\n\n        return new Geometry({\n            attributes : attributes,\n            indices : attr.indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : corridorOutlineGeometry._offsetAttribute\n        });\n    };\nexport default CorridorOutlineGeometry;\n","import CorridorOutlineGeometry from '../Core/CorridorOutlineGeometry.js';\nimport defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\n\n    function createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\n        if (defined(offset)) {\n            corridorOutlineGeometry = CorridorOutlineGeometry.unpack(corridorOutlineGeometry, offset);\n        }\n        corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(corridorOutlineGeometry._ellipsoid);\n        return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\n    }\nexport default createCorridorOutlineGeometry;\n"],"names":["Cartesian3","GeometryAttributes","defined","IndexDatatype","CorridorGeometryLibrary","CornerType","GeometryAttribute","ComponentDatatype","PolygonPipeline","GeometryOffsetAttribute","arrayFill","defaultValue","Check","Ellipsoid","CesiumMath","arrayRemoveDuplicates","BoundingSphere","Geometry","PrimitiveType"],"mappings":"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"}