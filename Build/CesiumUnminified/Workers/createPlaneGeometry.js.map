{"version":3,"file":"createPlaneGeometry.js","sources":["../../../../Source/Core/PlaneGeometry.js","../../../../Source/WorkersES6/createPlaneGeometry.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    /**\n     * Describes geometry representing a plane centered at the origin, with a unit width and length.\n     *\n     * @alias PlaneGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @example\n     * var planeGeometry = new Cesium.PlaneGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n     * });\n     */\n    function PlaneGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        this._vertexFormat = vertexFormat;\n        this._workerName = 'createPlaneGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PlaneGeometry.packedLength = VertexFormat.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PlaneGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PlaneGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n        return array;\n    };\n\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        vertexFormat: scratchVertexFormat\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PlaneGeometry} [result] The object into which to store the result.\n     * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n     */\n    PlaneGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n\n        if (!defined(result)) {\n            return new PlaneGeometry(scratchOptions);\n        }\n\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n        return result;\n    };\n\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\n\n    /**\n     * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PlaneGeometry} planeGeometry A description of the plane.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PlaneGeometry.createGeometry = function(planeGeometry) {\n        var vertexFormat = planeGeometry._vertexFormat;\n\n        var attributes = new GeometryAttributes();\n        var indices;\n        var positions;\n\n        if (vertexFormat.position) {\n            // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n            positions = new Float64Array(4 * 3);\n\n            // +z face\n            positions[0]  = min.x;\n            positions[1]  = min.y;\n            positions[2]  = 0.0;\n            positions[3]  = max.x;\n            positions[4]  = min.y;\n            positions[5]  = 0.0;\n            positions[6]  = max.x;\n            positions[7]  = max.y;\n            positions[8]  = 0.0;\n            positions[9]  = min.x;\n            positions[10] = max.y;\n            positions[11] = 0.0;\n\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n\n            if (vertexFormat.normal) {\n                var normals = new Float32Array(4 * 3);\n\n                // +z face\n                normals[0]  = 0.0;\n                normals[1]  = 0.0;\n                normals[2]  = 1.0;\n                normals[3]  = 0.0;\n                normals[4]  = 0.0;\n                normals[5]  = 1.0;\n                normals[6]  = 0.0;\n                normals[7]  = 0.0;\n                normals[8]  = 1.0;\n                normals[9]  = 0.0;\n                normals[10] = 0.0;\n                normals[11] = 1.0;\n\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.st) {\n                var texCoords = new Float32Array(4 * 2);\n\n                // +z face\n                texCoords[0]  = 0.0;\n                texCoords[1]  = 0.0;\n                texCoords[2]  = 1.0;\n                texCoords[3]  = 0.0;\n                texCoords[4]  = 1.0;\n                texCoords[5]  = 1.0;\n                texCoords[6]  = 0.0;\n                texCoords[7]  = 1.0;\n\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : texCoords\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                var tangents = new Float32Array(4 * 3);\n\n                // +z face\n                tangents[0]  = 1.0;\n                tangents[1]  = 0.0;\n                tangents[2]  = 0.0;\n                tangents[3]  = 1.0;\n                tangents[4]  = 0.0;\n                tangents[5]  = 0.0;\n                tangents[6]  = 1.0;\n                tangents[7]  = 0.0;\n                tangents[8]  = 0.0;\n                tangents[9]  = 1.0;\n                tangents[10] = 0.0;\n                tangents[11] = 0.0;\n\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                var bitangents = new Float32Array(4 * 3);\n\n                // +z face\n                bitangents[0] = 0.0;\n                bitangents[1] = 1.0;\n                bitangents[2] = 0.0;\n                bitangents[3] = 0.0;\n                bitangents[4] = 1.0;\n                bitangents[5] = 0.0;\n                bitangents[6] = 0.0;\n                bitangents[7] = 1.0;\n                bitangents[8] = 0.0;\n                bitangents[9] = 0.0;\n                bitangents[10] = 1.0;\n                bitangents[11] = 0.0;\n\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            // 2 triangles\n            indices = new Uint16Array(2 * 3);\n\n            // +z face\n            indices[0] = 0;\n            indices[1] = 1;\n            indices[2] = 2;\n            indices[3] = 0;\n            indices[4] = 2;\n            indices[5] = 3;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n        });\n    };\nexport default PlaneGeometry;\n","import defined from '../Core/defined.js';\nimport PlaneGeometry from '../Core/PlaneGeometry.js';\n\n    function createPlaneGeometry(planeGeometry, offset) {\n        if (defined(offset)) {\n            planeGeometry = PlaneGeometry.unpack(planeGeometry, offset);\n        }\n        return PlaneGeometry.createGeometry(planeGeometry);\n    }\nexport default createPlaneGeometry;\n"],"names":["defaultValue","VertexFormat","Check","defined","Cartesian3","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}