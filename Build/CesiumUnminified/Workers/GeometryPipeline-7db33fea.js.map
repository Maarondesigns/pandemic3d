{"version":3,"file":"GeometryPipeline-7db33fea.js","sources":["../../../../Source/Core/barycentricCoordinates.js","../../../../Source/Core/Tipsify.js","../../../../Source/Core/GeometryPipeline.js"],"sourcesContent":["import Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport defined from './defined.js';\nimport CesiumMath from './Math.js';\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n\n    /**\n     * Computes the barycentric coordinates for a point with respect to a triangle.\n     *\n     * @exports barycentricCoordinates\n     *\n     * @param {Cartesian2|Cartesian3} point The point to test.\n     * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\n     * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\n     * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n     *\n     * @example\n     * // Returns Cartesian3.UNIT_X\n     * var p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\n     * var b = Cesium.barycentricCoordinates(p,\n     *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\n     *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\n     *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\n     */\n    function barycentricCoordinates(point, p0, p1, p2, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('point', point);\n        Check.defined('p0', p0);\n        Check.defined('p1', p1);\n        Check.defined('p2', p2);\n        //>>includeEnd('debug');\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\n        var v0;\n        var v1;\n        var v2;\n        var dot00;\n        var dot01;\n        var dot02;\n        var dot11;\n        var dot12;\n\n        if(!defined(p0.z)) {\n            if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_X, result);\n            }\n            if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n            }\n            if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n            }\n\n            v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\n            v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\n            v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\n\n            dot00 = Cartesian2.dot(v0, v0);\n            dot01 = Cartesian2.dot(v0, v1);\n            dot02 = Cartesian2.dot(v0, v2);\n            dot11 = Cartesian2.dot(v1, v1);\n            dot12 = Cartesian2.dot(v1, v2);\n        } else {\n            if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_X, result);\n            }\n            if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n            }\n            if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n                return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n            }\n\n            v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\n            v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\n            v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\n\n            dot00 = Cartesian3.dot(v0, v0);\n            dot01 = Cartesian3.dot(v0, v1);\n            dot02 = Cartesian3.dot(v0, v2);\n            dot11 = Cartesian3.dot(v1, v1);\n            dot12 = Cartesian3.dot(v1, v2);\n        }\n\n        result.y = (dot11 * dot02 - dot01 * dot12);\n        result.z = (dot00 * dot12 - dot01 * dot02);\n        var q = dot00 * dot11 - dot01 * dot01;\n\n        // This is done to avoid dividing by infinity causing a NaN\n        if (result.y !== 0) {\n            result.y /= q;\n        }\n        if (result.z !== 0) {\n            result.z /= q;\n        }\n\n        result.x = 1.0 - result.y - result.z;\n        return result;\n    }\nexport default barycentricCoordinates;\n","import defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\n\n    /**\n     * Encapsulates an algorithm to optimize triangles for the post\n     * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\n     * 'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.'\n     * The runtime is linear but several passes are made.\n     *\n     * @exports Tipsify\n     *\n     * @see <a href='http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf'>\n     * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\n     * by Sander, Nehab, and Barczak\n     *\n     * @private\n     */\n    var Tipsify = {};\n\n    /**\n     * Calculates the average cache miss ratio (ACMR) for a given set of indices.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n     *                        in the vertex buffer that define the geometry's triangles.\n     * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n     *                                     If not supplied, this value will be computed.\n     * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n     * @returns {Number} The average cache miss ratio (ACMR).\n     *\n     * @exception {DeveloperError} indices length must be a multiple of three.\n     * @exception {DeveloperError} cacheSize must be greater than two.\n     *\n     * @example\n     * var indices = [0, 1, 2, 3, 4, 5];\n     * var maxIndex = 5;\n     * var cacheSize = 3;\n     * var acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n     */\n    Tipsify.calculateACMR = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var indices = options.indices;\n        var maximumIndex = options.maximumIndex;\n        var cacheSize = defaultValue(options.cacheSize, 24);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(indices)) {\n            throw new DeveloperError('indices is required.');\n        }\n        //>>includeEnd('debug');\n\n        var numIndices = indices.length;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numIndices < 3 || numIndices % 3 !== 0) {\n            throw new DeveloperError('indices length must be a multiple of three.');\n        }\n        if (maximumIndex <= 0) {\n            throw new DeveloperError('maximumIndex must be greater than zero.');\n        }\n        if (cacheSize < 3) {\n            throw new DeveloperError('cacheSize must be greater than two.');\n        }\n        //>>includeEnd('debug');\n\n        // Compute the maximumIndex if not given\n        if (!defined(maximumIndex)) {\n            maximumIndex = 0;\n            var currentIndex = 0;\n            var intoIndices = indices[currentIndex];\n            while (currentIndex < numIndices) {\n                if (intoIndices > maximumIndex) {\n                    maximumIndex = intoIndices;\n                }\n                ++currentIndex;\n                intoIndices = indices[currentIndex];\n            }\n        }\n\n        // Vertex time stamps\n        var vertexTimeStamps = [];\n        for ( var i = 0; i < maximumIndex + 1; i++) {\n            vertexTimeStamps[i] = 0;\n        }\n\n        // Cache processing\n        var s = cacheSize + 1;\n        for ( var j = 0; j < numIndices; ++j) {\n            if ((s - vertexTimeStamps[indices[j]]) > cacheSize) {\n                vertexTimeStamps[indices[j]] = s;\n                ++s;\n            }\n        }\n\n        return (s - cacheSize + 1) / (numIndices / 3);\n    };\n\n    /**\n     * Optimizes triangles for the post-vertex shader cache.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n     *                        in the vertex buffer that define the geometry's triangles.\n     * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n     *                                     If not supplied, this value will be computed.\n     * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n     * @returns {Number[]} A list of the input indices in an optimized order.\n     *\n     * @exception {DeveloperError} indices length must be a multiple of three.\n     * @exception {DeveloperError} cacheSize must be greater than two.\n     *\n     * @example\n     * var indices = [0, 1, 2, 3, 4, 5];\n     * var maxIndex = 5;\n     * var cacheSize = 3;\n     * var reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n     */\n    Tipsify.tipsify = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var indices = options.indices;\n        var maximumIndex = options.maximumIndex;\n        var cacheSize = defaultValue(options.cacheSize, 24);\n\n        var cursor;\n\n        function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\n            while (deadEnd.length >= 1) {\n                // while the stack is not empty\n                var d = deadEnd[deadEnd.length - 1]; // top of the stack\n                deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\n\n                if (vertices[d].numLiveTriangles > 0) {\n                    return d;\n                }\n            }\n\n            while (cursor < maximumIndexPlusOne) {\n                if (vertices[cursor].numLiveTriangles > 0) {\n                    ++cursor;\n                    return cursor - 1;\n                }\n                ++cursor;\n            }\n            return -1;\n        }\n\n        function getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne) {\n            var n = -1;\n            var p;\n            var m = -1;\n            var itOneRing = 0;\n            while (itOneRing < oneRing.length) {\n                var index = oneRing[itOneRing];\n                if (vertices[index].numLiveTriangles) {\n                    p = 0;\n                    if ((s - vertices[index].timeStamp + (2 * vertices[index].numLiveTriangles)) <= cacheSize) {\n                        p = s - vertices[index].timeStamp;\n                    }\n                    if ((p > m) || (m === -1)) {\n                        m = p;\n                        n = index;\n                    }\n                }\n                ++itOneRing;\n            }\n            if (n === -1) {\n                return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\n            }\n            return n;\n        }\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(indices)) {\n            throw new DeveloperError('indices is required.');\n        }\n        //>>includeEnd('debug');\n\n        var numIndices = indices.length;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numIndices < 3 || numIndices % 3 !== 0) {\n            throw new DeveloperError('indices length must be a multiple of three.');\n        }\n        if (maximumIndex <= 0) {\n            throw new DeveloperError('maximumIndex must be greater than zero.');\n        }\n        if (cacheSize < 3) {\n            throw new DeveloperError('cacheSize must be greater than two.');\n        }\n        //>>includeEnd('debug');\n\n        // Determine maximum index\n        var maximumIndexPlusOne = 0;\n        var currentIndex = 0;\n        var intoIndices = indices[currentIndex];\n        var endIndex = numIndices;\n        if (defined(maximumIndex)) {\n            maximumIndexPlusOne = maximumIndex + 1;\n        } else {\n            while (currentIndex < endIndex) {\n                if (intoIndices > maximumIndexPlusOne) {\n                    maximumIndexPlusOne = intoIndices;\n                }\n                ++currentIndex;\n                intoIndices = indices[currentIndex];\n            }\n            if (maximumIndexPlusOne === -1) {\n                return 0;\n            }\n            ++maximumIndexPlusOne;\n        }\n\n        // Vertices\n        var vertices = [];\n        var i;\n        for (i = 0; i < maximumIndexPlusOne; i++) {\n            vertices[i] = {\n                numLiveTriangles : 0,\n                timeStamp : 0,\n                vertexTriangles : []\n            };\n        }\n        currentIndex = 0;\n        var triangle = 0;\n        while (currentIndex < endIndex) {\n            vertices[indices[currentIndex]].vertexTriangles.push(triangle);\n            ++(vertices[indices[currentIndex]]).numLiveTriangles;\n            vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\n            ++(vertices[indices[currentIndex + 1]]).numLiveTriangles;\n            vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\n            ++(vertices[indices[currentIndex + 2]]).numLiveTriangles;\n            ++triangle;\n            currentIndex += 3;\n        }\n\n        // Starting index\n        var f = 0;\n\n        // Time Stamp\n        var s = cacheSize + 1;\n        cursor = 1;\n\n        // Process\n        var oneRing = [];\n        var deadEnd = []; //Stack\n        var vertex;\n        var intoVertices;\n        var currentOutputIndex = 0;\n        var outputIndices = [];\n        var numTriangles = numIndices / 3;\n        var triangleEmitted = [];\n        for (i = 0; i < numTriangles; i++) {\n            triangleEmitted[i] = false;\n        }\n        var index;\n        var limit;\n        while (f !== -1) {\n            oneRing = [];\n            intoVertices = vertices[f];\n            limit = intoVertices.vertexTriangles.length;\n            for ( var k = 0; k < limit; ++k) {\n                triangle = intoVertices.vertexTriangles[k];\n                if (!triangleEmitted[triangle]) {\n                    triangleEmitted[triangle] = true;\n                    currentIndex = triangle + triangle + triangle;\n                    for ( var j = 0; j < 3; ++j) {\n                        // Set this index as a possible next index\n                        index = indices[currentIndex];\n                        oneRing.push(index);\n                        deadEnd.push(index);\n\n                        // Output index\n                        outputIndices[currentOutputIndex] = index;\n                        ++currentOutputIndex;\n\n                        // Cache processing\n                        vertex = vertices[index];\n                        --vertex.numLiveTriangles;\n                        if ((s - vertex.timeStamp) > cacheSize) {\n                            vertex.timeStamp = s;\n                            ++s;\n                        }\n                        ++currentIndex;\n                    }\n                }\n            }\n            f = getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne);\n        }\n\n        return outputIndices;\n    };\nexport default Tipsify;\n","import AttributeCompression from './AttributeCompression.js';\nimport barycentricCoordinates from './barycentricCoordinates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport Cartographic from './Cartographic.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport EncodedCartesian3 from './EncodedCartesian3.js';\nimport GeographicProjection from './GeographicProjection.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryType from './GeometryType.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport Intersect from './Intersect.js';\nimport IntersectionTests from './IntersectionTests.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport Matrix4 from './Matrix4.js';\nimport Plane from './Plane.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Tipsify from './Tipsify.js';\n\n    /**\n     * Content pipeline functions for geometries.\n     *\n     * @exports GeometryPipeline\n     *\n     * @see Geometry\n     */\n    var GeometryPipeline = {};\n\n    function addTriangle(lines, index, i0, i1, i2) {\n        lines[index++] = i0;\n        lines[index++] = i1;\n\n        lines[index++] = i1;\n        lines[index++] = i2;\n\n        lines[index++] = i2;\n        lines[index] = i0;\n    }\n\n    function trianglesToLines(triangles) {\n        var count = triangles.length;\n        var size = (count / 3) * 6;\n        var lines = IndexDatatype.createTypedArray(count, size);\n\n        var index = 0;\n        for ( var i = 0; i < count; i += 3, index += 6) {\n            addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);\n        }\n\n        return lines;\n    }\n\n    function triangleStripToLines(triangles) {\n        var count = triangles.length;\n        if (count >= 3) {\n            var size = (count - 2) * 6;\n            var lines = IndexDatatype.createTypedArray(count, size);\n\n            addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);\n            var index = 6;\n\n            for ( var i = 3; i < count; ++i, index += 6) {\n                addTriangle(lines, index, triangles[i - 1], triangles[i], triangles[i - 2]);\n            }\n\n            return lines;\n        }\n\n        return new Uint16Array();\n    }\n\n    function triangleFanToLines(triangles) {\n        if (triangles.length > 0) {\n            var count = triangles.length - 1;\n            var size = (count - 1) * 6;\n            var lines = IndexDatatype.createTypedArray(count, size);\n\n            var base = triangles[0];\n            var index = 0;\n            for ( var i = 1; i < count; ++i, index += 6) {\n                addTriangle(lines, index, base, triangles[i], triangles[i + 1]);\n            }\n\n            return lines;\n        }\n\n        return new Uint16Array();\n    }\n\n    /**\n     * Converts a geometry's triangle indices to line indices.  If the geometry has an <code>indices</code>\n     * and its <code>primitiveType</code> is <code>TRIANGLES</code>, <code>TRIANGLE_STRIP</code>,\n     * <code>TRIANGLE_FAN</code>, it is converted to <code>LINES</code>; otherwise, the geometry is not changed.\n     * <p>\n     * This is commonly used to create a wireframe geometry for visual debugging.\n     * </p>\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its triangle indices converted to lines.\n     *\n     * @exception {DeveloperError} geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.toWireframe(geometry);\n     */\n    GeometryPipeline.toWireframe = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = geometry.indices;\n        if (defined(indices)) {\n            switch (geometry.primitiveType) {\n                case PrimitiveType.TRIANGLES:\n                    geometry.indices = trianglesToLines(indices);\n                    break;\n                case PrimitiveType.TRIANGLE_STRIP:\n                    geometry.indices = triangleStripToLines(indices);\n                    break;\n                case PrimitiveType.TRIANGLE_FAN:\n                    geometry.indices = triangleFanToLines(indices);\n                    break;\n                //>>includeStart('debug', pragmas.debug);\n                default:\n                    throw new DeveloperError('geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.');\n                //>>includeEnd('debug');\n            }\n\n            geometry.primitiveType = PrimitiveType.LINES;\n        }\n\n        return geometry;\n    };\n\n    /**\n     * Creates a new {@link Geometry} with <code>LINES</code> representing the provided\n     * attribute (<code>attributeName</code>) for the provided geometry.  This is used to\n     * visualize vector attributes like normals, tangents, and bitangents.\n     *\n     * @param {Geometry} geometry The <code>Geometry</code> instance with the attribute.\n     * @param {String} [attributeName='normal'] The name of the attribute.\n     * @param {Number} [length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\n     * @returns {Geometry} A new <code>Geometry</code> instance with line segments for the vector.\n     *\n     * @exception {DeveloperError} geometry.attributes must have an attribute with the same name as the attributeName parameter.\n     *\n     * @example\n     * var geometry = Cesium.GeometryPipeline.createLineSegmentsForVectors(instance.geometry, 'bitangent', 100000.0);\n     */\n    GeometryPipeline.createLineSegmentsForVectors = function(geometry, attributeName, length) {\n        attributeName = defaultValue(attributeName, 'normal');\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        if (!defined(geometry.attributes.position)) {\n            throw new DeveloperError('geometry.attributes.position is required.');\n        }\n        if (!defined(geometry.attributes[attributeName])) {\n            throw new DeveloperError('geometry.attributes must have an attribute with the same name as the attributeName parameter, ' + attributeName + '.');\n        }\n        //>>includeEnd('debug');\n\n        length = defaultValue(length, 10000.0);\n\n        var positions = geometry.attributes.position.values;\n        var vectors = geometry.attributes[attributeName].values;\n        var positionsLength = positions.length;\n\n        var newPositions = new Float64Array(2 * positionsLength);\n\n        var j = 0;\n        for (var i = 0; i < positionsLength; i += 3) {\n            newPositions[j++] = positions[i];\n            newPositions[j++] = positions[i + 1];\n            newPositions[j++] = positions[i + 2];\n\n            newPositions[j++] = positions[i] + (vectors[i] * length);\n            newPositions[j++] = positions[i + 1] + (vectors[i + 1] * length);\n            newPositions[j++] = positions[i + 2] + (vectors[i + 2] * length);\n        }\n\n        var newBoundingSphere;\n        var bs = geometry.boundingSphere;\n        if (defined(bs)) {\n            newBoundingSphere = new BoundingSphere(bs.center, bs.radius + length);\n        }\n\n        return new Geometry({\n            attributes : {\n                position : new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.DOUBLE,\n                    componentsPerAttribute : 3,\n                    values : newPositions\n                })\n            },\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : newBoundingSphere\n        });\n    };\n\n    /**\n     * Creates an object that maps attribute names to unique locations (indices)\n     * for matching vertex attributes and shader programs.\n     *\n     * @param {Geometry} geometry The geometry, which is not modified, to create the object for.\n     * @returns {Object} An object with attribute name / index pairs.\n     *\n     * @example\n     * var attributeLocations = Cesium.GeometryPipeline.createAttributeLocations(geometry);\n     * // Example output\n     * // {\n     * //   'position' : 0,\n     * //   'normal' : 1\n     * // }\n     */\n    GeometryPipeline.createAttributeLocations = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug')\n\n        // There can be a WebGL performance hit when attribute 0 is disabled, so\n        // assign attribute locations to well-known attributes.\n        var semantics = [\n            'position',\n            'positionHigh',\n            'positionLow',\n\n            // From VertexFormat.position - after 2D projection and high-precision encoding\n            'position3DHigh',\n            'position3DLow',\n            'position2DHigh',\n            'position2DLow',\n\n            // From Primitive\n            'pickColor',\n\n            // From VertexFormat\n            'normal',\n            'st',\n            'tangent',\n            'bitangent',\n\n            // For shadow volumes\n            'extrudeDirection',\n\n            // From compressing texture coordinates and normals\n            'compressedAttributes'\n        ];\n\n        var attributes = geometry.attributes;\n        var indices = {};\n        var j = 0;\n        var i;\n        var len = semantics.length;\n\n        // Attribute locations for well-known attributes\n        for (i = 0; i < len; ++i) {\n            var semantic = semantics[i];\n\n            if (defined(attributes[semantic])) {\n                indices[semantic] = j++;\n            }\n        }\n\n        // Locations for custom attributes\n        for (var name in attributes) {\n            if (attributes.hasOwnProperty(name) && (!defined(indices[name]))) {\n                indices[name] = j++;\n            }\n        }\n\n        return indices;\n    };\n\n    /**\n     * Reorders a geometry's attributes and <code>indices</code> to achieve better performance from the GPU's pre-vertex-shader cache.\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its attributes and indices reordered for the GPU's pre-vertex-shader cache.\n     *\n     * @exception {DeveloperError} Each attribute array in geometry.attributes must have the same number of attributes.\n     *\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.reorderForPreVertexCache(geometry);\n     *\n     * @see GeometryPipeline.reorderForPostVertexCache\n     */\n    GeometryPipeline.reorderForPreVertexCache = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug');\n\n        var numVertices = Geometry.computeNumberOfVertices(geometry);\n\n        var indices = geometry.indices;\n        if (defined(indices)) {\n            var indexCrossReferenceOldToNew = new Int32Array(numVertices);\n            for ( var i = 0; i < numVertices; i++) {\n                indexCrossReferenceOldToNew[i] = -1;\n            }\n\n            // Construct cross reference and reorder indices\n            var indicesIn = indices;\n            var numIndices = indicesIn.length;\n            var indicesOut = IndexDatatype.createTypedArray(numVertices, numIndices);\n\n            var intoIndicesIn = 0;\n            var intoIndicesOut = 0;\n            var nextIndex = 0;\n            var tempIndex;\n            while (intoIndicesIn < numIndices) {\n                tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];\n                if (tempIndex !== -1) {\n                    indicesOut[intoIndicesOut] = tempIndex;\n                } else {\n                    tempIndex = indicesIn[intoIndicesIn];\n                    indexCrossReferenceOldToNew[tempIndex] = nextIndex;\n\n                    indicesOut[intoIndicesOut] = nextIndex;\n                    ++nextIndex;\n                }\n                ++intoIndicesIn;\n                ++intoIndicesOut;\n            }\n            geometry.indices = indicesOut;\n\n            // Reorder attributes\n            var attributes = geometry.attributes;\n            for ( var property in attributes) {\n                if (attributes.hasOwnProperty(property) &&\n                        defined(attributes[property]) &&\n                        defined(attributes[property].values)) {\n\n                    var attribute = attributes[property];\n                    var elementsIn = attribute.values;\n                    var intoElementsIn = 0;\n                    var numComponents = attribute.componentsPerAttribute;\n                    var elementsOut = ComponentDatatype.createTypedArray(attribute.componentDatatype, nextIndex * numComponents);\n                    while (intoElementsIn < numVertices) {\n                        var temp = indexCrossReferenceOldToNew[intoElementsIn];\n                        if (temp !== -1) {\n                            for (var j = 0; j < numComponents; j++) {\n                                elementsOut[numComponents * temp + j] = elementsIn[numComponents * intoElementsIn + j];\n                            }\n                        }\n                        ++intoElementsIn;\n                    }\n                    attribute.values = elementsOut;\n                }\n            }\n        }\n\n        return geometry;\n    };\n\n    /**\n     * Reorders a geometry's <code>indices</code> to achieve better performance from the GPU's\n     * post vertex-shader cache by using the Tipsify algorithm.  If the geometry <code>primitiveType</code>\n     * is not <code>TRIANGLES</code> or the geometry does not have an <code>indices</code>, this function has no effect.\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @param {Number} [cacheCapacity=24] The number of vertices that can be held in the GPU's vertex cache.\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its indices reordered for the post-vertex-shader cache.\n     *\n     * @exception {DeveloperError} cacheCapacity must be greater than two.\n     *\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.reorderForPostVertexCache(geometry);\n     *\n     * @see GeometryPipeline.reorderForPreVertexCache\n     * @see {@link http://gfx.cs.princ0eton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf|Fast Triangle Reordering for Vertex Locality and Reduced Overdraw}\n     * by Sander, Nehab, and Barczak\n     */\n    GeometryPipeline.reorderForPostVertexCache = function(geometry, cacheCapacity) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = geometry.indices;\n        if ((geometry.primitiveType === PrimitiveType.TRIANGLES) && (defined(indices))) {\n            var numIndices = indices.length;\n            var maximumIndex = 0;\n            for ( var j = 0; j < numIndices; j++) {\n                if (indices[j] > maximumIndex) {\n                    maximumIndex = indices[j];\n                }\n            }\n            geometry.indices = Tipsify.tipsify({\n                indices : indices,\n                maximumIndex : maximumIndex,\n                cacheSize : cacheCapacity\n            });\n        }\n\n        return geometry;\n    };\n\n    function copyAttributesDescriptions(attributes) {\n        var newAttributes = {};\n\n        for ( var attribute in attributes) {\n            if (attributes.hasOwnProperty(attribute) &&\n                    defined(attributes[attribute]) &&\n                    defined(attributes[attribute].values)) {\n\n                var attr = attributes[attribute];\n                newAttributes[attribute] = new GeometryAttribute({\n                    componentDatatype : attr.componentDatatype,\n                    componentsPerAttribute : attr.componentsPerAttribute,\n                    normalize : attr.normalize,\n                    values : []\n                });\n            }\n        }\n\n        return newAttributes;\n    }\n\n    function copyVertex(destinationAttributes, sourceAttributes, index) {\n        for ( var attribute in sourceAttributes) {\n            if (sourceAttributes.hasOwnProperty(attribute) &&\n                    defined(sourceAttributes[attribute]) &&\n                    defined(sourceAttributes[attribute].values)) {\n\n                var attr = sourceAttributes[attribute];\n\n                for ( var k = 0; k < attr.componentsPerAttribute; ++k) {\n                    destinationAttributes[attribute].values.push(attr.values[(index * attr.componentsPerAttribute) + k]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Splits a geometry into multiple geometries, if necessary, to ensure that indices in the\n     * <code>indices</code> fit into unsigned shorts.  This is used to meet the WebGL requirements\n     * when unsigned int indices are not supported.\n     * <p>\n     * If the geometry does not have any <code>indices</code>, this function has no effect.\n     * </p>\n     *\n     * @param {Geometry} geometry The geometry to be split into multiple geometries.\n     * @returns {Geometry[]} An array of geometries, each with indices that fit into unsigned shorts.\n     *\n     * @exception {DeveloperError} geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS\n     * @exception {DeveloperError} All geometry attribute lists must have the same number of attributes.\n     *\n     * @example\n     * var geometries = Cesium.GeometryPipeline.fitToUnsignedShortIndices(geometry);\n     */\n    GeometryPipeline.fitToUnsignedShortIndices = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        if ((defined(geometry.indices)) &&\n            ((geometry.primitiveType !== PrimitiveType.TRIANGLES) &&\n             (geometry.primitiveType !== PrimitiveType.LINES) &&\n             (geometry.primitiveType !== PrimitiveType.POINTS))) {\n            throw new DeveloperError('geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS.');\n        }\n        //>>includeEnd('debug');\n\n        var geometries = [];\n\n        // If there's an index list and more than 64K attributes, it is possible that\n        // some indices are outside the range of unsigned short [0, 64K - 1]\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n        if (defined(geometry.indices) && (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES)) {\n            var oldToNewIndex = [];\n            var newIndices = [];\n            var currentIndex = 0;\n            var newAttributes = copyAttributesDescriptions(geometry.attributes);\n\n            var originalIndices = geometry.indices;\n            var numberOfIndices = originalIndices.length;\n\n            var indicesPerPrimitive;\n\n            if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\n                indicesPerPrimitive = 3;\n            } else if (geometry.primitiveType === PrimitiveType.LINES) {\n                indicesPerPrimitive = 2;\n            } else if (geometry.primitiveType === PrimitiveType.POINTS) {\n                indicesPerPrimitive = 1;\n            }\n\n            for ( var j = 0; j < numberOfIndices; j += indicesPerPrimitive) {\n                for (var k = 0; k < indicesPerPrimitive; ++k) {\n                    var x = originalIndices[j + k];\n                    var i = oldToNewIndex[x];\n                    if (!defined(i)) {\n                        i = currentIndex++;\n                        oldToNewIndex[x] = i;\n                        copyVertex(newAttributes, geometry.attributes, x);\n                    }\n                    newIndices.push(i);\n                }\n\n                if (currentIndex + indicesPerPrimitive >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\n                    geometries.push(new Geometry({\n                        attributes : newAttributes,\n                        indices : newIndices,\n                        primitiveType : geometry.primitiveType,\n                        boundingSphere : geometry.boundingSphere,\n                        boundingSphereCV : geometry.boundingSphereCV\n                    }));\n\n                    // Reset for next vertex-array\n                    oldToNewIndex = [];\n                    newIndices = [];\n                    currentIndex = 0;\n                    newAttributes = copyAttributesDescriptions(geometry.attributes);\n                }\n            }\n\n            if (newIndices.length !== 0) {\n                geometries.push(new Geometry({\n                    attributes : newAttributes,\n                    indices : newIndices,\n                    primitiveType : geometry.primitiveType,\n                    boundingSphere : geometry.boundingSphere,\n                    boundingSphereCV : geometry.boundingSphereCV\n                }));\n            }\n        } else {\n            // No need to split into multiple geometries\n            geometries.push(geometry);\n        }\n\n        return geometries;\n    };\n\n    var scratchProjectTo2DCartesian3 = new Cartesian3();\n    var scratchProjectTo2DCartographic = new Cartographic();\n\n    /**\n     * Projects a geometry's 3D <code>position</code> attribute to 2D, replacing the <code>position</code>\n     * attribute with separate <code>position3D</code> and <code>position2D</code> attributes.\n     * <p>\n     * If the geometry does not have a <code>position</code>, this function has no effect.\n     * </p>\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @param {String} attributeName The name of the attribute.\n     * @param {String} attributeName3D The name of the attribute in 3D.\n     * @param {String} attributeName2D The name of the attribute in 2D.\n     * @param {Object} [projection=new GeographicProjection()] The projection to use.\n     * @returns {Geometry} The modified <code>geometry</code> argument with <code>position3D</code> and <code>position2D</code> attributes.\n     *\n     * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\n     * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\n     * @exception {DeveloperError} Could not project a point to 2D.\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.projectTo2D(geometry, 'position', 'position3D', 'position2D');\n     */\n    GeometryPipeline.projectTo2D = function(geometry, attributeName, attributeName3D, attributeName2D, projection) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        if (!defined(attributeName)) {\n            throw new DeveloperError('attributeName is required.');\n        }\n        if (!defined(attributeName3D)) {\n            throw new DeveloperError('attributeName3D is required.');\n        }\n        if (!defined(attributeName2D)) {\n            throw new DeveloperError('attributeName2D is required.');\n        }\n        if (!defined(geometry.attributes[attributeName])) {\n            throw new DeveloperError('geometry must have attribute matching the attributeName argument: ' + attributeName + '.');\n        }\n        if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype.DOUBLE) {\n            throw new DeveloperError('The attribute componentDatatype must be ComponentDatatype.DOUBLE.');\n        }\n        //>>includeEnd('debug');\n\n        var attribute = geometry.attributes[attributeName];\n        projection = (defined(projection)) ? projection : new GeographicProjection();\n        var ellipsoid = projection.ellipsoid;\n\n        // Project original values to 2D.\n        var values3D = attribute.values;\n        var projectedValues = new Float64Array(values3D.length);\n        var index = 0;\n\n        for ( var i = 0; i < values3D.length; i += 3) {\n            var value = Cartesian3.fromArray(values3D, i, scratchProjectTo2DCartesian3);\n\n            var lonLat = ellipsoid.cartesianToCartographic(value, scratchProjectTo2DCartographic);\n            //>>includeStart('debug', pragmas.debug);\n            if (!defined(lonLat)) {\n                throw new DeveloperError('Could not project point (' + value.x + ', ' + value.y + ', ' + value.z + ') to 2D.');\n            }\n            //>>includeEnd('debug');\n\n            var projectedLonLat = projection.project(lonLat, scratchProjectTo2DCartesian3);\n\n            projectedValues[index++] = projectedLonLat.x;\n            projectedValues[index++] = projectedLonLat.y;\n            projectedValues[index++] = projectedLonLat.z;\n        }\n\n        // Rename original cartesians to WGS84 cartesians.\n        geometry.attributes[attributeName3D] = attribute;\n\n        // Replace original cartesians with 2D projected cartesians\n        geometry.attributes[attributeName2D] = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : projectedValues\n        });\n        delete geometry.attributes[attributeName];\n\n        return geometry;\n    };\n\n    var encodedResult = {\n        high : 0.0,\n        low : 0.0\n    };\n\n    /**\n     * Encodes floating-point geometry attribute values as two separate attributes to improve\n     * rendering precision.\n     * <p>\n     * This is commonly used to create high-precision position vertex attributes.\n     * </p>\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @param {String} attributeName The name of the attribute.\n     * @param {String} attributeHighName The name of the attribute for the encoded high bits.\n     * @param {String} attributeLowName The name of the attribute for the encoded low bits.\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its encoded attribute.\n     *\n     * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\n     * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.encodeAttribute(geometry, 'position3D', 'position3DHigh', 'position3DLow');\n     */\n    GeometryPipeline.encodeAttribute = function(geometry, attributeName, attributeHighName, attributeLowName) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        if (!defined(attributeName)) {\n            throw new DeveloperError('attributeName is required.');\n        }\n        if (!defined(attributeHighName)) {\n            throw new DeveloperError('attributeHighName is required.');\n        }\n        if (!defined(attributeLowName)) {\n            throw new DeveloperError('attributeLowName is required.');\n        }\n        if (!defined(geometry.attributes[attributeName])) {\n            throw new DeveloperError('geometry must have attribute matching the attributeName argument: ' + attributeName + '.');\n        }\n        if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype.DOUBLE) {\n            throw new DeveloperError('The attribute componentDatatype must be ComponentDatatype.DOUBLE.');\n        }\n        //>>includeEnd('debug');\n\n        var attribute = geometry.attributes[attributeName];\n        var values = attribute.values;\n        var length = values.length;\n        var highValues = new Float32Array(length);\n        var lowValues = new Float32Array(length);\n\n        for (var i = 0; i < length; ++i) {\n            EncodedCartesian3.encode(values[i], encodedResult);\n            highValues[i] = encodedResult.high;\n            lowValues[i] = encodedResult.low;\n        }\n\n        var componentsPerAttribute = attribute.componentsPerAttribute;\n\n        geometry.attributes[attributeHighName] = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : componentsPerAttribute,\n            values : highValues\n        });\n        geometry.attributes[attributeLowName] = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : componentsPerAttribute,\n            values : lowValues\n        });\n        delete geometry.attributes[attributeName];\n\n        return geometry;\n    };\n\n    var scratchCartesian3 = new Cartesian3();\n\n    function transformPoint(matrix, attribute) {\n        if (defined(attribute)) {\n            var values = attribute.values;\n            var length = values.length;\n            for (var i = 0; i < length; i += 3) {\n                Cartesian3.unpack(values, i, scratchCartesian3);\n                Matrix4.multiplyByPoint(matrix, scratchCartesian3, scratchCartesian3);\n                Cartesian3.pack(scratchCartesian3, values, i);\n            }\n        }\n    }\n\n    function transformVector(matrix, attribute) {\n        if (defined(attribute)) {\n            var values = attribute.values;\n            var length = values.length;\n            for (var i = 0; i < length; i += 3) {\n                Cartesian3.unpack(values, i, scratchCartesian3);\n                Matrix3.multiplyByVector(matrix, scratchCartesian3, scratchCartesian3);\n                scratchCartesian3 = Cartesian3.normalize(scratchCartesian3, scratchCartesian3);\n                Cartesian3.pack(scratchCartesian3, values, i);\n            }\n        }\n    }\n\n    var inverseTranspose = new Matrix4();\n    var normalMatrix = new Matrix3();\n\n    /**\n     * Transforms a geometry instance to world coordinates.  This changes\n     * the instance's <code>modelMatrix</code> to {@link Matrix4.IDENTITY} and transforms the\n     * following attributes if they are present: <code>position</code>, <code>normal</code>,\n     * <code>tangent</code>, and <code>bitangent</code>.\n     *\n     * @param {GeometryInstance} instance The geometry instance to modify.\n     * @returns {GeometryInstance} The modified <code>instance</code> argument, with its attributes transforms to world coordinates.\n     *\n     * @example\n     * Cesium.GeometryPipeline.transformToWorldCoordinates(instance);\n     */\n    GeometryPipeline.transformToWorldCoordinates = function(instance) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(instance)) {\n            throw new DeveloperError('instance is required.');\n        }\n        //>>includeEnd('debug');\n\n        var modelMatrix = instance.modelMatrix;\n\n        if (Matrix4.equals(modelMatrix, Matrix4.IDENTITY)) {\n            // Already in world coordinates\n            return instance;\n        }\n\n        var attributes = instance.geometry.attributes;\n\n        // Transform attributes in known vertex formats\n        transformPoint(modelMatrix, attributes.position);\n        transformPoint(modelMatrix, attributes.prevPosition);\n        transformPoint(modelMatrix, attributes.nextPosition);\n\n        if ((defined(attributes.normal)) ||\n            (defined(attributes.tangent)) ||\n            (defined(attributes.bitangent))) {\n\n            Matrix4.inverse(modelMatrix, inverseTranspose);\n            Matrix4.transpose(inverseTranspose, inverseTranspose);\n            Matrix4.getMatrix3(inverseTranspose, normalMatrix);\n\n            transformVector(normalMatrix, attributes.normal);\n            transformVector(normalMatrix, attributes.tangent);\n            transformVector(normalMatrix, attributes.bitangent);\n        }\n\n        var boundingSphere = instance.geometry.boundingSphere;\n        if (defined(boundingSphere)) {\n            instance.geometry.boundingSphere = BoundingSphere.transform(boundingSphere, modelMatrix, boundingSphere);\n        }\n\n        instance.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n\n        return instance;\n    };\n\n    function findAttributesInAllGeometries(instances, propertyName) {\n        var length = instances.length;\n\n        var attributesInAllGeometries = {};\n\n        var attributes0 = instances[0][propertyName].attributes;\n        var name;\n\n        for (name in attributes0) {\n            if (attributes0.hasOwnProperty(name) &&\n                    defined(attributes0[name]) &&\n                    defined(attributes0[name].values)) {\n\n                var attribute = attributes0[name];\n                var numberOfComponents = attribute.values.length;\n                var inAllGeometries = true;\n\n                // Does this same attribute exist in all geometries?\n                for (var i = 1; i < length; ++i) {\n                    var otherAttribute = instances[i][propertyName].attributes[name];\n\n                    if ((!defined(otherAttribute)) ||\n                        (attribute.componentDatatype !== otherAttribute.componentDatatype) ||\n                        (attribute.componentsPerAttribute !== otherAttribute.componentsPerAttribute) ||\n                        (attribute.normalize !== otherAttribute.normalize)) {\n\n                        inAllGeometries = false;\n                        break;\n                    }\n\n                    numberOfComponents += otherAttribute.values.length;\n                }\n\n                if (inAllGeometries) {\n                    attributesInAllGeometries[name] = new GeometryAttribute({\n                        componentDatatype : attribute.componentDatatype,\n                        componentsPerAttribute : attribute.componentsPerAttribute,\n                        normalize : attribute.normalize,\n                        values : ComponentDatatype.createTypedArray(attribute.componentDatatype, numberOfComponents)\n                    });\n                }\n            }\n        }\n\n        return attributesInAllGeometries;\n    }\n\n    var tempScratch = new Cartesian3();\n\n    function combineGeometries(instances, propertyName) {\n        var length = instances.length;\n\n        var name;\n        var i;\n        var j;\n        var k;\n\n        var m = instances[0].modelMatrix;\n        var haveIndices = (defined(instances[0][propertyName].indices));\n        var primitiveType = instances[0][propertyName].primitiveType;\n\n        //>>includeStart('debug', pragmas.debug);\n        for (i = 1; i < length; ++i) {\n            if (!Matrix4.equals(instances[i].modelMatrix, m)) {\n                throw new DeveloperError('All instances must have the same modelMatrix.');\n            }\n            if ((defined(instances[i][propertyName].indices)) !== haveIndices) {\n                throw new DeveloperError('All instance geometries must have an indices or not have one.');\n            }\n            if (instances[i][propertyName].primitiveType !== primitiveType) {\n                throw new DeveloperError('All instance geometries must have the same primitiveType.');\n            }\n        }\n        //>>includeEnd('debug');\n\n        // Find subset of attributes in all geometries\n        var attributes = findAttributesInAllGeometries(instances, propertyName);\n        var values;\n        var sourceValues;\n        var sourceValuesLength;\n\n        // Combine attributes from each geometry into a single typed array\n        for (name in attributes) {\n            if (attributes.hasOwnProperty(name)) {\n                values = attributes[name].values;\n\n                k = 0;\n                for (i = 0; i < length; ++i) {\n                    sourceValues = instances[i][propertyName].attributes[name].values;\n                    sourceValuesLength = sourceValues.length;\n\n                    for (j = 0; j < sourceValuesLength; ++j) {\n                        values[k++] = sourceValues[j];\n                    }\n                }\n            }\n        }\n\n        // Combine index lists\n        var indices;\n\n        if (haveIndices) {\n            var numberOfIndices = 0;\n            for (i = 0; i < length; ++i) {\n                numberOfIndices += instances[i][propertyName].indices.length;\n            }\n\n            var numberOfVertices = Geometry.computeNumberOfVertices(new Geometry({\n                attributes : attributes,\n                primitiveType : PrimitiveType.POINTS\n            }));\n            var destIndices = IndexDatatype.createTypedArray(numberOfVertices, numberOfIndices);\n\n            var destOffset = 0;\n            var offset = 0;\n\n            for (i = 0; i < length; ++i) {\n                var sourceIndices = instances[i][propertyName].indices;\n                var sourceIndicesLen = sourceIndices.length;\n\n                for (k = 0; k < sourceIndicesLen; ++k) {\n                    destIndices[destOffset++] = offset + sourceIndices[k];\n                }\n\n                offset += Geometry.computeNumberOfVertices(instances[i][propertyName]);\n            }\n\n            indices = destIndices;\n        }\n\n        // Create bounding sphere that includes all instances\n        var center = new Cartesian3();\n        var radius = 0.0;\n        var bs;\n\n        for (i = 0; i < length; ++i) {\n            bs = instances[i][propertyName].boundingSphere;\n            if (!defined(bs)) {\n                // If any geometries have an undefined bounding sphere, then so does the combined geometry\n                center = undefined;\n                break;\n            }\n\n            Cartesian3.add(bs.center, center, center);\n        }\n\n        if (defined(center)) {\n            Cartesian3.divideByScalar(center, length, center);\n\n            for (i = 0; i < length; ++i) {\n                bs = instances[i][propertyName].boundingSphere;\n                var tempRadius = Cartesian3.magnitude(Cartesian3.subtract(bs.center, center, tempScratch)) + bs.radius;\n\n                if (tempRadius > radius) {\n                    radius = tempRadius;\n                }\n            }\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : primitiveType,\n            boundingSphere : (defined(center)) ? new BoundingSphere(center, radius) : undefined\n        });\n    }\n\n    /**\n     * Combines geometry from several {@link GeometryInstance} objects into one geometry.\n     * This concatenates the attributes, concatenates and adjusts the indices, and creates\n     * a bounding sphere encompassing all instances.\n     * <p>\n     * If the instances do not have the same attributes, a subset of attributes common\n     * to all instances is used, and the others are ignored.\n     * </p>\n     * <p>\n     * This is used by {@link Primitive} to efficiently render a large amount of static data.\n     * </p>\n     *\n     * @private\n     *\n     * @param {GeometryInstance[]} [instances] The array of {@link GeometryInstance} objects whose geometry will be combined.\n     * @returns {Geometry} A single geometry created from the provided geometry instances.\n     *\n     * @exception {DeveloperError} All instances must have the same modelMatrix.\n     * @exception {DeveloperError} All instance geometries must have an indices or not have one.\n     * @exception {DeveloperError} All instance geometries must have the same primitiveType.\n     *\n     *\n     * @example\n     * for (var i = 0; i < instances.length; ++i) {\n     *   Cesium.GeometryPipeline.transformToWorldCoordinates(instances[i]);\n     * }\n     * var geometries = Cesium.GeometryPipeline.combineInstances(instances);\n     *\n     * @see GeometryPipeline.transformToWorldCoordinates\n     */\n    GeometryPipeline.combineInstances = function(instances) {\n        //>>includeStart('debug', pragmas.debug);\n        if ((!defined(instances)) || (instances.length < 1)) {\n            throw new DeveloperError('instances is required and must have length greater than zero.');\n        }\n        //>>includeEnd('debug');\n\n        var instanceGeometry = [];\n        var instanceSplitGeometry = [];\n        var length = instances.length;\n        for (var i = 0; i < length; ++i) {\n            var instance = instances[i];\n\n            if (defined(instance.geometry)) {\n                instanceGeometry.push(instance);\n            } else if (defined(instance.westHemisphereGeometry) && defined(instance.eastHemisphereGeometry)) {\n                instanceSplitGeometry.push(instance);\n            }\n        }\n\n        var geometries = [];\n        if (instanceGeometry.length > 0) {\n            geometries.push(combineGeometries(instanceGeometry, 'geometry'));\n        }\n\n        if (instanceSplitGeometry.length > 0) {\n            geometries.push(combineGeometries(instanceSplitGeometry, 'westHemisphereGeometry'));\n            geometries.push(combineGeometries(instanceSplitGeometry, 'eastHemisphereGeometry'));\n        }\n\n        return geometries;\n    };\n\n    var normal = new Cartesian3();\n    var v0 = new Cartesian3();\n    var v1 = new Cartesian3();\n    var v2 = new Cartesian3();\n\n    /**\n     * Computes per-vertex normals for a geometry containing <code>TRIANGLES</code> by averaging the normals of\n     * all triangles incident to the vertex.  The result is a new <code>normal</code> attribute added to the geometry.\n     * This assumes a counter-clockwise winding order.\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>normal</code> attribute.\n     *\n     * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\n     * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\n     *\n     * @example\n     * Cesium.GeometryPipeline.computeNormal(geometry);\n     */\n    GeometryPipeline.computeNormal = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        if (!defined(geometry.attributes.position) || !defined(geometry.attributes.position.values)) {\n            throw new DeveloperError('geometry.attributes.position.values is required.');\n        }\n        if (!defined(geometry.indices)) {\n            throw new DeveloperError('geometry.indices is required.');\n        }\n        if (geometry.indices.length < 2 || geometry.indices.length % 3 !== 0) {\n            throw new DeveloperError('geometry.indices length must be greater than 0 and be a multiple of 3.');\n        }\n        if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\n            throw new DeveloperError('geometry.primitiveType must be PrimitiveType.TRIANGLES.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = geometry.indices;\n        var attributes = geometry.attributes;\n        var vertices = attributes.position.values;\n        var numVertices = attributes.position.values.length / 3;\n        var numIndices = indices.length;\n        var normalsPerVertex = new Array(numVertices);\n        var normalsPerTriangle = new Array(numIndices / 3);\n        var normalIndices = new Array(numIndices);\n        var i;\n        for ( i = 0; i < numVertices; i++) {\n            normalsPerVertex[i] = {\n                indexOffset : 0,\n                count : 0,\n                currentCount : 0\n            };\n        }\n\n        var j = 0;\n        for (i = 0; i < numIndices; i += 3) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n            var i2 = indices[i + 2];\n            var i03 = i0 * 3;\n            var i13 = i1 * 3;\n            var i23 = i2 * 3;\n\n            v0.x = vertices[i03];\n            v0.y = vertices[i03 + 1];\n            v0.z = vertices[i03 + 2];\n            v1.x = vertices[i13];\n            v1.y = vertices[i13 + 1];\n            v1.z = vertices[i13 + 2];\n            v2.x = vertices[i23];\n            v2.y = vertices[i23 + 1];\n            v2.z = vertices[i23 + 2];\n\n            normalsPerVertex[i0].count++;\n            normalsPerVertex[i1].count++;\n            normalsPerVertex[i2].count++;\n\n            Cartesian3.subtract(v1, v0, v1);\n            Cartesian3.subtract(v2, v0, v2);\n            normalsPerTriangle[j] = Cartesian3.cross(v1, v2, new Cartesian3());\n            j++;\n        }\n\n        var indexOffset = 0;\n        for (i = 0; i < numVertices; i++) {\n            normalsPerVertex[i].indexOffset += indexOffset;\n            indexOffset += normalsPerVertex[i].count;\n        }\n\n        j = 0;\n        var vertexNormalData;\n        for (i = 0; i < numIndices; i += 3) {\n            vertexNormalData = normalsPerVertex[indices[i]];\n            var index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n            normalIndices[index] = j;\n            vertexNormalData.currentCount++;\n\n            vertexNormalData = normalsPerVertex[indices[i + 1]];\n            index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n            normalIndices[index] = j;\n            vertexNormalData.currentCount++;\n\n            vertexNormalData = normalsPerVertex[indices[i + 2]];\n            index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n            normalIndices[index] = j;\n            vertexNormalData.currentCount++;\n\n            j++;\n        }\n\n        var normalValues = new Float32Array(numVertices * 3);\n        for (i = 0; i < numVertices; i++) {\n            var i3 = i * 3;\n            vertexNormalData = normalsPerVertex[i];\n            Cartesian3.clone(Cartesian3.ZERO, normal);\n            if (vertexNormalData.count > 0) {\n                for (j = 0; j < vertexNormalData.count; j++) {\n                    Cartesian3.add(normal, normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]], normal);\n                }\n\n                // We can run into an issue where a vertex is used with 2 primitives that have opposite winding order.\n                if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\n                    Cartesian3.clone(normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]], normal);\n                }\n            }\n\n            // We end up with a zero vector probably because of a degenerate triangle\n            if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\n                // Default to (0,0,1)\n                normal.z = 1.0;\n            }\n\n            Cartesian3.normalize(normal, normal);\n            normalValues[i3] = normal.x;\n            normalValues[i3 + 1] = normal.y;\n            normalValues[i3 + 2] = normal.z;\n        }\n\n        geometry.attributes.normal = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 3,\n            values : normalValues\n        });\n\n        return geometry;\n    };\n\n    var normalScratch = new Cartesian3();\n    var normalScale = new Cartesian3();\n    var tScratch = new Cartesian3();\n\n    /**\n     * Computes per-vertex tangents and bitangents for a geometry containing <code>TRIANGLES</code>.\n     * The result is new <code>tangent</code> and <code>bitangent</code> attributes added to the geometry.\n     * This assumes a counter-clockwise winding order.\n     * <p>\n     * Based on <a href=\"http://www.terathon.com/code/tangent.html\">Computing Tangent Space Basis Vectors\n     * for an Arbitrary Mesh</a> by Eric Lengyel.\n     * </p>\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>tangent</code> and <code>bitangent</code> attributes.\n     *\n     * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\n     * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\n     *\n     * @example\n     * Cesium.GeometryPipeline.computeTangentAndBiTangent(geometry);\n     */\n    GeometryPipeline.computeTangentAndBitangent = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug');\n\n        var attributes = geometry.attributes;\n        var indices = geometry.indices;\n\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(attributes.position) || !defined(attributes.position.values)) {\n            throw new DeveloperError('geometry.attributes.position.values is required.');\n        }\n        if (!defined(attributes.normal) || !defined(attributes.normal.values)) {\n            throw new DeveloperError('geometry.attributes.normal.values is required.');\n        }\n        if (!defined(attributes.st) || !defined(attributes.st.values)) {\n            throw new DeveloperError('geometry.attributes.st.values is required.');\n        }\n        if (!defined(indices)) {\n            throw new DeveloperError('geometry.indices is required.');\n        }\n        if (indices.length < 2 || indices.length % 3 !== 0) {\n            throw new DeveloperError('geometry.indices length must be greater than 0 and be a multiple of 3.');\n        }\n        if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\n            throw new DeveloperError('geometry.primitiveType must be PrimitiveType.TRIANGLES.');\n        }\n        //>>includeEnd('debug');\n\n        var vertices = geometry.attributes.position.values;\n        var normals = geometry.attributes.normal.values;\n        var st = geometry.attributes.st.values;\n\n        var numVertices = geometry.attributes.position.values.length / 3;\n        var numIndices = indices.length;\n        var tan1 = new Array(numVertices * 3);\n\n        var i;\n        for ( i = 0; i < tan1.length; i++) {\n            tan1[i] = 0;\n        }\n\n        var i03;\n        var i13;\n        var i23;\n        for (i = 0; i < numIndices; i += 3) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n            var i2 = indices[i + 2];\n            i03 = i0 * 3;\n            i13 = i1 * 3;\n            i23 = i2 * 3;\n            var i02 = i0 * 2;\n            var i12 = i1 * 2;\n            var i22 = i2 * 2;\n\n            var ux = vertices[i03];\n            var uy = vertices[i03 + 1];\n            var uz = vertices[i03 + 2];\n\n            var wx = st[i02];\n            var wy = st[i02 + 1];\n            var t1 = st[i12 + 1] - wy;\n            var t2 = st[i22 + 1] - wy;\n\n            var r = 1.0 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);\n            var sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;\n            var sdiry = (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;\n            var sdirz = (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;\n\n            tan1[i03] += sdirx;\n            tan1[i03 + 1] += sdiry;\n            tan1[i03 + 2] += sdirz;\n\n            tan1[i13] += sdirx;\n            tan1[i13 + 1] += sdiry;\n            tan1[i13 + 2] += sdirz;\n\n            tan1[i23] += sdirx;\n            tan1[i23 + 1] += sdiry;\n            tan1[i23 + 2] += sdirz;\n        }\n\n        var tangentValues = new Float32Array(numVertices * 3);\n        var bitangentValues = new Float32Array(numVertices * 3);\n\n        for (i = 0; i < numVertices; i++) {\n            i03 = i * 3;\n            i13 = i03 + 1;\n            i23 = i03 + 2;\n\n            var n = Cartesian3.fromArray(normals, i03, normalScratch);\n            var t = Cartesian3.fromArray(tan1, i03, tScratch);\n            var scalar = Cartesian3.dot(n, t);\n            Cartesian3.multiplyByScalar(n, scalar, normalScale);\n            Cartesian3.normalize(Cartesian3.subtract(t, normalScale, t), t);\n\n            tangentValues[i03] = t.x;\n            tangentValues[i13] = t.y;\n            tangentValues[i23] = t.z;\n\n            Cartesian3.normalize(Cartesian3.cross(n, t, t), t);\n\n            bitangentValues[i03] = t.x;\n            bitangentValues[i13] = t.y;\n            bitangentValues[i23] = t.z;\n        }\n\n        geometry.attributes.tangent = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 3,\n            values : tangentValues\n        });\n\n        geometry.attributes.bitangent = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 3,\n            values : bitangentValues\n        });\n\n        return geometry;\n    };\n\n    var scratchCartesian2 = new Cartesian2();\n    var toEncode1 = new Cartesian3();\n    var toEncode2 = new Cartesian3();\n    var toEncode3 = new Cartesian3();\n    var encodeResult2 = new Cartesian2();\n    /**\n     * Compresses and packs geometry normal attribute values to save memory.\n     *\n     * @param {Geometry} geometry The geometry to modify.\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its normals compressed and packed.\n     *\n     * @example\n     * geometry = Cesium.GeometryPipeline.compressVertices(geometry);\n     */\n    GeometryPipeline.compressVertices = function(geometry) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(geometry)) {\n            throw new DeveloperError('geometry is required.');\n        }\n        //>>includeEnd('debug');\n\n        var extrudeAttribute = geometry.attributes.extrudeDirection;\n        var i;\n        var numVertices;\n        if (defined(extrudeAttribute)) {\n            //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don't need to check other attributes\n            var extrudeDirections = extrudeAttribute.values;\n            numVertices = extrudeDirections.length / 3.0;\n            var compressedDirections = new Float32Array(numVertices * 2);\n\n            var i2 = 0;\n            for (i = 0; i < numVertices; ++i) {\n                Cartesian3.fromArray(extrudeDirections, i * 3.0, toEncode1);\n                if (Cartesian3.equals(toEncode1, Cartesian3.ZERO)) {\n                    i2 += 2;\n                    continue;\n                }\n                encodeResult2 = AttributeCompression.octEncodeInRange(toEncode1, 65535, encodeResult2);\n                compressedDirections[i2++] = encodeResult2.x;\n                compressedDirections[i2++] = encodeResult2.y;\n            }\n\n            geometry.attributes.compressedAttributes = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : compressedDirections\n            });\n            delete geometry.attributes.extrudeDirection;\n            return geometry;\n        }\n\n        var normalAttribute = geometry.attributes.normal;\n        var stAttribute = geometry.attributes.st;\n\n        var hasNormal = defined(normalAttribute);\n        var hasSt = defined(stAttribute);\n        if (!hasNormal && !hasSt) {\n            return geometry;\n        }\n\n        var tangentAttribute = geometry.attributes.tangent;\n        var bitangentAttribute = geometry.attributes.bitangent;\n\n        var hasTangent = defined(tangentAttribute);\n        var hasBitangent = defined(bitangentAttribute);\n\n        var normals;\n        var st;\n        var tangents;\n        var bitangents;\n\n        if (hasNormal) {\n            normals = normalAttribute.values;\n        }\n        if (hasSt) {\n            st = stAttribute.values;\n        }\n        if (hasTangent) {\n            tangents = tangentAttribute.values;\n        }\n        if (hasBitangent) {\n            bitangents = bitangentAttribute.values;\n        }\n\n        var length = hasNormal ? normals.length : st.length;\n        var numComponents = hasNormal ? 3.0 : 2.0;\n        numVertices = length / numComponents;\n\n        var compressedLength = numVertices;\n        var numCompressedComponents = hasSt && hasNormal ? 2.0 : 1.0;\n        numCompressedComponents += hasTangent || hasBitangent ? 1.0 : 0.0;\n        compressedLength *= numCompressedComponents;\n\n        var compressedAttributes = new Float32Array(compressedLength);\n\n        var normalIndex = 0;\n        for (i = 0; i < numVertices; ++i) {\n            if (hasSt) {\n                Cartesian2.fromArray(st, i * 2.0, scratchCartesian2);\n                compressedAttributes[normalIndex++] = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n            }\n\n            var index = i * 3.0;\n            if (hasNormal && defined(tangents) && defined(bitangents)) {\n                Cartesian3.fromArray(normals, index, toEncode1);\n                Cartesian3.fromArray(tangents, index, toEncode2);\n                Cartesian3.fromArray(bitangents, index, toEncode3);\n\n                AttributeCompression.octPack(toEncode1, toEncode2, toEncode3, scratchCartesian2);\n                compressedAttributes[normalIndex++] = scratchCartesian2.x;\n                compressedAttributes[normalIndex++] = scratchCartesian2.y;\n            } else {\n                if (hasNormal) {\n                    Cartesian3.fromArray(normals, index, toEncode1);\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\n                }\n\n                if (hasTangent) {\n                    Cartesian3.fromArray(tangents, index, toEncode1);\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\n                }\n\n                if (hasBitangent) {\n                    Cartesian3.fromArray(bitangents, index, toEncode1);\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\n                }\n            }\n        }\n\n        geometry.attributes.compressedAttributes = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : numCompressedComponents,\n            values : compressedAttributes\n        });\n\n        if (hasNormal) {\n            delete geometry.attributes.normal;\n        }\n        if (hasSt) {\n            delete geometry.attributes.st;\n        }\n        if (hasBitangent) {\n            delete geometry.attributes.bitangent;\n        }\n        if (hasTangent) {\n            delete geometry.attributes.tangent;\n        }\n\n        return geometry;\n    };\n\n    function indexTriangles(geometry) {\n        if (defined(geometry.indices)) {\n            return geometry;\n        }\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 3) {\n            throw new DeveloperError('The number of vertices must be at least three.');\n        }\n        if (numberOfVertices % 3 !== 0) {\n            throw new DeveloperError('The number of vertices must be a multiple of three.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\n        for (var i = 0; i < numberOfVertices; ++i) {\n            indices[i] = i;\n        }\n\n        geometry.indices = indices;\n        return geometry;\n    }\n\n    function indexTriangleFan(geometry) {\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 3) {\n            throw new DeveloperError('The number of vertices must be at least three.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\n        indices[0] = 1;\n        indices[1] = 0;\n        indices[2] = 2;\n\n        var indicesIndex = 3;\n        for (var i = 3; i < numberOfVertices; ++i) {\n            indices[indicesIndex++] = i - 1;\n            indices[indicesIndex++] = 0;\n            indices[indicesIndex++] = i;\n        }\n\n        geometry.indices = indices;\n        geometry.primitiveType = PrimitiveType.TRIANGLES;\n        return geometry;\n    }\n\n    function indexTriangleStrip(geometry) {\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 3) {\n            throw new DeveloperError('The number of vertices must be at least 3.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\n        indices[0] = 0;\n        indices[1] = 1;\n        indices[2] = 2;\n\n        if (numberOfVertices > 3) {\n            indices[3] = 0;\n            indices[4] = 2;\n            indices[5] = 3;\n        }\n\n        var indicesIndex = 6;\n        for (var i = 3; i < numberOfVertices - 1; i += 2) {\n            indices[indicesIndex++] = i;\n            indices[indicesIndex++] = i - 1;\n            indices[indicesIndex++] = i + 1;\n\n            if (i + 2 < numberOfVertices) {\n                indices[indicesIndex++] = i;\n                indices[indicesIndex++] = i + 1;\n                indices[indicesIndex++] = i + 2;\n            }\n        }\n\n        geometry.indices = indices;\n        geometry.primitiveType = PrimitiveType.TRIANGLES;\n        return geometry;\n    }\n\n    function indexLines(geometry) {\n        if (defined(geometry.indices)) {\n            return geometry;\n        }\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 2) {\n            throw new DeveloperError('The number of vertices must be at least two.');\n        }\n        if (numberOfVertices % 2 !== 0) {\n            throw new DeveloperError('The number of vertices must be a multiple of 2.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\n        for (var i = 0; i < numberOfVertices; ++i) {\n            indices[i] = i;\n        }\n\n        geometry.indices = indices;\n        return geometry;\n    }\n\n    function indexLineStrip(geometry) {\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 2) {\n            throw new DeveloperError('The number of vertices must be at least two.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 1) * 2);\n        indices[0] = 0;\n        indices[1] = 1;\n        var indicesIndex = 2;\n        for (var i = 2; i < numberOfVertices; ++i) {\n            indices[indicesIndex++] = i - 1;\n            indices[indicesIndex++] = i;\n        }\n\n        geometry.indices = indices;\n        geometry.primitiveType = PrimitiveType.LINES;\n        return geometry;\n    }\n\n    function indexLineLoop(geometry) {\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (numberOfVertices < 2) {\n            throw new DeveloperError('The number of vertices must be at least two.');\n        }\n        //>>includeEnd('debug');\n\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices * 2);\n\n        indices[0] = 0;\n        indices[1] = 1;\n\n        var indicesIndex = 2;\n        for (var i = 2; i < numberOfVertices; ++i) {\n            indices[indicesIndex++] = i - 1;\n            indices[indicesIndex++] = i;\n        }\n\n        indices[indicesIndex++] = numberOfVertices - 1;\n        indices[indicesIndex] = 0;\n\n        geometry.indices = indices;\n        geometry.primitiveType = PrimitiveType.LINES;\n        return geometry;\n    }\n\n    function indexPrimitive(geometry) {\n        switch (geometry.primitiveType) {\n        case PrimitiveType.TRIANGLE_FAN:\n            return indexTriangleFan(geometry);\n        case PrimitiveType.TRIANGLE_STRIP:\n            return indexTriangleStrip(geometry);\n        case PrimitiveType.TRIANGLES:\n            return indexTriangles(geometry);\n        case PrimitiveType.LINE_STRIP:\n            return indexLineStrip(geometry);\n        case PrimitiveType.LINE_LOOP:\n            return indexLineLoop(geometry);\n        case PrimitiveType.LINES:\n            return indexLines(geometry);\n        }\n\n        return geometry;\n    }\n\n    function offsetPointFromXZPlane(p, isBehind) {\n        if (Math.abs(p.y) < CesiumMath.EPSILON6){\n            if (isBehind) {\n                p.y = -CesiumMath.EPSILON6;\n            } else {\n                p.y = CesiumMath.EPSILON6;\n            }\n        }\n    }\n\n    function offsetTriangleFromXZPlane(p0, p1, p2) {\n        if (p0.y !== 0.0 && p1.y !== 0.0 && p2.y !== 0.0) {\n            offsetPointFromXZPlane(p0, p0.y < 0.0);\n            offsetPointFromXZPlane(p1, p1.y < 0.0);\n            offsetPointFromXZPlane(p2, p2.y < 0.0);\n            return;\n        }\n\n        var p0y = Math.abs(p0.y);\n        var p1y = Math.abs(p1.y);\n        var p2y = Math.abs(p2.y);\n\n        var sign;\n        if (p0y > p1y) {\n            if (p0y > p2y) {\n                sign = CesiumMath.sign(p0.y);\n            } else {\n                sign = CesiumMath.sign(p2.y);\n            }\n        } else if (p1y > p2y) {\n            sign = CesiumMath.sign(p1.y);\n        } else {\n            sign = CesiumMath.sign(p2.y);\n        }\n\n        var isBehind = sign < 0.0;\n        offsetPointFromXZPlane(p0, isBehind);\n        offsetPointFromXZPlane(p1, isBehind);\n        offsetPointFromXZPlane(p2, isBehind);\n    }\n\n    var c3 = new Cartesian3();\n    function getXZIntersectionOffsetPoints(p, p1, u1, v1) {\n        Cartesian3.add(p, Cartesian3.multiplyByScalar(Cartesian3.subtract(p1, p, c3), p.y/(p.y-p1.y), c3), u1);\n        Cartesian3.clone(u1, v1);\n        offsetPointFromXZPlane(u1, true);\n        offsetPointFromXZPlane(v1, false);\n    }\n\n    var u1 = new Cartesian3();\n    var u2 = new Cartesian3();\n    var q1 = new Cartesian3();\n    var q2 = new Cartesian3();\n\n    var splitTriangleResult = {\n        positions : new Array(7),\n        indices : new Array(3 * 3)\n    };\n\n    function splitTriangle(p0, p1, p2) {\n        // In WGS84 coordinates, for a triangle approximately on the\n        // ellipsoid to cross the IDL, first it needs to be on the\n        // negative side of the plane x = 0.\n        if ((p0.x >= 0.0) || (p1.x >= 0.0) || (p2.x >= 0.0)) {\n            return undefined;\n        }\n\n        offsetTriangleFromXZPlane(p0, p1, p2);\n\n        var p0Behind = p0.y < 0.0;\n        var p1Behind = p1.y < 0.0;\n        var p2Behind = p2.y < 0.0;\n\n        var numBehind = 0;\n        numBehind += p0Behind ? 1 : 0;\n        numBehind += p1Behind ? 1 : 0;\n        numBehind += p2Behind ? 1 : 0;\n\n        var indices = splitTriangleResult.indices;\n\n        if (numBehind === 1) {\n            indices[1] = 3;\n            indices[2] = 4;\n            indices[5] = 6;\n            indices[7] = 6;\n            indices[8] = 5;\n\n            if (p0Behind) {\n                getXZIntersectionOffsetPoints(p0, p1, u1, q1);\n                getXZIntersectionOffsetPoints(p0, p2, u2, q2);\n\n                indices[0] = 0;\n                indices[3] = 1;\n                indices[4] = 2;\n                indices[6] = 1;\n            } else if (p1Behind) {\n                getXZIntersectionOffsetPoints(p1, p2, u1, q1);\n                getXZIntersectionOffsetPoints(p1, p0, u2, q2);\n\n                indices[0] = 1;\n                indices[3] = 2;\n                indices[4] = 0;\n                indices[6] = 2;\n            } else if (p2Behind) {\n                getXZIntersectionOffsetPoints(p2, p0, u1, q1);\n                getXZIntersectionOffsetPoints(p2, p1, u2, q2);\n\n                indices[0] = 2;\n                indices[3] = 0;\n                indices[4] = 1;\n                indices[6] = 0;\n            }\n        } else if (numBehind === 2) {\n            indices[2] = 4;\n            indices[4] = 4;\n            indices[5] = 3;\n            indices[7] = 5;\n            indices[8] = 6;\n\n            if (!p0Behind) {\n                getXZIntersectionOffsetPoints(p0, p1, u1, q1);\n                getXZIntersectionOffsetPoints(p0, p2, u2, q2);\n\n                indices[0] = 1;\n                indices[1] = 2;\n                indices[3] = 1;\n                indices[6] = 0;\n            } else if (!p1Behind) {\n                getXZIntersectionOffsetPoints(p1, p2, u1, q1);\n                getXZIntersectionOffsetPoints(p1, p0, u2, q2);\n\n                indices[0] = 2;\n                indices[1] = 0;\n                indices[3] = 2;\n                indices[6] = 1;\n            } else if (!p2Behind) {\n                getXZIntersectionOffsetPoints(p2, p0, u1, q1);\n                getXZIntersectionOffsetPoints(p2, p1, u2, q2);\n\n                indices[0] = 0;\n                indices[1] = 1;\n                indices[3] = 0;\n                indices[6] = 2;\n            }\n        }\n\n        var positions = splitTriangleResult.positions;\n        positions[0] = p0;\n        positions[1] = p1;\n        positions[2] = p2;\n        positions.length = 3;\n\n        if (numBehind === 1 || numBehind === 2) {\n            positions[3] = u1;\n            positions[4] = u2;\n            positions[5] = q1;\n            positions[6] = q2;\n            positions.length = 7;\n        }\n\n        return splitTriangleResult;\n    }\n\n    function updateGeometryAfterSplit(geometry, computeBoundingSphere) {\n        var attributes = geometry.attributes;\n\n        if (attributes.position.values.length === 0) {\n            return undefined;\n        }\n\n        for (var property in attributes) {\n            if (attributes.hasOwnProperty(property) &&\n                    defined(attributes[property]) &&\n                    defined(attributes[property].values)) {\n\n                var attribute = attributes[property];\n                attribute.values = ComponentDatatype.createTypedArray(attribute.componentDatatype, attribute.values);\n            }\n        }\n\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n        geometry.indices = IndexDatatype.createTypedArray(numberOfVertices, geometry.indices);\n\n        if (computeBoundingSphere) {\n            geometry.boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\n        }\n\n        return geometry;\n    }\n\n    function copyGeometryForSplit(geometry) {\n        var attributes = geometry.attributes;\n        var copiedAttributes = {};\n\n        for (var property in attributes) {\n            if (attributes.hasOwnProperty(property) &&\n                    defined(attributes[property]) &&\n                    defined(attributes[property].values)) {\n\n                var attribute = attributes[property];\n                copiedAttributes[property] = new GeometryAttribute({\n                    componentDatatype : attribute.componentDatatype,\n                    componentsPerAttribute : attribute.componentsPerAttribute,\n                    normalize : attribute.normalize,\n                    values : []\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : copiedAttributes,\n            indices : [],\n            primitiveType : geometry.primitiveType\n        });\n    }\n\n    function updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {\n        var computeBoundingSphere = defined(instance.geometry.boundingSphere);\n\n        westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);\n        eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);\n\n        if (defined(eastGeometry) && !defined(westGeometry)) {\n            instance.geometry = eastGeometry;\n        } else if (!defined(eastGeometry) && defined(westGeometry)) {\n            instance.geometry = westGeometry;\n        } else {\n            instance.westHemisphereGeometry = westGeometry;\n            instance.eastHemisphereGeometry = eastGeometry;\n            instance.geometry = undefined;\n        }\n    }\n\n    function generateBarycentricInterpolateFunction(CartesianType, numberOfComponents) {\n        var v0Scratch = new CartesianType();\n        var v1Scratch = new CartesianType();\n        var v2Scratch = new CartesianType();\n\n        return function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, normalize) {\n            var v0 = CartesianType.fromArray(sourceValues, i0 * numberOfComponents, v0Scratch);\n            var v1 = CartesianType.fromArray(sourceValues, i1 * numberOfComponents, v1Scratch);\n            var v2 = CartesianType.fromArray(sourceValues, i2 * numberOfComponents, v2Scratch);\n\n            CartesianType.multiplyByScalar(v0, coords.x, v0);\n            CartesianType.multiplyByScalar(v1, coords.y, v1);\n            CartesianType.multiplyByScalar(v2, coords.z, v2);\n\n            var value = CartesianType.add(v0, v1, v0);\n            CartesianType.add(value, v2, value);\n\n            if (normalize) {\n                CartesianType.normalize(value, value);\n            }\n\n            CartesianType.pack(value, currentValues, insertedIndex * numberOfComponents);\n        };\n    }\n\n    var interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(Cartesian4, 4);\n    var interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(Cartesian3, 3);\n    var interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(Cartesian2, 2);\n    var interpolateAndPackBoolean = function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex) {\n        var v1 = sourceValues[i0] * coords.x;\n        var v2 = sourceValues[i1] * coords.y;\n        var v3 = sourceValues[i2] * coords.z;\n        currentValues[insertedIndex] = (v1 + v2 + v3) > CesiumMath.EPSILON6 ? 1 : 0;\n    };\n\n    var p0Scratch = new Cartesian3();\n    var p1Scratch = new Cartesian3();\n    var p2Scratch = new Cartesian3();\n    var barycentricScratch = new Cartesian3();\n\n    function computeTriangleAttributes(i0, i1, i2, point, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, allAttributes, insertedIndex) {\n        if (!defined(normals) && !defined(tangents) && !defined(bitangents) && !defined(texCoords) && !defined(extrudeDirections) && customAttributesLength === 0) {\n            return;\n        }\n\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n        var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\n        var p2 = Cartesian3.fromArray(positions, i2 * 3, p2Scratch);\n        var coords = barycentricCoordinates(point, p0, p1, p2, barycentricScratch);\n\n        if (defined(normals)) {\n            interpolateAndPackCartesian3(i0, i1, i2, coords, normals, currentAttributes.normal.values, insertedIndex, true);\n        }\n\n        if (defined(extrudeDirections)) {\n            var d0 = Cartesian3.fromArray(extrudeDirections, i0 * 3, p0Scratch);\n            var d1 = Cartesian3.fromArray(extrudeDirections, i1 * 3, p1Scratch);\n            var d2 = Cartesian3.fromArray(extrudeDirections, i2 * 3, p2Scratch);\n\n            Cartesian3.multiplyByScalar(d0, coords.x, d0);\n            Cartesian3.multiplyByScalar(d1, coords.y, d1);\n            Cartesian3.multiplyByScalar(d2, coords.z, d2);\n\n            var direction;\n            if (!Cartesian3.equals(d0, Cartesian3.ZERO) || !Cartesian3.equals(d1, Cartesian3.ZERO) || !Cartesian3.equals(d2, Cartesian3.ZERO)) {\n                direction = Cartesian3.add(d0, d1, d0);\n                Cartesian3.add(direction, d2, direction);\n                Cartesian3.normalize(direction, direction);\n            } else {\n                direction = p0Scratch;\n                direction.x = 0;\n                direction.y = 0;\n                direction.z = 0;\n            }\n            Cartesian3.pack(direction, currentAttributes.extrudeDirection.values, insertedIndex * 3);\n        }\n\n        if (defined(applyOffset)) {\n            interpolateAndPackBoolean(i0, i1, i2, coords, applyOffset, currentAttributes.applyOffset.values, insertedIndex);\n        }\n\n        if (defined(tangents)) {\n            interpolateAndPackCartesian3(i0, i1, i2, coords, tangents, currentAttributes.tangent.values, insertedIndex, true);\n        }\n\n        if (defined(bitangents)) {\n            interpolateAndPackCartesian3(i0, i1, i2, coords, bitangents, currentAttributes.bitangent.values, insertedIndex, true);\n        }\n\n        if (defined(texCoords)) {\n            interpolateAndPackCartesian2(i0, i1, i2, coords, texCoords, currentAttributes.st.values, insertedIndex);\n        }\n\n        if (customAttributesLength > 0) {\n            for (var i = 0; i < customAttributesLength; i++) {\n                var attributeName = customAttributeNames[i];\n                genericInterpolate(i0, i1, i2, coords, insertedIndex, allAttributes[attributeName], currentAttributes[attributeName]);\n            }\n        }\n    }\n\n    function genericInterpolate(i0, i1, i2, coords, insertedIndex, sourceAttribute, currentAttribute) {\n        var componentsPerAttribute = sourceAttribute.componentsPerAttribute;\n        var sourceValues = sourceAttribute.values;\n        var currentValues = currentAttribute.values;\n        switch(componentsPerAttribute) {\n            case 4:\n                interpolateAndPackCartesian4(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\n                break;\n            case 3:\n                interpolateAndPackCartesian3(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\n                break;\n            case 2:\n                interpolateAndPackCartesian2(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\n                break;\n            default:\n                currentValues[insertedIndex] = sourceValues[i0] * coords.x + sourceValues[i1] * coords.y + sourceValues[i2] * coords.z;\n        }\n    }\n\n    function insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, currentIndex, point) {\n        var insertIndex = currentAttributes.position.values.length / 3;\n\n        if (currentIndex !== -1) {\n            var prevIndex = indices[currentIndex];\n            var newIndex = currentIndexMap[prevIndex];\n\n            if (newIndex === -1) {\n                currentIndexMap[prevIndex] = insertIndex;\n                currentAttributes.position.values.push(point.x, point.y, point.z);\n                currentIndices.push(insertIndex);\n                return insertIndex;\n            }\n\n            currentIndices.push(newIndex);\n            return newIndex;\n        }\n\n        currentAttributes.position.values.push(point.x, point.y, point.z);\n        currentIndices.push(insertIndex);\n        return insertIndex;\n    }\n\n    var NAMED_ATTRIBUTES = {\n        position : true,\n        normal : true,\n        bitangent : true,\n        tangent : true,\n        st : true,\n        extrudeDirection : true,\n        applyOffset: true\n    };\n    function splitLongitudeTriangles(instance) {\n        var geometry = instance.geometry;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.values;\n        var normals = (defined(attributes.normal)) ? attributes.normal.values : undefined;\n        var bitangents = (defined(attributes.bitangent)) ? attributes.bitangent.values : undefined;\n        var tangents = (defined(attributes.tangent)) ? attributes.tangent.values : undefined;\n        var texCoords = (defined(attributes.st)) ? attributes.st.values : undefined;\n        var extrudeDirections = (defined(attributes.extrudeDirection)) ? attributes.extrudeDirection.values : undefined;\n        var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\n        var indices = geometry.indices;\n\n        var customAttributeNames = [];\n        for (var attributeName in attributes) {\n            if (attributes.hasOwnProperty(attributeName) && !NAMED_ATTRIBUTES[attributeName] && defined(attributes[attributeName])) {\n                customAttributeNames.push(attributeName);\n            }\n        }\n        var customAttributesLength = customAttributeNames.length;\n\n        var eastGeometry = copyGeometryForSplit(geometry);\n        var westGeometry = copyGeometryForSplit(geometry);\n\n        var currentAttributes;\n        var currentIndices;\n        var currentIndexMap;\n        var insertedIndex;\n        var i;\n\n        var westGeometryIndexMap = [];\n        westGeometryIndexMap.length = positions.length / 3;\n\n        var eastGeometryIndexMap = [];\n        eastGeometryIndexMap.length = positions.length / 3;\n\n        for (i = 0; i < westGeometryIndexMap.length; ++i) {\n            westGeometryIndexMap[i] = -1;\n            eastGeometryIndexMap[i] = -1;\n        }\n\n        var len = indices.length;\n        for (i = 0; i < len; i += 3) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n            var i2 = indices[i + 2];\n\n            var p0 = Cartesian3.fromArray(positions, i0 * 3);\n            var p1 = Cartesian3.fromArray(positions, i1 * 3);\n            var p2 = Cartesian3.fromArray(positions, i2 * 3);\n\n            var result = splitTriangle(p0, p1, p2);\n            if (defined(result) && result.positions.length > 3) {\n                var resultPositions = result.positions;\n                var resultIndices = result.indices;\n                var resultLength = resultIndices.length;\n\n                for (var j = 0; j < resultLength; ++j) {\n                    var resultIndex = resultIndices[j];\n                    var point = resultPositions[resultIndex];\n\n                    if (point.y < 0.0) {\n                        currentAttributes = westGeometry.attributes;\n                        currentIndices = westGeometry.indices;\n                        currentIndexMap = westGeometryIndexMap;\n                    } else {\n                        currentAttributes = eastGeometry.attributes;\n                        currentIndices = eastGeometry.indices;\n                        currentIndexMap = eastGeometryIndexMap;\n                    }\n\n                    insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, resultIndex < 3 ? i + resultIndex : -1, point);\n                    computeTriangleAttributes(i0, i1, i2, point, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\n                }\n            } else {\n                if (defined(result)) {\n                    p0 = result.positions[0];\n                    p1 = result.positions[1];\n                    p2 = result.positions[2];\n                }\n\n                if (p0.y < 0.0) {\n                    currentAttributes = westGeometry.attributes;\n                    currentIndices = westGeometry.indices;\n                    currentIndexMap = westGeometryIndexMap;\n                } else {\n                    currentAttributes = eastGeometry.attributes;\n                    currentIndices = eastGeometry.indices;\n                    currentIndexMap = eastGeometryIndexMap;\n                }\n\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\n                computeTriangleAttributes(i0, i1, i2, p0, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\n\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\n                computeTriangleAttributes(i0, i1, i2, p1, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\n\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 2, p2);\n                computeTriangleAttributes(i0, i1, i2, p2, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\n            }\n        }\n\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n    }\n\n    var xzPlane = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\n\n    var offsetScratch = new Cartesian3();\n    var offsetPointScratch = new Cartesian3();\n\n    function computeLineAttributes(i0, i1, point, positions, insertIndex, currentAttributes, applyOffset) {\n        if (!defined(applyOffset)) {\n            return;\n        }\n\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n        if (Cartesian3.equalsEpsilon(p0, point, CesiumMath.EPSILON10)) {\n            currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];\n        } else {\n            currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];\n        }\n\n    }\n\n    function splitLongitudeLines(instance) {\n        var geometry = instance.geometry;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.values;\n        var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\n        var indices = geometry.indices;\n\n        var eastGeometry = copyGeometryForSplit(geometry);\n        var westGeometry = copyGeometryForSplit(geometry);\n\n        var i;\n        var length = indices.length;\n\n        var westGeometryIndexMap = [];\n        westGeometryIndexMap.length = positions.length / 3;\n\n        var eastGeometryIndexMap = [];\n        eastGeometryIndexMap.length = positions.length / 3;\n\n        for (i = 0; i < westGeometryIndexMap.length; ++i) {\n            westGeometryIndexMap[i] = -1;\n            eastGeometryIndexMap[i] = -1;\n        }\n\n        for (i = 0; i < length; i += 2) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n\n            var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n            var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\n            var insertIndex;\n\n            if (Math.abs(p0.y) < CesiumMath.EPSILON6){\n                if (p0.y < 0.0) {\n                    p0.y = -CesiumMath.EPSILON6;\n                } else {\n                    p0.y = CesiumMath.EPSILON6;\n                }\n            }\n\n            if (Math.abs(p1.y) < CesiumMath.EPSILON6){\n                if (p1.y < 0.0) {\n                    p1.y = -CesiumMath.EPSILON6;\n                } else {\n                    p1.y = CesiumMath.EPSILON6;\n                }\n            }\n\n            var p0Attributes = eastGeometry.attributes;\n            var p0Indices = eastGeometry.indices;\n            var p0IndexMap = eastGeometryIndexMap;\n            var p1Attributes = westGeometry.attributes;\n            var p1Indices = westGeometry.indices;\n            var p1IndexMap = westGeometryIndexMap;\n\n            var intersection = IntersectionTests.lineSegmentPlane(p0, p1, xzPlane, p2Scratch);\n            if (defined(intersection)) {\n                // move point on the xz-plane slightly away from the plane\n                var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, 5.0 * CesiumMath.EPSILON9, offsetScratch);\n                if (p0.y < 0.0) {\n                    Cartesian3.negate(offset, offset);\n\n                    p0Attributes = westGeometry.attributes;\n                    p0Indices = westGeometry.indices;\n                    p0IndexMap = westGeometryIndexMap;\n                    p1Attributes = eastGeometry.attributes;\n                    p1Indices = eastGeometry.indices;\n                    p1IndexMap = eastGeometryIndexMap;\n                }\n\n                var offsetPoint = Cartesian3.add(intersection, offset, offsetPointScratch);\n\n                insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, i, p0);\n                computeLineAttributes(i0, i1, p0, positions, insertIndex, p0Attributes, applyOffset);\n\n                insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, -1, offsetPoint);\n                computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p0Attributes, applyOffset);\n\n                Cartesian3.negate(offset, offset);\n                Cartesian3.add(intersection, offset, offsetPoint);\n                insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, -1, offsetPoint);\n                computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p1Attributes, applyOffset);\n\n                insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, i + 1, p1);\n                computeLineAttributes(i0, i1, p1, positions, insertIndex, p1Attributes, applyOffset);\n            } else {\n                var currentAttributes;\n                var currentIndices;\n                var currentIndexMap;\n\n                if (p0.y < 0.0) {\n                    currentAttributes = westGeometry.attributes;\n                    currentIndices = westGeometry.indices;\n                    currentIndexMap = westGeometryIndexMap;\n                } else {\n                    currentAttributes = eastGeometry.attributes;\n                    currentIndices = eastGeometry.indices;\n                    currentIndexMap = eastGeometryIndexMap;\n                }\n\n                insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\n                computeLineAttributes(i0, i1, p0, positions, insertIndex, currentAttributes, applyOffset);\n\n                insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\n                computeLineAttributes(i0, i1, p1, positions, insertIndex, currentAttributes, applyOffset);\n            }\n        }\n\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n    }\n\n    var cartesian2Scratch0 = new Cartesian2();\n    var cartesian2Scratch1 = new Cartesian2();\n\n    var cartesian3Scratch0 = new Cartesian3();\n    var cartesian3Scratch2 = new Cartesian3();\n    var cartesian3Scratch3 = new Cartesian3();\n    var cartesian3Scratch4 = new Cartesian3();\n    var cartesian3Scratch5 = new Cartesian3();\n    var cartesian3Scratch6 = new Cartesian3();\n\n    var cartesian4Scratch0 = new Cartesian4();\n\n    function updateAdjacencyAfterSplit(geometry) {\n        var attributes = geometry.attributes;\n        var positions = attributes.position.values;\n        var prevPositions = attributes.prevPosition.values;\n        var nextPositions = attributes.nextPosition.values;\n\n        var length = positions.length;\n        for (var j = 0; j < length; j += 3) {\n            var position = Cartesian3.unpack(positions, j, cartesian3Scratch0);\n            if (position.x > 0.0) {\n                continue;\n            }\n\n            var prevPosition = Cartesian3.unpack(prevPositions, j, cartesian3Scratch2);\n            if ((position.y < 0.0 && prevPosition.y > 0.0) || (position.y > 0.0 && prevPosition.y < 0.0)) {\n                if (j - 3 > 0) {\n                    prevPositions[j] = positions[j - 3];\n                    prevPositions[j + 1] = positions[j - 2];\n                    prevPositions[j + 2] = positions[j - 1];\n                } else {\n                    Cartesian3.pack(position, prevPositions, j);\n                }\n            }\n\n            var nextPosition = Cartesian3.unpack(nextPositions, j, cartesian3Scratch3);\n            if ((position.y < 0.0 && nextPosition.y > 0.0) || (position.y > 0.0 && nextPosition.y < 0.0)) {\n                if (j + 3 < length) {\n                    nextPositions[j] = positions[j + 3];\n                    nextPositions[j + 1] = positions[j + 4];\n                    nextPositions[j + 2] = positions[j + 5];\n                } else {\n                    Cartesian3.pack(position, nextPositions, j);\n                }\n            }\n        }\n    }\n\n    var offsetScalar = 5.0 * CesiumMath.EPSILON9;\n    var coplanarOffset = CesiumMath.EPSILON6;\n\n    function splitLongitudePolyline(instance) {\n        var geometry = instance.geometry;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.values;\n        var prevPositions = attributes.prevPosition.values;\n        var nextPositions = attributes.nextPosition.values;\n        var expandAndWidths = attributes.expandAndWidth.values;\n\n        var texCoords = (defined(attributes.st)) ? attributes.st.values : undefined;\n        var colors = (defined(attributes.color)) ? attributes.color.values : undefined;\n\n        var eastGeometry = copyGeometryForSplit(geometry);\n        var westGeometry = copyGeometryForSplit(geometry);\n\n        var i;\n        var j;\n        var index;\n\n        var intersectionFound = false;\n\n        var length = positions.length / 3;\n        for (i = 0; i < length; i += 4) {\n            var i0 = i;\n            var i2 = i + 2;\n\n            var p0 = Cartesian3.fromArray(positions, i0 * 3, cartesian3Scratch0);\n            var p2 = Cartesian3.fromArray(positions, i2 * 3, cartesian3Scratch2);\n\n            // Offset points that are close to the 180 longitude and change the previous/next point\n            // to be the same offset point so it can be projected to 2D. There is special handling in the\n            // shader for when position == prevPosition || position == nextPosition.\n            if (Math.abs(p0.y) < coplanarOffset) {\n                p0.y = coplanarOffset * (p2.y < 0.0 ? -1.0 : 1.0);\n                positions[i * 3 + 1] = p0.y;\n                positions[(i + 1) * 3 + 1] = p0.y;\n\n                for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\n                    prevPositions[j] = positions[i * 3];\n                    prevPositions[j + 1] = positions[i * 3 + 1];\n                    prevPositions[j + 2] = positions[i * 3 + 2];\n                }\n            }\n\n            // Do the same but for when the line crosses 180 longitude in the opposite direction.\n            if (Math.abs(p2.y) < coplanarOffset) {\n                p2.y = coplanarOffset * (p0.y < 0.0 ? -1.0 : 1.0);\n                positions[(i + 2) * 3 + 1] = p2.y;\n                positions[(i + 3) * 3 + 1] = p2.y;\n\n                for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\n                    nextPositions[j] = positions[(i + 2) * 3];\n                    nextPositions[j + 1] = positions[(i + 2) * 3 + 1];\n                    nextPositions[j + 2] = positions[(i + 2) * 3 + 2];\n                }\n            }\n\n            var p0Attributes = eastGeometry.attributes;\n            var p0Indices = eastGeometry.indices;\n            var p2Attributes = westGeometry.attributes;\n            var p2Indices = westGeometry.indices;\n\n            var intersection = IntersectionTests.lineSegmentPlane(p0, p2, xzPlane, cartesian3Scratch4);\n            if (defined(intersection)) {\n                intersectionFound = true;\n\n                // move point on the xz-plane slightly away from the plane\n                var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, offsetScalar, cartesian3Scratch5);\n                if (p0.y < 0.0) {\n                    Cartesian3.negate(offset, offset);\n                    p0Attributes = westGeometry.attributes;\n                    p0Indices = westGeometry.indices;\n                    p2Attributes = eastGeometry.attributes;\n                    p2Indices = eastGeometry.indices;\n                }\n\n                var offsetPoint = Cartesian3.add(intersection, offset, cartesian3Scratch6);\n                p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\n                p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n\n                p0Attributes.prevPosition.values.push(prevPositions[i0 * 3], prevPositions[i0 * 3 + 1], prevPositions[i0 * 3 + 2]);\n                p0Attributes.prevPosition.values.push(prevPositions[i0 * 3 + 3], prevPositions[i0 * 3 + 4], prevPositions[i0 * 3 + 5]);\n                p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\n\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n\n                Cartesian3.negate(offset, offset);\n                Cartesian3.add(intersection, offset, offsetPoint);\n                p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\n\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\n\n                p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\n                p2Attributes.nextPosition.values.push(nextPositions[i2 * 3], nextPositions[i2 * 3 + 1], nextPositions[i2 * 3 + 2]);\n                p2Attributes.nextPosition.values.push(nextPositions[i2 * 3 + 3], nextPositions[i2 * 3 + 4], nextPositions[i2 * 3 + 5]);\n\n                var ew0 = Cartesian2.fromArray(expandAndWidths, i0 * 2, cartesian2Scratch0);\n                var width = Math.abs(ew0.y);\n\n                p0Attributes.expandAndWidth.values.push(-1,  width, 1,  width);\n                p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\n                p2Attributes.expandAndWidth.values.push(-1,  width, 1,  width);\n                p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\n\n                var t = Cartesian3.magnitudeSquared(Cartesian3.subtract(intersection, p0, cartesian3Scratch3));\n                t /= Cartesian3.magnitudeSquared(Cartesian3.subtract(p2, p0, cartesian3Scratch3));\n\n                if (defined(colors)) {\n                    var c0 = Cartesian4.fromArray(colors, i0 * 4, cartesian4Scratch0);\n                    var c2 = Cartesian4.fromArray(colors, i2 * 4, cartesian4Scratch0);\n\n                    var r = CesiumMath.lerp(c0.x, c2.x, t);\n                    var g = CesiumMath.lerp(c0.y, c2.y, t);\n                    var b = CesiumMath.lerp(c0.z, c2.z, t);\n                    var a = CesiumMath.lerp(c0.w, c2.w, t);\n\n                    for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {\n                        p0Attributes.color.values.push(colors[j]);\n                    }\n                    p0Attributes.color.values.push(r, g, b, a);\n                    p0Attributes.color.values.push(r, g, b, a);\n                    p2Attributes.color.values.push(r, g, b, a);\n                    p2Attributes.color.values.push(r, g, b, a);\n                    for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {\n                        p2Attributes.color.values.push(colors[j]);\n                    }\n                }\n\n                if (defined(texCoords)) {\n                    var s0 = Cartesian2.fromArray(texCoords, i0 * 2, cartesian2Scratch0);\n                    var s3 = Cartesian2.fromArray(texCoords, (i + 3) * 2, cartesian2Scratch1);\n\n                    var sx = CesiumMath.lerp(s0.x, s3.x, t);\n\n                    for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {\n                        p0Attributes.st.values.push(texCoords[j]);\n                    }\n                    p0Attributes.st.values.push(sx, s0.y);\n                    p0Attributes.st.values.push(sx, s3.y);\n                    p2Attributes.st.values.push(sx, s0.y);\n                    p2Attributes.st.values.push(sx, s3.y);\n                    for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {\n                        p2Attributes.st.values.push(texCoords[j]);\n                    }\n                }\n\n                index = p0Attributes.position.values.length / 3 - 4;\n                p0Indices.push(index, index + 2, index + 1);\n                p0Indices.push(index + 1, index + 2, index + 3);\n\n                index = p2Attributes.position.values.length / 3 - 4;\n                p2Indices.push(index, index + 2, index + 1);\n                p2Indices.push(index + 1, index + 2, index + 3);\n            } else {\n                var currentAttributes;\n                var currentIndices;\n\n                if (p0.y < 0.0) {\n                    currentAttributes = westGeometry.attributes;\n                    currentIndices = westGeometry.indices;\n                } else {\n                    currentAttributes = eastGeometry.attributes;\n                    currentIndices = eastGeometry.indices;\n                }\n\n                currentAttributes.position.values.push(p0.x, p0.y, p0.z);\n                currentAttributes.position.values.push(p0.x, p0.y, p0.z);\n                currentAttributes.position.values.push(p2.x, p2.y, p2.z);\n                currentAttributes.position.values.push(p2.x, p2.y, p2.z);\n\n                for (j = i * 3; j < i * 3 + 4 * 3; ++j) {\n                    currentAttributes.prevPosition.values.push(prevPositions[j]);\n                    currentAttributes.nextPosition.values.push(nextPositions[j]);\n                }\n\n                for (j = i * 2; j < i * 2 + 4 * 2; ++j) {\n                    currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);\n                    if (defined(texCoords)) {\n                        currentAttributes.st.values.push(texCoords[j]);\n                    }\n                }\n\n                if (defined(colors)) {\n                    for (j = i * 4; j < i * 4 + 4 * 4; ++j) {\n                        currentAttributes.color.values.push(colors[j]);\n                    }\n                }\n\n                index = currentAttributes.position.values.length / 3 - 4;\n                currentIndices.push(index, index + 2, index + 1);\n                currentIndices.push(index + 1, index + 2, index + 3);\n            }\n        }\n\n        if (intersectionFound) {\n            updateAdjacencyAfterSplit(westGeometry);\n            updateAdjacencyAfterSplit(eastGeometry);\n        }\n\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n    }\n\n    /**\n     * Splits the instances's geometry, by introducing new vertices and indices,that\n     * intersect the International Date Line and Prime Meridian so that no primitives cross longitude\n     * -180/180 degrees.  This is not required for 3D drawing, but is required for\n     * correcting drawing in 2D and Columbus view.\n     *\n     * @private\n     *\n     * @param {GeometryInstance} instance The instance to modify.\n     * @returns {GeometryInstance} The modified <code>instance</code> argument, with it's geometry split at the International Date Line.\n     *\n     * @example\n     * instance = Cesium.GeometryPipeline.splitLongitude(instance);\n     */\n    GeometryPipeline.splitLongitude = function(instance) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(instance)) {\n            throw new DeveloperError('instance is required.');\n        }\n        //>>includeEnd('debug');\n\n        var geometry = instance.geometry;\n        var boundingSphere = geometry.boundingSphere;\n        if (defined(boundingSphere)) {\n            var minX = boundingSphere.center.x - boundingSphere.radius;\n            if (minX > 0 || BoundingSphere.intersectPlane(boundingSphere, Plane.ORIGIN_ZX_PLANE) !== Intersect.INTERSECTING) {\n                return instance;\n            }\n        }\n\n        if (geometry.geometryType !== GeometryType.NONE) {\n            switch (geometry.geometryType) {\n            case GeometryType.POLYLINES:\n                splitLongitudePolyline(instance);\n                break;\n            case GeometryType.TRIANGLES:\n                splitLongitudeTriangles(instance);\n                break;\n            case GeometryType.LINES:\n                splitLongitudeLines(instance);\n                break;\n            }\n        } else {\n            indexPrimitive(geometry);\n            if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\n                splitLongitudeTriangles(instance);\n            } else if (geometry.primitiveType === PrimitiveType.LINES) {\n                splitLongitudeLines(instance);\n            }\n        }\n\n        return instance;\n    };\nexport default GeometryPipeline;\n"],"names":["Cartesian3","Check","defined","Cartesian2","CesiumMath","defaultValue","DeveloperError","IndexDatatype","PrimitiveType","BoundingSphere","Geometry","GeometryAttribute","ComponentDatatype","Cartographic","GeographicProjection","EncodedCartesian3","scratchCartesian3","Matrix4","Matrix3","scratchCartesian2","AttributeCompression","Cartesian4","Plane","IntersectionTests","Intersect","GeometryType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAMI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,sBAAsB,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;IAC/D;IACA,QAAQC,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC,QAAQA,WAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAChC,QAAQA,WAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAChC,QAAQA,WAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAChC;AACA;IACA,QAAQ,IAAI,CAACC,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAIF,qBAAU,EAAE,CAAC;IACtC,SAAS;AACT;IACA;IACA,QAAQ,IAAI,EAAE,CAAC;IACf,QAAQ,IAAI,EAAE,CAAC;IACf,QAAQ,IAAI,EAAE,CAAC;IACf,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,KAAK,CAAC;AAClB;IACA,QAAQ,GAAG,CAACE,YAAO,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC3B,YAAY,IAAIC,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEC,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;IACb,YAAY,IAAIG,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEC,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;IACb,YAAY,IAAIG,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEC,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;AACb;IACA,YAAY,EAAE,GAAGG,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAChE,YAAY,EAAE,GAAGA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAChE,YAAY,EAAE,GAAGA,qBAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;AACnE;IACA,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,SAAS,MAAM;IACf,YAAY,IAAIH,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;IACb,YAAY,IAAIA,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;IACb,YAAY,IAAIA,qBAAU,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC3E,gBAAgB,OAAOJ,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnE,aAAa;AACb;IACA,YAAY,EAAE,GAAGA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAChE,YAAY,EAAE,GAAGA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;IAChE,YAAY,EAAE,GAAGA,qBAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,iBAAiB,CAAC,CAAC;AACnE;IACA,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,YAAY,KAAK,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3C,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;IACnD,QAAQ,MAAM,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;IACnD,QAAQ,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAC9C;IACA;IACA,QAAQ,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;IAC5B,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1B,SAAS;IACT,QAAQ,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;IAC5B,YAAY,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1B,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC7C,QAAQ,OAAO,MAAM,CAAC;IACtB;;ICxGI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,OAAO,GAAG,EAAE,CAAC;AACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,CAAC,aAAa,GAAG,SAAS,OAAO,EAAE;IAC9C,QAAQ,OAAO,GAAGK,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACtC,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,SAAS,GAAGA,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC5D;IACA;IACA,QAAQ,IAAI,CAACH,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,MAAM,IAAII,oBAAc,CAAC,sBAAsB,CAAC,CAAC;IAC7D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;AACxC;IACA;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE;IACpD,YAAY,MAAM,IAAIA,oBAAc,CAAC,6CAA6C,CAAC,CAAC;IACpF,SAAS;IACT,QAAQ,IAAI,YAAY,IAAI,CAAC,EAAE;IAC/B,YAAY,MAAM,IAAIA,oBAAc,CAAC,yCAAyC,CAAC,CAAC;IAChF,SAAS;IACT,QAAQ,IAAI,SAAS,GAAG,CAAC,EAAE;IAC3B,YAAY,MAAM,IAAIA,oBAAc,CAAC,qCAAqC,CAAC,CAAC;IAC5E,SAAS;IACT;AACA;IACA;IACA,QAAQ,IAAI,CAACJ,YAAO,CAAC,YAAY,CAAC,EAAE;IACpC,YAAY,YAAY,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IACpD,YAAY,OAAO,YAAY,GAAG,UAAU,EAAE;IAC9C,gBAAgB,IAAI,WAAW,GAAG,YAAY,EAAE;IAChD,oBAAoB,YAAY,GAAG,WAAW,CAAC;IAC/C,iBAAiB;IACjB,gBAAgB,EAAE,YAAY,CAAC;IAC/B,gBAAgB,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IACpD,aAAa;IACb,SAAS;AACT;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACpD,YAAY,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpC,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;IAC9B,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,EAAE;IAC9C,YAAY,IAAI,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;IAChE,gBAAgB,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACjD,gBAAgB,EAAE,CAAC,CAAC;IACpB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,KAAK,UAAU,GAAG,CAAC,CAAC,CAAC;IACtD,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,CAAC,OAAO,GAAG,SAAS,OAAO,EAAE;IACxC,QAAQ,OAAO,GAAGG,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACtC,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,SAAS,GAAGA,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC5D;IACA,QAAQ,IAAI,MAAM,CAAC;AACnB;IACA,QAAQ,SAAS,WAAW,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE;IAC9E,YAAY,OAAO,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;IACxC;IACA,gBAAgB,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACpD,gBAAgB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACtD;IACA,gBAAgB,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,GAAG,CAAC,EAAE;IACtD,oBAAoB,OAAO,CAAC,CAAC;IAC7B,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,OAAO,MAAM,GAAG,mBAAmB,EAAE;IACjD,gBAAgB,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,gBAAgB,GAAG,CAAC,EAAE;IAC3D,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,OAAO,MAAM,GAAG,CAAC,CAAC;IACtC,iBAAiB;IACjB,gBAAgB,EAAE,MAAM,CAAC;IACzB,aAAa;IACb,YAAY,OAAO,CAAC,CAAC,CAAC;IACtB,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE;IACvG,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACvB,YAAY,IAAI,CAAC,CAAC;IAClB,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACvB,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;IAC9B,YAAY,OAAO,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE;IAC/C,gBAAgB,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAC/C,gBAAgB,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE;IACtD,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAC1B,oBAAoB,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,KAAK,SAAS,EAAE;IAC/G,wBAAwB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;IAC1D,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC/C,wBAAwB,CAAC,GAAG,CAAC,CAAC;IAC9B,wBAAwB,CAAC,GAAG,KAAK,CAAC;IAClC,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,EAAE,SAAS,CAAC;IAC5B,aAAa;IACb,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IAC1B,gBAAgB,OAAO,WAAW,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpF,aAAa;IACb,YAAY,OAAO,CAAC,CAAC;IACrB,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAACH,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,MAAM,IAAII,oBAAc,CAAC,sBAAsB,CAAC,CAAC;IAC7D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;AACxC;IACA;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE;IACpD,YAAY,MAAM,IAAIA,oBAAc,CAAC,6CAA6C,CAAC,CAAC;IACpF,SAAS;IACT,QAAQ,IAAI,YAAY,IAAI,CAAC,EAAE;IAC/B,YAAY,MAAM,IAAIA,oBAAc,CAAC,yCAAyC,CAAC,CAAC;IAChF,SAAS;IACT,QAAQ,IAAI,SAAS,GAAG,CAAC,EAAE;IAC3B,YAAY,MAAM,IAAIA,oBAAc,CAAC,qCAAqC,CAAC,CAAC;IAC5E,SAAS;IACT;AACA;IACA;IACA,QAAQ,IAAI,mBAAmB,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IAChD,QAAQ,IAAI,QAAQ,GAAG,UAAU,CAAC;IAClC,QAAQ,IAAIJ,YAAO,CAAC,YAAY,CAAC,EAAE;IACnC,YAAY,mBAAmB,GAAG,YAAY,GAAG,CAAC,CAAC;IACnD,SAAS,MAAM;IACf,YAAY,OAAO,YAAY,GAAG,QAAQ,EAAE;IAC5C,gBAAgB,IAAI,WAAW,GAAG,mBAAmB,EAAE;IACvD,oBAAoB,mBAAmB,GAAG,WAAW,CAAC;IACtD,iBAAiB;IACjB,gBAAgB,EAAE,YAAY,CAAC;IAC/B,gBAAgB,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IACpD,aAAa;IACb,YAAY,IAAI,mBAAmB,KAAK,CAAC,CAAC,EAAE;IAC5C,gBAAgB,OAAO,CAAC,CAAC;IACzB,aAAa;IACb,YAAY,EAAE,mBAAmB,CAAC;IAClC,SAAS;AACT;IACA;IACA,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,EAAE,CAAC,EAAE,EAAE;IAClD,YAAY,QAAQ,CAAC,CAAC,CAAC,GAAG;IAC1B,gBAAgB,gBAAgB,GAAG,CAAC;IACpC,gBAAgB,SAAS,GAAG,CAAC;IAC7B,gBAAgB,eAAe,GAAG,EAAE;IACpC,aAAa,CAAC;IACd,SAAS;IACT,QAAQ,YAAY,GAAG,CAAC,CAAC;IACzB,QAAQ,IAAI,QAAQ,GAAG,CAAC,CAAC;IACzB,QAAQ,OAAO,YAAY,GAAG,QAAQ,EAAE;IACxC,YAAY,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3E,YAAY,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,gBAAgB,CAAC;IACjE,YAAY,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/E,YAAY,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC;IACrE,YAAY,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/E,YAAY,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC;IACrE,YAAY,EAAE,QAAQ,CAAC;IACvB,YAAY,YAAY,IAAI,CAAC,CAAC;IAC9B,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;AAClB;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;IAC9B,QAAQ,MAAM,GAAG,CAAC,CAAC;AACnB;IACA;IACA,QAAQ,IAAI,OAAO,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,OAAO,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,MAAM,CAAC;IACnB,QAAQ,IAAI,YAAY,CAAC;IACzB,QAAQ,IAAI,kBAAkB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,aAAa,GAAG,EAAE,CAAC;IAC/B,QAAQ,IAAI,YAAY,GAAG,UAAU,GAAG,CAAC,CAAC;IAC1C,QAAQ,IAAI,eAAe,GAAG,EAAE,CAAC;IACjC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;IAC3C,YAAY,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IACvC,SAAS;IACT,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;IACzB,YAAY,OAAO,GAAG,EAAE,CAAC;IACzB,YAAY,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,KAAK,GAAG,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC;IACxD,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;IAC7C,gBAAgB,QAAQ,GAAG,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;IAChD,oBAAoB,eAAe,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACrD,oBAAoB,YAAY,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClE,oBAAoB,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACjD;IACA,wBAAwB,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IACtD,wBAAwB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,wBAAwB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5C;IACA;IACA,wBAAwB,aAAa,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC;IAClE,wBAAwB,EAAE,kBAAkB,CAAC;AAC7C;IACA;IACA,wBAAwB,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjD,wBAAwB,EAAE,MAAM,CAAC,gBAAgB,CAAC;IAClD,wBAAwB,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,SAAS,IAAI,SAAS,EAAE;IAChE,4BAA4B,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;IACjD,4BAA4B,EAAE,CAAC,CAAC;IAChC,yBAAyB;IACzB,wBAAwB,EAAE,YAAY,CAAC;IACvC,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,YAAY,CAAC,GAAG,aAAa,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACtG,SAAS;AACT;IACA,QAAQ,OAAO,aAAa,CAAC;IAC7B,KAAK,CAAC;;ICzQF;IACJ;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC9B;IACA,IAAI,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACnD,QAAQ,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAC5B,QAAQ,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC5B;IACA,QAAQ,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAC5B,QAAQ,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC5B;IACA,QAAQ,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAC5B,QAAQ,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,SAAS,gBAAgB,CAAC,SAAS,EAAE;IACzC,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC;IACrC,QAAQ,IAAI,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;IACnC,QAAQ,IAAI,KAAK,GAAGK,2BAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAChE;IACA,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE;IACxD,YAAY,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxF,SAAS;AACT;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAI,SAAS,oBAAoB,CAAC,SAAS,EAAE;IAC7C,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC;IACrC,QAAQ,IAAI,KAAK,IAAI,CAAC,EAAE;IACxB,YAAY,IAAI,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,YAAY,IAAI,KAAK,GAAGA,2BAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpE;IACA,YAAY,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC;AAC1B;IACA,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE;IACzD,gBAAgB,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5F,aAAa;AACb;IACA,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;AACT;IACA,QAAQ,OAAO,IAAI,WAAW,EAAE,CAAC;IACjC,KAAK;AACL;IACA,IAAI,SAAS,kBAAkB,CAAC,SAAS,EAAE;IAC3C,QAAQ,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IAClC,YAAY,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7C,YAAY,IAAI,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,YAAY,IAAI,KAAK,GAAGA,2BAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpE;IACA,YAAY,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACpC,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC;IAC1B,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE;IACzD,gBAAgB,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChF,aAAa;AACb;IACA,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;AACT;IACA,QAAQ,OAAO,IAAI,WAAW,EAAE,CAAC;IACjC,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,WAAW,GAAG,SAAS,QAAQ,EAAE;IACtD;IACA,QAAQ,IAAI,CAACL,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IACvC,QAAQ,IAAIJ,YAAO,CAAC,OAAO,CAAC,EAAE;IAC9B,YAAY,QAAQ,QAAQ,CAAC,aAAa;IAC1C,gBAAgB,KAAKM,+BAAa,CAAC,SAAS;IAC5C,oBAAoB,QAAQ,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACjE,oBAAoB,MAAM;IAC1B,gBAAgB,KAAKA,+BAAa,CAAC,cAAc;IACjD,oBAAoB,QAAQ,CAAC,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;IACrE,oBAAoB,MAAM;IAC1B,gBAAgB,KAAKA,+BAAa,CAAC,YAAY;IAC/C,oBAAoB,QAAQ,CAAC,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACnE,oBAAoB,MAAM;IAC1B;IACA,gBAAgB;IAChB,oBAAoB,MAAM,IAAIF,oBAAc,CAAC,4EAA4E,CAAC,CAAC;IAC3H;IACA,aAAa;AACb;IACA,YAAY,QAAQ,CAAC,aAAa,GAAGE,+BAAa,CAAC,KAAK,CAAC;IACzD,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,4BAA4B,GAAG,SAAS,QAAQ,EAAE,aAAa,EAAE,MAAM,EAAE;IAC9F,QAAQ,aAAa,GAAGH,iBAAY,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AAC9D;IACA;IACA,QAAQ,IAAI,CAACH,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;IACpD,YAAY,MAAM,IAAII,oBAAc,CAAC,2CAA2C,CAAC,CAAC;IAClF,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;IAC1D,YAAY,MAAM,IAAII,oBAAc,CAAC,gGAAgG,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;IAC7J,SAAS;IACT;AACA;IACA,QAAQ,MAAM,GAAGD,iBAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC/C;IACA,QAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC5D,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IAChE,QAAQ,IAAI,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;AAC/C;IACA,QAAQ,IAAI,YAAY,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;AACjE;IACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,IAAI,CAAC,EAAE;IACrD,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7C,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACjD;IACA,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACrE,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IAC7E,YAAY,YAAY,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IAC7E,SAAS;AACT;IACA,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,EAAE,GAAG,QAAQ,CAAC,cAAc,CAAC;IACzC,QAAQ,IAAIH,YAAO,CAAC,EAAE,CAAC,EAAE;IACzB,YAAY,iBAAiB,GAAG,IAAIO,yBAAc,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;IAClF,SAAS;AACT;IACA,QAAQ,OAAO,IAAIC,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG;IACzB,gBAAgB,QAAQ,GAAG,IAAIC,mCAAiB,CAAC;IACjD,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IAChE,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,GAAG,YAAY;IACzC,iBAAiB,CAAC;IAClB,aAAa;IACb,YAAY,aAAa,GAAGJ,+BAAa,CAAC,KAAK;IAC/C,YAAY,cAAc,GAAG,iBAAiB;IAC9C,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,wBAAwB,GAAG,SAAS,QAAQ,EAAE;IACnE;IACA,QAAQ,IAAI,CAACN,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA;IACA;IACA,QAAQ,IAAI,SAAS,GAAG;IACxB,YAAY,UAAU;IACtB,YAAY,cAAc;IAC1B,YAAY,aAAa;AACzB;IACA;IACA,YAAY,gBAAgB;IAC5B,YAAY,eAAe;IAC3B,YAAY,gBAAgB;IAC5B,YAAY,eAAe;AAC3B;IACA;IACA,YAAY,WAAW;AACvB;IACA;IACA,YAAY,QAAQ;IACpB,YAAY,IAAI;IAChB,YAAY,SAAS;IACrB,YAAY,WAAW;AACvB;IACA;IACA,YAAY,kBAAkB;AAC9B;IACA;IACA,YAAY,sBAAsB;IAClC,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,OAAO,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;AACnC;IACA;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAClC,YAAY,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACxC;IACA,YAAY,IAAIJ,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE;IAC/C,gBAAgB,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;IACxC,aAAa;IACb,SAAS;AACT;IACA;IACA,QAAQ,KAAK,IAAI,IAAI,IAAI,UAAU,EAAE;IACrC,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;IAC9E,gBAAgB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;IACpC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,wBAAwB,GAAG,SAAS,QAAQ,EAAE;IACnE;IACA,QAAQ,IAAI,CAACA,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,WAAW,GAAGI,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AACrE;IACA,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IACvC,QAAQ,IAAIR,YAAO,CAAC,OAAO,CAAC,EAAE;IAC9B,YAAY,IAAI,2BAA2B,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;IAC1E,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IACnD,gBAAgB,2BAA2B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,aAAa;AACb;IACA;IACA,YAAY,IAAI,SAAS,GAAG,OAAO,CAAC;IACpC,YAAY,IAAI,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9C,YAAY,IAAI,UAAU,GAAGK,2BAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AACrF;IACA,YAAY,IAAI,aAAa,GAAG,CAAC,CAAC;IAClC,YAAY,IAAI,cAAc,GAAG,CAAC,CAAC;IACnC,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;IAC9B,YAAY,IAAI,SAAS,CAAC;IAC1B,YAAY,OAAO,aAAa,GAAG,UAAU,EAAE;IAC/C,gBAAgB,SAAS,GAAG,2BAA2B,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;IAClF,gBAAgB,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;IACtC,oBAAoB,UAAU,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;IAC3D,iBAAiB,MAAM;IACvB,oBAAoB,SAAS,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IACzD,oBAAoB,2BAA2B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;AACvE;IACA,oBAAoB,UAAU,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;IAC3D,oBAAoB,EAAE,SAAS,CAAC;IAChC,iBAAiB;IACjB,gBAAgB,EAAE,aAAa,CAAC;IAChC,gBAAgB,EAAE,cAAc,CAAC;IACjC,aAAa;IACb,YAAY,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC;AAC1C;IACA;IACA,YAAY,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACjD,YAAY,MAAM,IAAI,QAAQ,IAAI,UAAU,EAAE;IAC9C,gBAAgB,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC;IACvD,wBAAwBL,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrD,wBAAwBA,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;AAC9D;IACA,oBAAoB,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;IACzD,oBAAoB,IAAI,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC;IACtD,oBAAoB,IAAI,cAAc,GAAG,CAAC,CAAC;IAC3C,oBAAoB,IAAI,aAAa,GAAG,SAAS,CAAC,sBAAsB,CAAC;IACzE,oBAAoB,IAAI,WAAW,GAAGU,mCAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,EAAE,SAAS,GAAG,aAAa,CAAC,CAAC;IACjI,oBAAoB,OAAO,cAAc,GAAG,WAAW,EAAE;IACzD,wBAAwB,IAAI,IAAI,GAAG,2BAA2B,CAAC,cAAc,CAAC,CAAC;IAC/E,wBAAwB,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;IACzC,4BAA4B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;IACpE,gCAAgC,WAAW,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,aAAa,GAAG,cAAc,GAAG,CAAC,CAAC,CAAC;IACvH,6BAA6B;IAC7B,yBAAyB;IACzB,wBAAwB,EAAE,cAAc,CAAC;IACzC,qBAAqB;IACrB,oBAAoB,SAAS,CAAC,MAAM,GAAG,WAAW,CAAC;IACnD,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,yBAAyB,GAAG,SAAS,QAAQ,EAAE,aAAa,EAAE;IACnF;IACA,QAAQ,IAAI,CAACV,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IACvC,QAAQ,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAKE,+BAAa,CAAC,SAAS,MAAMN,YAAO,CAAC,OAAO,CAAC,CAAC,EAAE;IACxF,YAAY,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;IAC5C,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAClD,gBAAgB,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE;IAC/C,oBAAoB,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,iBAAiB;IACjB,aAAa;IACb,YAAY,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAC/C,gBAAgB,OAAO,GAAG,OAAO;IACjC,gBAAgB,YAAY,GAAG,YAAY;IAC3C,gBAAgB,SAAS,GAAG,aAAa;IACzC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,SAAS,0BAA0B,CAAC,UAAU,EAAE;IACpD,QAAQ,IAAI,aAAa,GAAG,EAAE,CAAC;AAC/B;IACA,QAAQ,MAAM,IAAI,SAAS,IAAI,UAAU,EAAE;IAC3C,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC;IACpD,oBAAoBA,YAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAClD,oBAAoBA,YAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE;AAC3D;IACA,gBAAgB,IAAI,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IACjD,gBAAgB,aAAa,CAAC,SAAS,CAAC,GAAG,IAAIS,mCAAiB,CAAC;IACjE,oBAAoB,iBAAiB,GAAG,IAAI,CAAC,iBAAiB;IAC9D,oBAAoB,sBAAsB,GAAG,IAAI,CAAC,sBAAsB;IACxE,oBAAoB,SAAS,GAAG,IAAI,CAAC,SAAS;IAC9C,oBAAoB,MAAM,GAAG,EAAE;IAC/B,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,aAAa,CAAC;IAC7B,KAAK;AACL;IACA,IAAI,SAAS,UAAU,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,KAAK,EAAE;IACxE,QAAQ,MAAM,IAAI,SAAS,IAAI,gBAAgB,EAAE;IACjD,YAAY,IAAI,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC;IAC1D,oBAAoBT,YAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACxD,oBAAoBA,YAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE;AACjE;IACA,gBAAgB,IAAI,IAAI,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;AACvD;IACA,gBAAgB,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,sBAAsB,EAAE,EAAE,CAAC,EAAE;IACvE,oBAAoB,qBAAqB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,CAAC,CAAC;IACzH,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,yBAAyB,GAAG,SAAS,QAAQ,EAAE;IACpE;IACA,QAAQ,IAAI,CAACA,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;IACtC,aAAa,CAAC,QAAQ,CAAC,aAAa,KAAKM,+BAAa,CAAC,SAAS;IAChE,cAAc,QAAQ,CAAC,aAAa,KAAKA,+BAAa,CAAC,KAAK,CAAC;IAC7D,cAAc,QAAQ,CAAC,aAAa,KAAKA,+BAAa,CAAC,MAAM,CAAC,CAAC,EAAE;IACjE,YAAY,MAAM,IAAIF,oBAAc,CAAC,6GAA6G,CAAC,CAAC;IACpJ,SAAS;IACT;AACA;IACA,QAAQ,IAAI,UAAU,GAAG,EAAE,CAAC;AAC5B;IACA;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAGI,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAC1E,QAAQ,IAAIR,YAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,gBAAgB,IAAIE,gBAAU,CAAC,oBAAoB,CAAC,EAAE;IAChG,YAAY,IAAI,aAAa,GAAG,EAAE,CAAC;IACnC,YAAY,IAAI,UAAU,GAAG,EAAE,CAAC;IAChC,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,IAAI,aAAa,GAAG,0BAA0B,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAChF;IACA,YAAY,IAAI,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;IACnD,YAAY,IAAI,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC;AACzD;IACA,YAAY,IAAI,mBAAmB,CAAC;AACpC;IACA,YAAY,IAAI,QAAQ,CAAC,aAAa,KAAKI,+BAAa,CAAC,SAAS,EAAE;IACpE,gBAAgB,mBAAmB,GAAG,CAAC,CAAC;IACxC,aAAa,MAAM,IAAI,QAAQ,CAAC,aAAa,KAAKA,+BAAa,CAAC,KAAK,EAAE;IACvE,gBAAgB,mBAAmB,GAAG,CAAC,CAAC;IACxC,aAAa,MAAM,IAAI,QAAQ,CAAC,aAAa,KAAKA,+BAAa,CAAC,MAAM,EAAE;IACxE,gBAAgB,mBAAmB,GAAG,CAAC,CAAC;IACxC,aAAa;AACb;IACA,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,IAAI,mBAAmB,EAAE;IAC5E,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,EAAE,EAAE,CAAC,EAAE;IAC9D,oBAAoB,IAAI,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,oBAAoB,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC7C,oBAAoB,IAAI,CAACN,YAAO,CAAC,CAAC,CAAC,EAAE;IACrC,wBAAwB,CAAC,GAAG,YAAY,EAAE,CAAC;IAC3C,wBAAwB,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7C,wBAAwB,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAC1E,qBAAqB;IACrB,oBAAoB,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,GAAG,mBAAmB,IAAIE,gBAAU,CAAC,oBAAoB,EAAE;IAC3F,oBAAoB,UAAU,CAAC,IAAI,CAAC,IAAIM,0BAAQ,CAAC;IACjD,wBAAwB,UAAU,GAAG,aAAa;IAClD,wBAAwB,OAAO,GAAG,UAAU;IAC5C,wBAAwB,aAAa,GAAG,QAAQ,CAAC,aAAa;IAC9D,wBAAwB,cAAc,GAAG,QAAQ,CAAC,cAAc;IAChE,wBAAwB,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB;IACpE,qBAAqB,CAAC,CAAC,CAAC;AACxB;IACA;IACA,oBAAoB,aAAa,GAAG,EAAE,CAAC;IACvC,oBAAoB,UAAU,GAAG,EAAE,CAAC;IACpC,oBAAoB,YAAY,GAAG,CAAC,CAAC;IACrC,oBAAoB,aAAa,GAAG,0BAA0B,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACpF,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;IACzC,gBAAgB,UAAU,CAAC,IAAI,CAAC,IAAIA,0BAAQ,CAAC;IAC7C,oBAAoB,UAAU,GAAG,aAAa;IAC9C,oBAAoB,OAAO,GAAG,UAAU;IACxC,oBAAoB,aAAa,GAAG,QAAQ,CAAC,aAAa;IAC1D,oBAAoB,cAAc,GAAG,QAAQ,CAAC,cAAc;IAC5D,oBAAoB,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB;IAChE,iBAAiB,CAAC,CAAC,CAAC;IACpB,aAAa;IACb,SAAS,MAAM;IACf;IACA,YAAY,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,SAAS;AACT;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK,CAAC;AACN;IACA,IAAI,IAAI,4BAA4B,GAAG,IAAIV,qBAAU,EAAE,CAAC;IACxD,IAAI,IAAI,8BAA8B,GAAG,IAAIa,uBAAY,EAAE,CAAC;AAC5D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,WAAW,GAAG,SAAS,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE;IACnH;IACA,QAAQ,IAAI,CAACX,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,aAAa,CAAC,EAAE;IACrC,YAAY,MAAM,IAAII,oBAAc,CAAC,4BAA4B,CAAC,CAAC;IACnE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,eAAe,CAAC,EAAE;IACvC,YAAY,MAAM,IAAII,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACrE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,eAAe,CAAC,EAAE;IACvC,YAAY,MAAM,IAAII,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACrE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;IAC1D,YAAY,MAAM,IAAII,oBAAc,CAAC,oEAAoE,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;IACjI,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,iBAAiB,KAAKM,mCAAiB,CAAC,MAAM,EAAE;IAC/F,YAAY,MAAM,IAAIN,oBAAc,CAAC,mEAAmE,CAAC,CAAC;IAC1G,SAAS;IACT;AACA;IACA,QAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC3D,QAAQ,UAAU,GAAG,CAACJ,YAAO,CAAC,UAAU,CAAC,IAAI,UAAU,GAAG,IAAIY,+BAAoB,EAAE,CAAC;IACrF,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;AAC7C;IACA;IACA,QAAQ,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC;IACxC,QAAQ,IAAI,eAAe,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChE,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AACtB;IACA,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACtD,YAAY,IAAI,KAAK,GAAGd,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,4BAA4B,CAAC,CAAC;AACxF;IACA,YAAY,IAAI,MAAM,GAAG,SAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,8BAA8B,CAAC,CAAC;IAClG;IACA,YAAY,IAAI,CAACE,YAAO,CAAC,MAAM,CAAC,EAAE;IAClC,gBAAgB,MAAM,IAAII,oBAAc,CAAC,2BAA2B,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;IAC/H,aAAa;IACb;AACA;IACA,YAAY,IAAI,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,4BAA4B,CAAC,CAAC;AAC3F;IACA,YAAY,eAAe,CAAC,KAAK,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IACzD,YAAY,eAAe,CAAC,KAAK,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IACzD,YAAY,eAAe,CAAC,KAAK,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IACzD,SAAS;AACT;IACA;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,SAAS,CAAC;AACzD;IACA;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,IAAIK,mCAAiB,CAAC;IACrE,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IACxD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,eAAe;IACpC,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAClD;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,aAAa,GAAG;IACxB,QAAQ,IAAI,GAAG,GAAG;IAClB,QAAQ,GAAG,GAAG,GAAG;IACjB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,eAAe,GAAG,SAAS,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,gBAAgB,EAAE;IAC9G;IACA,QAAQ,IAAI,CAACV,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,aAAa,CAAC,EAAE;IACrC,YAAY,MAAM,IAAII,oBAAc,CAAC,4BAA4B,CAAC,CAAC;IACnE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,iBAAiB,CAAC,EAAE;IACzC,YAAY,MAAM,IAAII,oBAAc,CAAC,gCAAgC,CAAC,CAAC;IACvE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,gBAAgB,CAAC,EAAE;IACxC,YAAY,MAAM,IAAII,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;IAC1D,YAAY,MAAM,IAAII,oBAAc,CAAC,oEAAoE,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;IACjI,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,iBAAiB,KAAKM,mCAAiB,CAAC,MAAM,EAAE;IAC/F,YAAY,MAAM,IAAIN,oBAAc,CAAC,mEAAmE,CAAC,CAAC;IAC1G,SAAS;IACT;AACA;IACA,QAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC3D,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IACnC,QAAQ,IAAI,UAAU,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IAClD,QAAQ,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AACjD;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAYS,mCAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;IAC/D,YAAY,UAAU,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC;IAC/C,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC;IAC7C,SAAS;AACT;IACA,QAAQ,IAAI,sBAAsB,GAAG,SAAS,CAAC,sBAAsB,CAAC;AACtE;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,iBAAiB,CAAC,GAAG,IAAIJ,mCAAiB,CAAC;IACvE,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,YAAY,MAAM,GAAG,UAAU;IAC/B,SAAS,CAAC,CAAC;IACX,QAAQ,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,IAAID,mCAAiB,CAAC;IACtE,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,sBAAsB;IAC3D,YAAY,MAAM,GAAG,SAAS;IAC9B,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAClD;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,IAAII,mBAAiB,GAAG,IAAIhB,qBAAU,EAAE,CAAC;AAC7C;IACA,IAAI,SAAS,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE;IAC/C,QAAQ,IAAIE,YAAO,CAAC,SAAS,CAAC,EAAE;IAChC,YAAY,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAC1C,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IACvC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAChD,gBAAgBF,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAEgB,mBAAiB,CAAC,CAAC;IAChE,gBAAgBC,kBAAO,CAAC,eAAe,CAAC,MAAM,EAAED,mBAAiB,EAAEA,mBAAiB,CAAC,CAAC;IACtF,gBAAgBhB,qBAAU,CAAC,IAAI,CAACgB,mBAAiB,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC9D,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE;IAChD,QAAQ,IAAId,YAAO,CAAC,SAAS,CAAC,EAAE;IAChC,YAAY,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAC1C,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IACvC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAChD,gBAAgBF,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAEgB,mBAAiB,CAAC,CAAC;IAChE,gBAAgBE,kBAAO,CAAC,gBAAgB,CAAC,MAAM,EAAEF,mBAAiB,EAAEA,mBAAiB,CAAC,CAAC;IACvF,gBAAgBA,mBAAiB,GAAGhB,qBAAU,CAAC,SAAS,CAACgB,mBAAiB,EAAEA,mBAAiB,CAAC,CAAC;IAC/F,gBAAgBhB,qBAAU,CAAC,IAAI,CAACgB,mBAAiB,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC9D,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,gBAAgB,GAAG,IAAIC,kBAAO,EAAE,CAAC;IACzC,IAAI,IAAI,YAAY,GAAG,IAAIC,kBAAO,EAAE,CAAC;AACrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,2BAA2B,GAAG,SAAS,QAAQ,EAAE;IACtE;IACA,QAAQ,IAAI,CAAChB,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;AAC/C;IACA,QAAQ,IAAIW,kBAAO,CAAC,MAAM,CAAC,WAAW,EAAEA,kBAAO,CAAC,QAAQ,CAAC,EAAE;IAC3D;IACA,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;AACtD;IACA;IACA,QAAQ,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IACzD,QAAQ,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IAC7D,QAAQ,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;AAC7D;IACA,QAAQ,IAAI,CAACf,YAAO,CAAC,UAAU,CAAC,MAAM,CAAC;IACvC,aAAaA,YAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACzC,aAAaA,YAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE;AAC7C;IACA,YAAYe,kBAAO,CAAC,OAAO,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;IAC3D,YAAYA,kBAAO,CAAC,SAAS,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IAClE,YAAYA,kBAAO,CAAC,UAAU,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;AAC/D;IACA,YAAY,eAAe,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IAC7D,YAAY,eAAe,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IAC9D,YAAY,eAAe,CAAC,YAAY,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;IAChE,SAAS;AACT;IACA,QAAQ,IAAI,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC;IAC9D,QAAQ,IAAIf,YAAO,CAAC,cAAc,CAAC,EAAE;IACrC,YAAY,QAAQ,CAAC,QAAQ,CAAC,cAAc,GAAGO,yBAAc,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IACrH,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,WAAW,GAAGQ,kBAAO,CAAC,KAAK,CAACA,kBAAO,CAAC,QAAQ,CAAC,CAAC;AAC/D;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,SAAS,6BAA6B,CAAC,SAAS,EAAE,YAAY,EAAE;IACpE,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AACtC;IACA,QAAQ,IAAI,yBAAyB,GAAG,EAAE,CAAC;AAC3C;IACA,QAAQ,IAAI,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC;IAChE,QAAQ,IAAI,IAAI,CAAC;AACjB;IACA,QAAQ,KAAK,IAAI,IAAI,WAAW,EAAE;IAClC,YAAY,IAAI,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC;IAChD,oBAAoBf,YAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9C,oBAAoBA,YAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;AACvD;IACA,gBAAgB,IAAI,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAClD,gBAAgB,IAAI,kBAAkB,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;IACjE,gBAAgB,IAAI,eAAe,GAAG,IAAI,CAAC;AAC3C;IACA;IACA,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACjD,oBAAoB,IAAI,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACrF;IACA,oBAAoB,IAAI,CAAC,CAACA,YAAO,CAAC,cAAc,CAAC;IACjD,yBAAyB,SAAS,CAAC,iBAAiB,KAAK,cAAc,CAAC,iBAAiB,CAAC;IAC1F,yBAAyB,SAAS,CAAC,sBAAsB,KAAK,cAAc,CAAC,sBAAsB,CAAC;IACpG,yBAAyB,SAAS,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,CAAC,EAAE;AAC5E;IACA,wBAAwB,eAAe,GAAG,KAAK,CAAC;IAChD,wBAAwB,MAAM;IAC9B,qBAAqB;AACrB;IACA,oBAAoB,kBAAkB,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC;IACvE,iBAAiB;AACjB;IACA,gBAAgB,IAAI,eAAe,EAAE;IACrC,oBAAoB,yBAAyB,CAAC,IAAI,CAAC,GAAG,IAAIS,mCAAiB,CAAC;IAC5E,wBAAwB,iBAAiB,GAAG,SAAS,CAAC,iBAAiB;IACvE,wBAAwB,sBAAsB,GAAG,SAAS,CAAC,sBAAsB;IACjF,wBAAwB,SAAS,GAAG,SAAS,CAAC,SAAS;IACvD,wBAAwB,MAAM,GAAGC,mCAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;IACpH,qBAAqB,CAAC,CAAC;IACvB,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,yBAAyB,CAAC;IACzC,KAAK;AACL;IACA,IAAI,IAAI,WAAW,GAAG,IAAIZ,qBAAU,EAAE,CAAC;AACvC;IACA,IAAI,SAAS,iBAAiB,CAAC,SAAS,EAAE,YAAY,EAAE;IACxD,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AACtC;IACA,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;IACzC,QAAQ,IAAI,WAAW,IAAIE,YAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACxE,QAAQ,IAAI,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC;AACrE;IACA;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACrC,YAAY,IAAI,CAACe,kBAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE;IAC9D,gBAAgB,MAAM,IAAIX,oBAAc,CAAC,+CAA+C,CAAC,CAAC;IAC1F,aAAa;IACb,YAAY,IAAI,CAACJ,YAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,WAAW,EAAE;IAC/E,gBAAgB,MAAM,IAAII,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IAC1G,aAAa;IACb,YAAY,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,aAAa,KAAK,aAAa,EAAE;IAC5E,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,2DAA2D,CAAC,CAAC;IACtG,aAAa;IACb,SAAS;IACT;AACA;IACA;IACA,QAAQ,IAAI,UAAU,GAAG,6BAA6B,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAChF,QAAQ,IAAI,MAAM,CAAC;IACnB,QAAQ,IAAI,YAAY,CAAC;IACzB,QAAQ,IAAI,kBAAkB,CAAC;AAC/B;IACA;IACA,QAAQ,KAAK,IAAI,IAAI,UAAU,EAAE;IACjC,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;IACjD,gBAAgB,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;AACjD;IACA,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACtB,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IAC7C,oBAAoB,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IACtF,oBAAoB,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC;AAC7D;IACA,oBAAoB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,EAAE,EAAE,CAAC,EAAE;IAC7D,wBAAwB,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IACtD,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA;IACA,QAAQ,IAAI,OAAO,CAAC;AACpB;IACA,QAAQ,IAAI,WAAW,EAAE;IACzB,YAAY,IAAI,eAAe,GAAG,CAAC,CAAC;IACpC,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,gBAAgB,eAAe,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7E,aAAa;AACb;IACA,YAAY,IAAI,gBAAgB,GAAGI,0BAAQ,CAAC,uBAAuB,CAAC,IAAIA,0BAAQ,CAAC;IACjF,gBAAgB,UAAU,GAAG,UAAU;IACvC,gBAAgB,aAAa,GAAGF,+BAAa,CAAC,MAAM;IACpD,aAAa,CAAC,CAAC,CAAC;IAChB,YAAY,IAAI,WAAW,GAAGD,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;AAChG;IACA,YAAY,IAAI,UAAU,GAAG,CAAC,CAAC;IAC/B,YAAY,IAAI,MAAM,GAAG,CAAC,CAAC;AAC3B;IACA,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,gBAAgB,IAAI,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;IACvE,gBAAgB,IAAI,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC;AAC5D;IACA,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACvD,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAG,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1E,iBAAiB;AACjB;IACA,gBAAgB,MAAM,IAAIG,0BAAQ,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;IACvF,aAAa;AACb;IACA,YAAY,OAAO,GAAG,WAAW,CAAC;IAClC,SAAS;AACT;IACA;IACA,QAAQ,IAAI,MAAM,GAAG,IAAIV,qBAAU,EAAE,CAAC;IACtC,QAAQ,IAAI,MAAM,GAAG,GAAG,CAAC;IACzB,QAAQ,IAAI,EAAE,CAAC;AACf;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACrC,YAAY,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC;IAC3D,YAAY,IAAI,CAACE,YAAO,CAAC,EAAE,CAAC,EAAE;IAC9B;IACA,gBAAgB,MAAM,GAAG,SAAS,CAAC;IACnC,gBAAgB,MAAM;IACtB,aAAa;AACb;IACA,YAAYF,qBAAU,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACtD,SAAS;AACT;IACA,QAAQ,IAAIE,YAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAYF,qBAAU,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9D;IACA,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,gBAAgB,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC;IAC/D,gBAAgB,IAAI,UAAU,GAAGA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC;AACvH;IACA,gBAAgB,IAAI,UAAU,GAAG,MAAM,EAAE;IACzC,oBAAoB,MAAM,GAAG,UAAU,CAAC;IACxC,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,IAAIU,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG,UAAU;IACnC,YAAY,OAAO,GAAG,OAAO;IAC7B,YAAY,aAAa,GAAG,aAAa;IACzC,YAAY,cAAc,GAAG,CAACR,YAAO,CAAC,MAAM,CAAC,IAAI,IAAIO,yBAAc,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,SAAS;IAC/F,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,gBAAgB,GAAG,SAAS,SAAS,EAAE;IAC5D;IACA,QAAQ,IAAI,CAAC,CAACP,YAAO,CAAC,SAAS,CAAC,MAAM,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC7D,YAAY,MAAM,IAAII,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IACtG,SAAS;IACT;AACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAClC,QAAQ,IAAI,qBAAqB,GAAG,EAAE,CAAC;IACvC,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACxC;IACA,YAAY,IAAIJ,YAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAC5C,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,aAAa,MAAM,IAAIA,YAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAIA,YAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;IAC7G,gBAAgB,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,EAAE,CAAC;IAC5B,QAAQ,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;IACzC,YAAY,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC;IAC7E,SAAS;AACT;IACA,QAAQ,IAAI,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE;IAC9C,YAAY,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAChG,YAAY,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAChG,SAAS;AACT;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK,CAAC;AACN;IACA,IAAI,IAAI,MAAM,GAAG,IAAIF,qBAAU,EAAE,CAAC;IAClC,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,aAAa,GAAG,SAAS,QAAQ,EAAE;IACxD;IACA,QAAQ,IAAI,CAACE,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAACA,YAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IACrG,YAAY,MAAM,IAAII,oBAAc,CAAC,kDAAkD,CAAC,CAAC;IACzF,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;IACxC,YAAY,MAAM,IAAII,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9E,YAAY,MAAM,IAAIA,oBAAc,CAAC,wEAAwE,CAAC,CAAC;IAC/G,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,aAAa,KAAKE,+BAAa,CAAC,SAAS,EAAE;IAChE,YAAY,MAAM,IAAIF,oBAAc,CAAC,yDAAyD,CAAC,CAAC;IAChG,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IACvC,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IAClD,QAAQ,IAAI,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAChE,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;IACxC,QAAQ,IAAI,gBAAgB,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;IACtD,QAAQ,IAAI,kBAAkB,GAAG,IAAI,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC3D,QAAQ,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;IAClD,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IAC3C,YAAY,gBAAgB,CAAC,CAAC,CAAC,GAAG;IAClC,gBAAgB,WAAW,GAAG,CAAC;IAC/B,gBAAgB,KAAK,GAAG,CAAC;IACzB,gBAAgB,YAAY,GAAG,CAAC;IAChC,aAAa,CAAC;IACd,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7B;IACA,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACrC;IACA,YAAY,gBAAgB,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IACzC,YAAY,gBAAgB,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IACzC,YAAY,gBAAgB,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;AACzC;IACA,YAAYN,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC5C,YAAYA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC5C,YAAY,kBAAkB,CAAC,CAAC,CAAC,GAAGA,qBAAU,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAIA,qBAAU,EAAE,CAAC,CAAC;IAC/E,YAAY,CAAC,EAAE,CAAC;IAChB,SAAS;AACT;IACA,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IAC5B,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IAC1C,YAAY,gBAAgB,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC;IAC3D,YAAY,WAAW,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACrD,SAAS;AACT;IACA,QAAQ,CAAC,GAAG,CAAC,CAAC;IACd,QAAQ,IAAI,gBAAgB,CAAC;IAC7B,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,YAAY,IAAI,KAAK,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAAgB,CAAC,YAAY,CAAC;IACrF,YAAY,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,YAAY,gBAAgB,CAAC,YAAY,EAAE,CAAC;AAC5C;IACA,YAAY,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,KAAK,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAAgB,CAAC,YAAY,CAAC;IACjF,YAAY,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,YAAY,gBAAgB,CAAC,YAAY,EAAE,CAAC;AAC5C;IACA,YAAY,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,KAAK,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAAgB,CAAC,YAAY,CAAC;IACjF,YAAY,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,YAAY,gBAAgB,CAAC,YAAY,EAAE,CAAC;AAC5C;IACA,YAAY,CAAC,EAAE,CAAC;IAChB,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,GAAG,IAAI,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IAC7D,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IAC1C,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACnD,YAAYA,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtD,YAAY,IAAI,gBAAgB,CAAC,KAAK,GAAG,CAAC,EAAE;IAC5C,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;IAC7D,oBAAoBA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACxH,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAIA,qBAAU,CAAC,aAAa,CAACA,qBAAU,CAAC,IAAI,EAAE,MAAM,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IAC7F,oBAAoBJ,qBAAU,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAC9G,iBAAiB;IACjB,aAAa;AACb;IACA;IACA,YAAY,IAAIA,qBAAU,CAAC,aAAa,CAACA,qBAAU,CAAC,IAAI,EAAE,MAAM,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IACzF;IACA,gBAAgB,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,aAAa;AACb;IACA,YAAYJ,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACjD,YAAY,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACxC,YAAY,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC5C,YAAY,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC5C,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,IAAIW,mCAAiB,CAAC;IAC3D,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,YAAY;IACjC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,aAAa,GAAG,IAAIZ,qBAAU,EAAE,CAAC;IACzC,IAAI,IAAI,WAAW,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACvC,IAAI,IAAI,QAAQ,GAAG,IAAIA,qBAAU,EAAE,CAAC;AACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,0BAA0B,GAAG,SAAS,QAAQ,EAAE;IACrE;IACA,QAAQ,IAAI,CAACE,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;AACvC;IACA;IACA,QAAQ,IAAI,CAACJ,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAACA,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IACnF,YAAY,MAAM,IAAII,oBAAc,CAAC,kDAAkD,CAAC,CAAC;IACzF,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAACA,YAAO,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;IAC/E,YAAY,MAAM,IAAII,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACvF,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAACA,YAAO,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;IACvE,YAAY,MAAM,IAAII,oBAAc,CAAC,4CAA4C,CAAC,CAAC;IACnF,SAAS;IACT,QAAQ,IAAI,CAACJ,YAAO,CAAC,OAAO,CAAC,EAAE;IAC/B,YAAY,MAAM,IAAII,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5D,YAAY,MAAM,IAAIA,oBAAc,CAAC,wEAAwE,CAAC,CAAC;IAC/G,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,aAAa,KAAKE,+BAAa,CAAC,SAAS,EAAE;IAChE,YAAY,MAAM,IAAIF,oBAAc,CAAC,yDAAyD,CAAC,CAAC;IAChG,SAAS;IACT;AACA;IACA,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC3D,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;IACxD,QAAQ,IAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC;AAC/C;IACA,QAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IACzE,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;IACxC,QAAQ,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AAC9C;IACA,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC3C,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,SAAS;AACT;IACA,QAAQ,IAAI,GAAG,CAAC;IAChB,QAAQ,IAAI,GAAG,CAAC;IAChB,QAAQ,IAAI,GAAG,CAAC;IAChB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,YAAY,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACzB,YAAY,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACzB,YAAY,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACzB,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7B;IACA,YAAY,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACnC,YAAY,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACvC,YAAY,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACvC;IACA,YAAY,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAC7B,YAAY,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACjC,YAAY,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACtC,YAAY,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACtC;IACA,YAAY,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACtE,YAAY,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;IACpF,YAAY,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;IAC5F,YAAY,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;AAC5F;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;IAC/B,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;IACnC,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;AACnC;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;IAC/B,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;IACnC,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;AACnC;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;IAC/B,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;IACnC,YAAY,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC;IACnC,SAAS;AACT;IACA,QAAQ,IAAI,aAAa,GAAG,IAAI,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IAC9D,QAAQ,IAAI,eAAe,GAAG,IAAI,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AAChE;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IAC1C,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IACxB,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;IAC1B,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1B;IACA,YAAY,IAAI,CAAC,GAAGN,qBAAU,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,CAAC,CAAC;IACtE,YAAY,IAAI,CAAC,GAAGA,qBAAU,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC9D,YAAY,IAAI,MAAM,GAAGA,qBAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,YAAYA,qBAAU,CAAC,gBAAgB,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IAChE,YAAYA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5E;IACA,YAAY,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,YAAY,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,YAAY,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC;IACA,YAAYA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/D;IACA,YAAY,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,OAAO,GAAG,IAAIW,mCAAiB,CAAC;IAC5D,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,aAAa;IAClC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,SAAS,GAAG,IAAID,mCAAiB,CAAC;IAC9D,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,eAAe;IACpC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,IAAIO,mBAAiB,GAAG,IAAIhB,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,SAAS,GAAG,IAAIH,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,aAAa,GAAG,IAAIG,qBAAU,EAAE,CAAC;IACzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,gBAAgB,GAAG,SAAS,QAAQ,EAAE;IAC3D;IACA,QAAQ,IAAI,CAACD,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;IACpE,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAIJ,YAAO,CAAC,gBAAgB,CAAC,EAAE;IACvC;IACA,YAAY,IAAI,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,CAAC;IAC5D,YAAY,WAAW,GAAG,iBAAiB,CAAC,MAAM,GAAG,GAAG,CAAC;IACzD,YAAY,IAAI,oBAAoB,GAAG,IAAI,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AACzE;IACA,YAAY,IAAI,EAAE,GAAG,CAAC,CAAC;IACvB,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;IAC9C,gBAAgBF,qBAAU,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;IAC5E,gBAAgB,IAAIA,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAEA,qBAAU,CAAC,IAAI,CAAC,EAAE;IACnE,oBAAoB,EAAE,IAAI,CAAC,CAAC;IAC5B,oBAAoB,SAAS;IAC7B,iBAAiB;IACjB,gBAAgB,aAAa,GAAGoB,yCAAoB,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACvG,gBAAgB,oBAAoB,CAAC,EAAE,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC;IAC7D,gBAAgB,oBAAoB,CAAC,EAAE,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC;IAC7D,aAAa;AACb;IACA,YAAY,QAAQ,CAAC,UAAU,CAAC,oBAAoB,GAAG,IAAIT,mCAAiB,CAAC;IAC7E,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,oBAAoB;IAC7C,aAAa,CAAC,CAAC;IACf,YAAY,OAAO,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;IACxD,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;AACT;IACA,QAAQ,IAAI,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;IACzD,QAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;AACjD;IACA,QAAQ,IAAI,SAAS,GAAGV,YAAO,CAAC,eAAe,CAAC,CAAC;IACjD,QAAQ,IAAI,KAAK,GAAGA,YAAO,CAAC,WAAW,CAAC,CAAC;IACzC,QAAQ,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE;IAClC,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;AACT;IACA,QAAQ,IAAI,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;IAC3D,QAAQ,IAAI,kBAAkB,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;AAC/D;IACA,QAAQ,IAAI,UAAU,GAAGA,YAAO,CAAC,gBAAgB,CAAC,CAAC;IACnD,QAAQ,IAAI,YAAY,GAAGA,YAAO,CAAC,kBAAkB,CAAC,CAAC;AACvD;IACA,QAAQ,IAAI,OAAO,CAAC;IACpB,QAAQ,IAAI,EAAE,CAAC;IACf,QAAQ,IAAI,QAAQ,CAAC;IACrB,QAAQ,IAAI,UAAU,CAAC;AACvB;IACA,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC;IAC7C,SAAS;IACT,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC;IACpC,SAAS;IACT,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC;IAC/C,SAAS;IACT,QAAQ,IAAI,YAAY,EAAE;IAC1B,YAAY,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC;IACnD,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;IAC5D,QAAQ,IAAI,aAAa,GAAG,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;IAClD,QAAQ,WAAW,GAAG,MAAM,GAAG,aAAa,CAAC;AAC7C;IACA,QAAQ,IAAI,gBAAgB,GAAG,WAAW,CAAC;IAC3C,QAAQ,IAAI,uBAAuB,GAAG,KAAK,IAAI,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;IACrE,QAAQ,uBAAuB,IAAI,UAAU,IAAI,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;IAC1E,QAAQ,gBAAgB,IAAI,uBAAuB,CAAC;AACpD;IACA,QAAQ,IAAI,oBAAoB,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACtE;IACA,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IAC5B,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;IAC1C,YAAY,IAAI,KAAK,EAAE;IACvB,gBAAgBC,qBAAU,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,EAAEgB,mBAAiB,CAAC,CAAC;IACrE,gBAAgB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGC,yCAAoB,CAAC,0BAA0B,CAACD,mBAAiB,CAAC,CAAC;IACzH,aAAa;AACb;IACA,YAAY,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,YAAY,IAAI,SAAS,IAAIjB,YAAO,CAAC,QAAQ,CAAC,IAAIA,YAAO,CAAC,UAAU,CAAC,EAAE;IACvE,gBAAgBF,qBAAU,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IAChE,gBAAgBA,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACjE,gBAAgBA,qBAAU,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AACnE;IACA,gBAAgBoB,yCAAoB,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAED,mBAAiB,CAAC,CAAC;IACjG,gBAAgB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGA,mBAAiB,CAAC,CAAC,CAAC;IAC1E,gBAAgB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGA,mBAAiB,CAAC,CAAC,CAAC;IAC1E,aAAa,MAAM;IACnB,gBAAgB,IAAI,SAAS,EAAE;IAC/B,oBAAoBnB,qBAAU,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACpE,oBAAoB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGoB,yCAAoB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzG,iBAAiB;AACjB;IACA,gBAAgB,IAAI,UAAU,EAAE;IAChC,oBAAoBpB,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACrE,oBAAoB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGoB,yCAAoB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzG,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,EAAE;IAClC,oBAAoBpB,qBAAU,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACvE,oBAAoB,oBAAoB,CAAC,WAAW,EAAE,CAAC,GAAGoB,yCAAoB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzG,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,UAAU,CAAC,oBAAoB,GAAG,IAAIT,mCAAiB,CAAC;IACzE,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IACvD,YAAY,sBAAsB,GAAG,uBAAuB;IAC5D,YAAY,MAAM,GAAG,oBAAoB;IACzC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,OAAO,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;IAC9C,SAAS;IACT,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,OAAO,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;IAC1C,SAAS;IACT,QAAQ,IAAI,YAAY,EAAE;IAC1B,YAAY,OAAO,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,SAAS;IACT,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;IAC/C,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;AACN;IACA,IAAI,SAAS,cAAc,CAAC,QAAQ,EAAE;IACtC,QAAQ,IAAIV,YAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;IACvC,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;IACT,QAAQ,IAAI,gBAAgB,GAAGQ,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACvF,SAAS;IACT,QAAQ,IAAI,gBAAgB,GAAG,CAAC,KAAK,CAAC,EAAE;IACxC,YAAY,MAAM,IAAIA,oBAAc,CAAC,qDAAqD,CAAC,CAAC;IAC5F,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IACzF,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACnD,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,gBAAgB,CAAC,QAAQ,EAAE;IACxC,QAAQ,IAAI,gBAAgB,GAAGG,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACvF,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACnG,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvB;IACA,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACnD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IACxC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IACxC,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,QAAQ,CAAC,aAAa,GAAGC,+BAAa,CAAC,SAAS,CAAC;IACzD,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,kBAAkB,CAAC,QAAQ,EAAE;IAC1C,QAAQ,IAAI,gBAAgB,GAAGE,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,4CAA4C,CAAC,CAAC;IACnF,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACnG,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvB;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;IAC1D,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IACxC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5C;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB,EAAE;IAC1C,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IAC5C,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,aAAa;IACb,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,QAAQ,CAAC,aAAa,GAAGC,+BAAa,CAAC,SAAS,CAAC;IACzD,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,UAAU,CAAC,QAAQ,EAAE;IAClC,QAAQ,IAAIN,YAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;IACvC,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;IACT,QAAQ,IAAI,gBAAgB,GAAGQ,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,8CAA8C,CAAC,CAAC;IACrF,SAAS;IACT,QAAQ,IAAI,gBAAgB,GAAG,CAAC,KAAK,CAAC,EAAE;IACxC,YAAY,MAAM,IAAIA,oBAAc,CAAC,iDAAiD,CAAC,CAAC;IACxF,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IACzF,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACnD,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,cAAc,CAAC,QAAQ,EAAE;IACtC,QAAQ,IAAI,gBAAgB,GAAGG,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,8CAA8C,CAAC,CAAC;IACrF,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACnG,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACnD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IACxC,SAAS;AACT;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,QAAQ,CAAC,aAAa,GAAGC,+BAAa,CAAC,KAAK,CAAC;IACrD,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,aAAa,CAAC,QAAQ,EAAE;IACrC,QAAQ,IAAI,gBAAgB,GAAGE,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,gBAAgB,GAAG,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIJ,oBAAc,CAAC,8CAA8C,CAAC,CAAC;IACrF,SAAS;IACT;AACA;IACA,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,gBAAgB,GAAG,CAAC,CAAC,CAAC;AAC7F;IACA,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvB;IACA,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,EAAE,CAAC,EAAE;IACnD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC;IACxC,SAAS;AACT;IACA,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,gBAAgB,GAAG,CAAC,CAAC;IACvD,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAClC;IACA,QAAQ,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IACnC,QAAQ,QAAQ,CAAC,aAAa,GAAGC,+BAAa,CAAC,KAAK,CAAC;IACrD,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,cAAc,CAAC,QAAQ,EAAE;IACtC,QAAQ,QAAQ,QAAQ,CAAC,aAAa;IACtC,QAAQ,KAAKA,+BAAa,CAAC,YAAY;IACvC,YAAY,OAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC9C,QAAQ,KAAKA,+BAAa,CAAC,cAAc;IACzC,YAAY,OAAO,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAChD,QAAQ,KAAKA,+BAAa,CAAC,SAAS;IACpC,YAAY,OAAO,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC5C,QAAQ,KAAKA,+BAAa,CAAC,UAAU;IACrC,YAAY,OAAO,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC5C,QAAQ,KAAKA,+BAAa,CAAC,SAAS;IACpC,YAAY,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC3C,QAAQ,KAAKA,+BAAa,CAAC,KAAK;IAChC,YAAY,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;IACxC,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,sBAAsB,CAAC,CAAC,EAAE,QAAQ,EAAE;IACjD,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGJ,gBAAU,CAAC,QAAQ,CAAC;IAChD,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAACA,gBAAU,CAAC,QAAQ,CAAC;IAC3C,aAAa,MAAM;IACnB,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAU,CAAC,QAAQ,CAAC;IAC1C,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACnD,QAAQ,IAAI,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1D,YAAY,sBAAsB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IACnD,YAAY,sBAAsB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IACnD,YAAY,sBAAsB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IACnD,YAAY,OAAO;IACnB,SAAS;AACT;IACA,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjC;IACA,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,GAAG,GAAG,GAAG,EAAE;IACvB,YAAY,IAAI,GAAG,GAAG,GAAG,EAAE;IAC3B,gBAAgB,IAAI,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,aAAa,MAAM;IACnB,gBAAgB,IAAI,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,aAAa;IACb,SAAS,MAAM,IAAI,GAAG,GAAG,GAAG,EAAE;IAC9B,YAAY,IAAI,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,SAAS,MAAM;IACf,YAAY,IAAI,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,SAAS;AACT;IACA,QAAQ,IAAI,QAAQ,GAAG,IAAI,GAAG,GAAG,CAAC;IAClC,QAAQ,sBAAsB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7C,QAAQ,sBAAsB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7C,QAAQ,sBAAsB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7C,KAAK;AACL;IACA,IAAI,IAAI,EAAE,GAAG,IAAIJ,qBAAU,EAAE,CAAC;IAC9B,IAAI,SAAS,6BAA6B,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAC1D,QAAQA,qBAAU,CAAC,GAAG,CAAC,CAAC,EAAEA,qBAAU,CAAC,gBAAgB,CAACA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/G,QAAQA,qBAAU,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACjC,QAAQ,sBAAsB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACzC,QAAQ,sBAAsB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9B,IAAI,IAAI,EAAE,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9B;IACA,IAAI,IAAI,mBAAmB,GAAG;IAC9B,QAAQ,SAAS,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;IAChC,QAAQ,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;IAClC,KAAK,CAAC;AACN;IACA,IAAI,SAAS,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACvC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE;IAC7D,YAAY,OAAO,SAAS,CAAC;IAC7B,SAAS;AACT;IACA,QAAQ,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9C;IACA,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAClC,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAClC,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;AAClC;IACA,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;IAC1B,QAAQ,SAAS,IAAI,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,QAAQ,SAAS,IAAI,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,QAAQ,SAAS,IAAI,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;AACtC;IACA,QAAQ,IAAI,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;AAClD;IACA,QAAQ,IAAI,SAAS,KAAK,CAAC,EAAE;IAC7B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3B;IACA,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa,MAAM,IAAI,QAAQ,EAAE;IACjC,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa,MAAM,IAAI,QAAQ,EAAE;IACjC,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa;IACb,SAAS,MAAM,IAAI,SAAS,KAAK,CAAC,EAAE;IACpC,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3B;IACA,YAAY,IAAI,CAAC,QAAQ,EAAE;IAC3B,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa,MAAM,IAAI,CAAC,QAAQ,EAAE;IAClC,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa,MAAM,IAAI,CAAC,QAAQ,EAAE;IAClC,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9D,gBAAgB,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9D;IACA,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC;IACtD,QAAQ,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1B,QAAQ,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1B,QAAQ,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1B,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7B;IACA,QAAQ,IAAI,SAAS,KAAK,CAAC,IAAI,SAAS,KAAK,CAAC,EAAE;IAChD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC9B,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC9B,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC9B,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC9B,YAAY,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACjC,SAAS;AACT;IACA,QAAQ,OAAO,mBAAmB,CAAC;IACnC,KAAK;AACL;IACA,IAAI,SAAS,wBAAwB,CAAC,QAAQ,EAAE,qBAAqB,EAAE;IACvE,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;AAC7C;IACA,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACrD,YAAY,OAAO,SAAS,CAAC;IAC7B,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;IACzC,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC;IACnD,oBAAoBE,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACjD,oBAAoBA,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;AAC1D;IACA,gBAAgB,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrD,gBAAgB,SAAS,CAAC,MAAM,GAAGU,mCAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IACrH,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,gBAAgB,GAAGF,0BAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAC1E,QAAQ,QAAQ,CAAC,OAAO,GAAGH,2BAAa,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC9F;IACA,QAAQ,IAAI,qBAAqB,EAAE;IACnC,YAAY,QAAQ,CAAC,cAAc,GAAGE,yBAAc,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9F,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,SAAS,oBAAoB,CAAC,QAAQ,EAAE;IAC5C,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAClC;IACA,QAAQ,KAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;IACzC,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC;IACnD,oBAAoBP,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACjD,oBAAoBA,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;AAC1D;IACA,gBAAgB,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrD,gBAAgB,gBAAgB,CAAC,QAAQ,CAAC,GAAG,IAAIS,mCAAiB,CAAC;IACnE,oBAAoB,iBAAiB,GAAG,SAAS,CAAC,iBAAiB;IACnE,oBAAoB,sBAAsB,GAAG,SAAS,CAAC,sBAAsB;IAC7E,oBAAoB,SAAS,GAAG,SAAS,CAAC,SAAS;IACnD,oBAAoB,MAAM,GAAG,EAAE;IAC/B,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,IAAID,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG,gBAAgB;IACzC,YAAY,OAAO,GAAG,EAAE;IACxB,YAAY,aAAa,GAAG,QAAQ,CAAC,aAAa;IAClD,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,SAAS,wBAAwB,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE;IAC5E,QAAQ,IAAI,qBAAqB,GAAGR,YAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;AAC9E;IACA,QAAQ,YAAY,GAAG,wBAAwB,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;IACrF,QAAQ,YAAY,GAAG,wBAAwB,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;AACrF;IACA,QAAQ,IAAIA,YAAO,CAAC,YAAY,CAAC,IAAI,CAACA,YAAO,CAAC,YAAY,CAAC,EAAE;IAC7D,YAAY,QAAQ,CAAC,QAAQ,GAAG,YAAY,CAAC;IAC7C,SAAS,MAAM,IAAI,CAACA,YAAO,CAAC,YAAY,CAAC,IAAIA,YAAO,CAAC,YAAY,CAAC,EAAE;IACpE,YAAY,QAAQ,CAAC,QAAQ,GAAG,YAAY,CAAC;IAC7C,SAAS,MAAM;IACf,YAAY,QAAQ,CAAC,sBAAsB,GAAG,YAAY,CAAC;IAC3D,YAAY,QAAQ,CAAC,sBAAsB,GAAG,YAAY,CAAC;IAC3D,YAAY,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC1C,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,sCAAsC,CAAC,aAAa,EAAE,kBAAkB,EAAE;IACvF,QAAQ,IAAI,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;IAC5C,QAAQ,IAAI,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;IAC5C,QAAQ,IAAI,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;AAC5C;IACA,QAAQ,OAAO,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,SAAS,EAAE;IACnG,YAAY,IAAI,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,GAAG,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAC/F,YAAY,IAAI,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,GAAG,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAC/F,YAAY,IAAI,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,GAAG,kBAAkB,EAAE,SAAS,CAAC,CAAC;AAC/F;IACA,YAAY,aAAa,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7D,YAAY,aAAa,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7D,YAAY,aAAa,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7D;IACA,YAAY,IAAI,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACtD,YAAY,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;AAChD;IACA,YAAY,IAAI,SAAS,EAAE;IAC3B,gBAAgB,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACtD,aAAa;AACb;IACA,YAAY,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,GAAG,kBAAkB,CAAC,CAAC;IACzF,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,IAAI,4BAA4B,GAAG,sCAAsC,CAACmB,qBAAU,EAAE,CAAC,CAAC,CAAC;IAC7F,IAAI,IAAI,4BAA4B,GAAG,sCAAsC,CAACrB,qBAAU,EAAE,CAAC,CAAC,CAAC;IAC7F,IAAI,IAAI,4BAA4B,GAAG,sCAAsC,CAACG,qBAAU,EAAE,CAAC,CAAC,CAAC;IAC7F,IAAI,IAAI,yBAAyB,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE;IAC7G,QAAQ,IAAI,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC7C,QAAQ,IAAI,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC7C,QAAQ,IAAI,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC7C,QAAQ,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAIC,gBAAU,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IACpF,KAAK,CAAC;AACN;IACA,IAAI,IAAI,SAAS,GAAG,IAAIJ,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,SAAS,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACrC,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,SAAS,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,aAAa,EAAE,aAAa,EAAE;IAC9O,QAAQ,IAAI,CAACE,YAAO,CAAC,OAAO,CAAC,IAAI,CAACA,YAAO,CAAC,QAAQ,CAAC,IAAI,CAACA,YAAO,CAAC,UAAU,CAAC,IAAI,CAACA,YAAO,CAAC,SAAS,CAAC,IAAI,CAACA,YAAO,CAAC,iBAAiB,CAAC,IAAI,sBAAsB,KAAK,CAAC,EAAE;IACnK,YAAY,OAAO;IACnB,SAAS;AACT;IACA,QAAQ,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACpE,QAAQ,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACpE,QAAQ,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACpE,QAAQ,IAAI,MAAM,GAAG,sBAAsB,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAC;AACnF;IACA,QAAQ,IAAIE,YAAO,CAAC,OAAO,CAAC,EAAE;IAC9B,YAAY,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IAC5H,SAAS;AACT;IACA,QAAQ,IAAIA,YAAO,CAAC,iBAAiB,CAAC,EAAE;IACxC,YAAY,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,iBAAiB,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IAChF,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,iBAAiB,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IAChF,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,iBAAiB,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;AAChF;IACA,YAAYA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1D,YAAYA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1D,YAAYA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1D;IACA,YAAY,IAAI,SAAS,CAAC;IAC1B,YAAY,IAAI,CAACA,qBAAU,CAAC,MAAM,CAAC,EAAE,EAAEA,qBAAU,CAAC,IAAI,CAAC,IAAI,CAACA,qBAAU,CAAC,MAAM,CAAC,EAAE,EAAEA,qBAAU,CAAC,IAAI,CAAC,IAAI,CAACA,qBAAU,CAAC,MAAM,CAAC,EAAE,EAAEA,qBAAU,CAAC,IAAI,CAAC,EAAE;IAC/I,gBAAgB,SAAS,GAAGA,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvD,gBAAgBA,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;IACzD,gBAAgBA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3D,aAAa,MAAM;IACnB,gBAAgB,SAAS,GAAG,SAAS,CAAC;IACtC,gBAAgB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,gBAAgB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,gBAAgB,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,aAAa;IACb,YAAYA,qBAAU,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,GAAG,CAAC,CAAC,CAAC;IACrG,SAAS;AACT;IACA,QAAQ,IAAIE,YAAO,CAAC,WAAW,CAAC,EAAE;IAClC,YAAY,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,iBAAiB,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAC5H,SAAS;AACT;IACA,QAAQ,IAAIA,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC/B,YAAY,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IAC9H,SAAS;AACT;IACA,QAAQ,IAAIA,YAAO,CAAC,UAAU,CAAC,EAAE;IACjC,YAAY,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IAClI,SAAS;AACT;IACA,QAAQ,IAAIA,YAAO,CAAC,SAAS,CAAC,EAAE;IAChC,YAAY,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IACpH,SAAS;AACT;IACA,QAAQ,IAAI,sBAAsB,GAAG,CAAC,EAAE;IACxC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,EAAE,CAAC,EAAE,EAAE;IAC7D,gBAAgB,IAAI,aAAa,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;IAC5D,gBAAgB,kBAAkB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,CAAC,aAAa,CAAC,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;IACtI,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,kBAAkB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,gBAAgB,EAAE;IACtG,QAAQ,IAAI,sBAAsB,GAAG,eAAe,CAAC,sBAAsB,CAAC;IAC5E,QAAQ,IAAI,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC;IACpD,QAAQ,OAAO,sBAAsB;IACrC,YAAY,KAAK,CAAC;IAClB,gBAAgB,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACpH,gBAAgB,MAAM;IACtB,YAAY,KAAK,CAAC;IAClB,gBAAgB,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACpH,gBAAgB,MAAM;IACtB,YAAY,KAAK,CAAC;IAClB,gBAAgB,4BAA4B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACpH,gBAAgB,MAAM;IACtB,YAAY;IACZ,gBAAgB,aAAa,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvI,SAAS;IACT,KAAK;AACL;IACA,IAAI,SAAS,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE;IAChH,QAAQ,IAAI,WAAW,GAAG,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACvE;IACA,QAAQ,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;IACjC,YAAY,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IAClD,YAAY,IAAI,QAAQ,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;AACtD;IACA,YAAY,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;IACjC,gBAAgB,eAAe,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;IACzD,gBAAgB,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAClF,gBAAgB,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,gBAAgB,OAAO,WAAW,CAAC;IACnC,aAAa;AACb;IACA,YAAY,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,YAAY,OAAO,QAAQ,CAAC;IAC5B,SAAS;AACT;IACA,QAAQ,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1E,QAAQ,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzC,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,IAAI,gBAAgB,GAAG;IAC3B,QAAQ,QAAQ,GAAG,IAAI;IACvB,QAAQ,MAAM,GAAG,IAAI;IACrB,QAAQ,SAAS,GAAG,IAAI;IACxB,QAAQ,OAAO,GAAG,IAAI;IACtB,QAAQ,EAAE,GAAG,IAAI;IACjB,QAAQ,gBAAgB,GAAG,IAAI;IAC/B,QAAQ,WAAW,EAAE,IAAI;IACzB,KAAK,CAAC;IACN,IAAI,SAAS,uBAAuB,CAAC,QAAQ,EAAE;IAC/C,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACzC,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IACnD,QAAQ,IAAI,OAAO,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAC1F,QAAQ,IAAI,UAAU,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC;IACnG,QAAQ,IAAI,QAAQ,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IAC7F,QAAQ,IAAI,SAAS,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,MAAM,GAAG,SAAS,CAAC;IACpF,QAAQ,IAAI,iBAAiB,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,UAAU,CAAC,gBAAgB,CAAC,MAAM,GAAG,SAAS,CAAC;IACxH,QAAQ,IAAI,WAAW,GAAGA,YAAO,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,SAAS,CAAC;IACtG,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;AACvC;IACA,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;IACtC,QAAQ,KAAK,IAAI,aAAa,IAAI,UAAU,EAAE;IAC9C,YAAY,IAAI,UAAU,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAIA,YAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;IACpI,gBAAgB,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzD,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,sBAAsB,GAAG,oBAAoB,CAAC,MAAM,CAAC;AACjE;IACA,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC1D,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,cAAc,CAAC;IAC3B,QAAQ,IAAI,eAAe,CAAC;IAC5B,QAAQ,IAAI,aAAa,CAAC;IAC1B,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;IACtC,QAAQ,oBAAoB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3D;IACA,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;IACtC,QAAQ,oBAAoB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3D;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IAC1D,YAAY,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,YAAY,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,SAAS;AACT;IACA,QAAQ,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;IACrC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpC;IACA,YAAY,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7D,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7D,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;AAC7D;IACA,YAAY,IAAI,MAAM,GAAG,aAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACnD,YAAY,IAAIE,YAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IAChE,gBAAgB,IAAI,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC;IACvD,gBAAgB,IAAI,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC;IACnD,gBAAgB,IAAI,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC;AACxD;IACA,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,EAAE,CAAC,EAAE;IACvD,oBAAoB,IAAI,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IACvD,oBAAoB,IAAI,KAAK,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;AAC7D;IACA,oBAAoB,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE;IACvC,wBAAwB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IACpE,wBAAwB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC9D,wBAAwB,eAAe,GAAG,oBAAoB,CAAC;IAC/D,qBAAqB,MAAM;IAC3B,wBAAwB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IACpE,wBAAwB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC9D,wBAAwB,eAAe,GAAG,oBAAoB,CAAC;IAC/D,qBAAqB;AACrB;IACA,oBAAoB,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,WAAW,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACjK,oBAAoB,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAClP,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAIA,YAAO,CAAC,MAAM,CAAC,EAAE;IACrC,oBAAoB,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7C,oBAAoB,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7C,oBAAoB,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7C,iBAAiB;AACjB;IACA,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,oBAAoB,eAAe,GAAG,oBAAoB,CAAC;IAC3D,iBAAiB,MAAM;IACvB,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,oBAAoB,eAAe,GAAG,oBAAoB,CAAC;IAC3D,iBAAiB;AACjB;IACA,gBAAgB,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACrH,gBAAgB,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;AAC3O;IACA,gBAAgB,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACzH,gBAAgB,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;AAC3O;IACA,gBAAgB,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACzH,gBAAgB,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAC3O,aAAa;IACb,SAAS;AACT;IACA,QAAQ,wBAAwB,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IACvE,KAAK;AACL;IACA,IAAI,IAAI,OAAO,GAAGoB,WAAK,CAAC,eAAe,CAACtB,qBAAU,CAAC,IAAI,EAAEA,qBAAU,CAAC,MAAM,CAAC,CAAC;AAC5E;IACA,IAAI,IAAI,aAAa,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACzC,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,SAAS,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,WAAW,EAAE;IAC1G,QAAQ,IAAI,CAACE,YAAO,CAAC,WAAW,CAAC,EAAE;IACnC,YAAY,OAAO;IACnB,SAAS;AACT;IACA,QAAQ,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACpE,QAAQ,IAAIA,qBAAU,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,EAAEI,gBAAU,CAAC,SAAS,CAAC,EAAE;IACvE,YAAY,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;IAChF,SAAS,MAAM;IACf,YAAY,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;IAChF,SAAS;AACT;IACA,KAAK;AACL;IACA,IAAI,SAAS,mBAAmB,CAAC,QAAQ,EAAE;IAC3C,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACzC,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IACnD,QAAQ,IAAI,WAAW,GAAGF,YAAO,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,GAAG,SAAS,CAAC;IACtG,QAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;AACvC;IACA,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC1D,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACpC;IACA,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;IACtC,QAAQ,oBAAoB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3D;IACA,QAAQ,IAAI,oBAAoB,GAAG,EAAE,CAAC;IACtC,QAAQ,oBAAoB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3D;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IAC1D,YAAY,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,YAAY,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,SAAS;AACT;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACxC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACpC;IACA,YAAY,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACxE,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACxE,YAAY,IAAI,WAAW,CAAC;AAC5B;IACA,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGI,gBAAU,CAAC,QAAQ,CAAC;IACrD,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoB,EAAE,CAAC,CAAC,GAAG,CAACA,gBAAU,CAAC,QAAQ,CAAC;IAChD,iBAAiB,MAAM;IACvB,oBAAoB,EAAE,CAAC,CAAC,GAAGA,gBAAU,CAAC,QAAQ,CAAC;IAC/C,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGA,gBAAU,CAAC,QAAQ,CAAC;IACrD,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoB,EAAE,CAAC,CAAC,GAAG,CAACA,gBAAU,CAAC,QAAQ,CAAC;IAChD,iBAAiB,MAAM;IACvB,oBAAoB,EAAE,CAAC,CAAC,GAAGA,gBAAU,CAAC,QAAQ,CAAC;IAC/C,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IACvD,YAAY,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACjD,YAAY,IAAI,UAAU,GAAG,oBAAoB,CAAC;IAClD,YAAY,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IACvD,YAAY,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACjD,YAAY,IAAI,UAAU,GAAG,oBAAoB,CAAC;AAClD;IACA,YAAY,IAAI,YAAY,GAAGmB,mCAAiB,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC9F,YAAY,IAAIrB,YAAO,CAAC,YAAY,CAAC,EAAE;IACvC;IACA,gBAAgB,IAAI,MAAM,GAAGF,qBAAU,CAAC,gBAAgB,CAACA,qBAAU,CAAC,MAAM,EAAE,GAAG,GAAGI,gBAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACtH,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoBJ,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtD;IACA,oBAAoB,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IAC3D,oBAAoB,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACrD,oBAAoB,UAAU,GAAG,oBAAoB,CAAC;IACtD,oBAAoB,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IAC3D,oBAAoB,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACrD,oBAAoB,UAAU,GAAG,oBAAoB,CAAC;IACtD,iBAAiB;AACjB;IACA,gBAAgB,IAAI,WAAW,GAAGA,qBAAU,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;AAC3F;IACA,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACpG,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;AACrG;IACA,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAC9G,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;AAC9G;IACA,gBAAgBA,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,gBAAgBA,qBAAU,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IAClE,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAC9G,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;AAC9G;IACA,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACxG,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;IACrG,aAAa,MAAM;IACnB,gBAAgB,IAAI,iBAAiB,CAAC;IACtC,gBAAgB,IAAI,cAAc,CAAC;IACnC,gBAAgB,IAAI,eAAe,CAAC;AACpC;IACA,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,oBAAoB,eAAe,GAAG,oBAAoB,CAAC;IAC3D,iBAAiB,MAAM;IACvB,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,oBAAoB,eAAe,GAAG,oBAAoB,CAAC;IAC3D,iBAAiB;AACjB;IACA,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACnH,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;AAC1G;IACA,gBAAgB,WAAW,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACvH,gBAAgB,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAC1G,aAAa;IACb,SAAS;AACT;IACA,QAAQ,wBAAwB,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IACvE,KAAK;AACL;IACA,IAAI,IAAI,kBAAkB,GAAG,IAAIG,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,IAAI,kBAAkB,GAAG,IAAIH,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,IAAI,kBAAkB,GAAG,IAAIqB,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,SAAS,yBAAyB,CAAC,QAAQ,EAAE;IACjD,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;IAC3D,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;AAC3D;IACA,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,QAAQ,GAAGrB,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAC;IAC/E,YAAY,IAAI,QAAQ,CAAC,CAAC,GAAG,GAAG,EAAE;IAClC,gBAAgB,SAAS;IACzB,aAAa;AACb;IACA,YAAY,IAAI,YAAY,GAAGA,qBAAU,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACvF,YAAY,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,GAAG,MAAM,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE;IAC1G,gBAAgB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IAC/B,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,iBAAiB,MAAM;IACvB,oBAAoBA,qBAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;IAChE,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,YAAY,GAAGA,qBAAU,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACvF,YAAY,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,GAAG,MAAM,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE;IAC1G,gBAAgB,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE;IACpC,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,iBAAiB,MAAM;IACvB,oBAAoBA,qBAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;IAChE,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,YAAY,GAAG,GAAG,GAAGI,gBAAU,CAAC,QAAQ,CAAC;IACjD,IAAI,IAAI,cAAc,GAAGA,gBAAU,CAAC,QAAQ,CAAC;AAC7C;IACA,IAAI,SAAS,sBAAsB,CAAC,QAAQ,EAAE;IAC9C,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACzC,QAAQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IAC7C,QAAQ,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;IAC3D,QAAQ,IAAI,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC;IAC3D,QAAQ,IAAI,eAAe,GAAG,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC;AAC/D;IACA,QAAQ,IAAI,SAAS,GAAG,CAACF,YAAO,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,MAAM,GAAG,SAAS,CAAC;IACpF,QAAQ,IAAI,MAAM,GAAG,CAACA,YAAO,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;AACvF;IACA,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC1D,QAAQ,IAAI,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,KAAK,CAAC;AAClB;IACA,QAAQ,IAAI,iBAAiB,GAAG,KAAK,CAAC;AACtC;IACA,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1C,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACxC,YAAY,IAAI,EAAE,GAAG,CAAC,CAAC;IACvB,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3B;IACA,YAAY,IAAI,EAAE,GAAGF,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACjF,YAAY,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACjF;IACA;IACA;IACA;IACA,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,EAAE;IACjD,gBAAgB,EAAE,CAAC,CAAC,GAAG,cAAc,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAClE,gBAAgB,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC5C,gBAAgB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAClD;IACA,gBAAgB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;IAC7D,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,iBAAiB;IACjB,aAAa;AACb;IACA;IACA,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,EAAE;IACjD,gBAAgB,EAAE,CAAC,CAAC,GAAG,cAAc,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAClE,gBAAgB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAClD,gBAAgB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAClD;IACA,gBAAgB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;IAC7D,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,oBAAoB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IACvD,YAAY,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACjD,YAAY,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IACvD,YAAY,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;AACjD;IACA,YAAY,IAAI,YAAY,GAAGuB,mCAAiB,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;IACvG,YAAY,IAAIrB,YAAO,CAAC,YAAY,CAAC,EAAE;IACvC,gBAAgB,iBAAiB,GAAG,IAAI,CAAC;AACzC;IACA;IACA,gBAAgB,IAAI,MAAM,GAAGF,qBAAU,CAAC,gBAAgB,CAACA,qBAAU,CAAC,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;IAC9G,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoBA,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACtD,oBAAoB,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IAC3D,oBAAoB,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACrD,oBAAoB,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC;IAC3D,oBAAoB,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;IACrD,iBAAiB;AACjB;IACA,gBAAgB,IAAI,WAAW,GAAGA,qBAAU,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAC3F,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACtF,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC/F,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AAC/F;IACA,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnI,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvI,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1F;IACA,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AACnG;IACA,gBAAgBA,qBAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,gBAAgBA,qBAAU,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IAClE,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC/F,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC/F,gBAAgB,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACtF;IACA,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AACnG;IACA,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1F,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnI,gBAAgB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACvI;IACA,gBAAgB,IAAI,GAAG,GAAGG,qBAAU,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;IAC5F,gBAAgB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5C;IACA,gBAAgB,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/E,gBAAgB,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAC/E,gBAAgB,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/E,gBAAgB,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AAC/E;IACA,gBAAgB,IAAI,CAAC,GAAGH,qBAAU,CAAC,gBAAgB,CAACA,qBAAU,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAC/G,gBAAgB,CAAC,IAAIA,qBAAU,CAAC,gBAAgB,CAACA,qBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAC,CAAC;AAClG;IACA,gBAAgB,IAAIE,YAAO,CAAC,MAAM,CAAC,EAAE;IACrC,oBAAoB,IAAI,EAAE,GAAGmB,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACtF,oBAAoB,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACtF;IACA,oBAAoB,IAAI,CAAC,GAAGjB,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,oBAAoB,IAAI,CAAC,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,oBAAoB,IAAI,CAAC,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,oBAAoB,IAAI,CAAC,GAAGA,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3D;IACA,oBAAoB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC9D,wBAAwB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,qBAAqB;IACrB,oBAAoB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,oBAAoB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,oBAAoB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,oBAAoB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,oBAAoB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC9D,wBAAwB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAIF,YAAO,CAAC,SAAS,CAAC,EAAE;IACxC,oBAAoB,IAAI,EAAE,GAAGC,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACzF,oBAAoB,IAAI,EAAE,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAC9F;IACA,oBAAoB,IAAI,EAAE,GAAGC,gBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5D;IACA,oBAAoB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC9D,wBAAwB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,qBAAqB;IACrB,oBAAoB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC9D,wBAAwB,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACpE,gBAAgB,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5D,gBAAgB,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AAChE;IACA,gBAAgB,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACpE,gBAAgB,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5D,gBAAgB,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IAChE,aAAa,MAAM;IACnB,gBAAgB,IAAI,iBAAiB,CAAC;IACtC,gBAAgB,IAAI,cAAc,CAAC;AACnC;IACA,gBAAgB,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE;IAChC,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,iBAAiB,MAAM;IACvB,oBAAoB,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC;IAChE,oBAAoB,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC;IAC1D,iBAAiB;AACjB;IACA,gBAAgB,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACzE,gBAAgB,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACzE,gBAAgB,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACzE,gBAAgB,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACzE;IACA,gBAAgB,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACxD,oBAAoB,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACjF,oBAAoB,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACjF,iBAAiB;AACjB;IACA,gBAAgB,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACxD,oBAAoB,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IACrF,oBAAoB,IAAIF,YAAO,CAAC,SAAS,CAAC,EAAE;IAC5C,wBAAwB,iBAAiB,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAIA,YAAO,CAAC,MAAM,CAAC,EAAE;IACrC,oBAAoB,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5D,wBAAwB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,KAAK,GAAG,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACzE,gBAAgB,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IACjE,gBAAgB,cAAc,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IACrE,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,iBAAiB,EAAE;IAC/B,YAAY,yBAAyB,CAAC,YAAY,CAAC,CAAC;IACpD,YAAY,yBAAyB,CAAC,YAAY,CAAC,CAAC;IACpD,SAAS;AACT;IACA,QAAQ,wBAAwB,CAAC,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IACvE,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,cAAc,GAAG,SAAS,QAAQ,EAAE;IACzD;IACA,QAAQ,IAAI,CAACA,YAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAII,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT;AACA;IACA,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACzC,QAAQ,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;IACrD,QAAQ,IAAIJ,YAAO,CAAC,cAAc,CAAC,EAAE;IACrC,YAAY,IAAI,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC;IACvE,YAAY,IAAI,IAAI,GAAG,CAAC,IAAIO,yBAAc,CAAC,cAAc,CAAC,cAAc,EAAEa,WAAK,CAAC,eAAe,CAAC,KAAKE,oBAAS,CAAC,YAAY,EAAE;IAC7H,gBAAgB,OAAO,QAAQ,CAAC;IAChC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,QAAQ,CAAC,YAAY,KAAKC,8BAAY,CAAC,IAAI,EAAE;IACzD,YAAY,QAAQ,QAAQ,CAAC,YAAY;IACzC,YAAY,KAAKA,8BAAY,CAAC,SAAS;IACvC,gBAAgB,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACjD,gBAAgB,MAAM;IACtB,YAAY,KAAKA,8BAAY,CAAC,SAAS;IACvC,gBAAgB,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAClD,gBAAgB,MAAM;IACtB,YAAY,KAAKA,8BAAY,CAAC,KAAK;IACnC,gBAAgB,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC9C,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS,MAAM;IACf,YAAY,cAAc,CAAC,QAAQ,CAAC,CAAC;IACrC,YAAY,IAAI,QAAQ,CAAC,aAAa,KAAKjB,+BAAa,CAAC,SAAS,EAAE;IACpE,gBAAgB,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAClD,aAAa,MAAM,IAAI,QAAQ,CAAC,aAAa,KAAKA,+BAAa,CAAC,KAAK,EAAE;IACvE,gBAAgB,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC9C,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK,CAAC;;;;;;;;"}