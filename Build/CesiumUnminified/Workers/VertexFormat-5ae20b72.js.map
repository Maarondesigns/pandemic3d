{"version":3,"file":"VertexFormat-5ae20b72.js","sources":["../../../../Source/Core/VertexFormat.js"],"sourcesContent":["import defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\n\n    /**\n     * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\n     * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\n     * position and normal, etc.\n     *\n     * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\n     *\n     * @alias VertexFormat\n     * @constructor\n     *\n     * @example\n     * // Create a vertex format with position and 2D texture coordinate attributes.\n     * var format = new Cesium.VertexFormat({\n     *   position : true,\n     *   st : true\n     * });\n     *\n     * @see Geometry#attributes\n     * @see Packable\n     */\n    function VertexFormat(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        /**\n         * When <code>true</code>, the vertex has a 3D position attribute.\n         * <p>\n         * 64-bit floating-point (for precision).  3 components per attribute.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.position = defaultValue(options.position, false);\n\n        /**\n         * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\n         * <p>\n         * 32-bit floating-point.  3 components per attribute.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.normal = defaultValue(options.normal, false);\n\n        /**\n         * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\n         * <p>\n         * 32-bit floating-point.  2 components per attribute\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.st = defaultValue(options.st, false);\n\n        /**\n         * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n         * <p>\n         * 32-bit floating-point.  3 components per attribute.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.bitangent = defaultValue(options.bitangent, false);\n\n        /**\n         * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\n         * <p>\n         * 32-bit floating-point.  3 components per attribute.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.tangent = defaultValue(options.tangent, false);\n\n        /**\n         * When <code>true</code>, the vertex has an RGB color attribute.\n         * <p>\n         * 8-bit unsigned byte.  3 components per attribute.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.color = defaultValue(options.color, false);\n    }\n\n    /**\n     * An immutable vertex format with only a position attribute.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     */\n    VertexFormat.POSITION_ONLY = Object.freeze(new VertexFormat({\n        position : true\n    }));\n\n    /**\n     * An immutable vertex format with position and normal attributes.\n     * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#normal\n     */\n    VertexFormat.POSITION_AND_NORMAL = Object.freeze(new VertexFormat({\n        position : true,\n        normal : true\n    }));\n\n    /**\n     * An immutable vertex format with position, normal, and st attributes.\n     * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\n     * is <code>TEXTURED/code>.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#normal\n     * @see VertexFormat#st\n     */\n    VertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(new VertexFormat({\n        position : true,\n        normal : true,\n        st : true\n    }));\n\n    /**\n     * An immutable vertex format with position and st attributes.\n     * This is compatible with {@link EllipsoidSurfaceAppearance}.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#st\n     */\n    VertexFormat.POSITION_AND_ST = Object.freeze(new VertexFormat({\n        position : true,\n        st : true\n    }));\n\n    /**\n     * An immutable vertex format with position and color attributes.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#color\n     */\n    VertexFormat.POSITION_AND_COLOR = Object.freeze(new VertexFormat({\n        position : true,\n        color : true\n    }));\n\n    /**\n     * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#normal\n     * @see VertexFormat#st\n     * @see VertexFormat#tangent\n     * @see VertexFormat#bitangent\n     */\n    VertexFormat.ALL = Object.freeze(new VertexFormat({\n        position : true,\n        normal : true,\n        st : true,\n        tangent  : true,\n        bitangent : true\n    }));\n\n    /**\n     * An immutable vertex format with position, normal, and st attributes.\n     * This is compatible with most appearances and materials; however\n     * normal and st attributes are not always required.  When this is\n     * known in advance, another <code>VertexFormat</code> should be used.\n     *\n     * @type {VertexFormat}\n     * @constant\n     *\n     * @see VertexFormat#position\n     * @see VertexFormat#normal\n     */\n    VertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    VertexFormat.packedLength = 6;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {VertexFormat} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    VertexFormat.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value.position ? 1.0 : 0.0;\n        array[startingIndex++] = value.normal ? 1.0 : 0.0;\n        array[startingIndex++] = value.st ? 1.0 : 0.0;\n        array[startingIndex++] = value.tangent ? 1.0 : 0.0;\n        array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\n        array[startingIndex] = value.color ? 1.0 : 0.0;\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {VertexFormat} [result] The object into which to store the result.\n     * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\n     */\n    VertexFormat.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        if (!defined(result)) {\n            result = new VertexFormat();\n        }\n\n        result.position  = array[startingIndex++] === 1.0;\n        result.normal    = array[startingIndex++] === 1.0;\n        result.st        = array[startingIndex++] === 1.0;\n        result.tangent   = array[startingIndex++] === 1.0;\n        result.bitangent = array[startingIndex++] === 1.0;\n        result.color     = array[startingIndex] === 1.0;\n        return result;\n    };\n\n    /**\n     * Duplicates a VertexFormat instance.\n     *\n     * @param {VertexFormat} vertexFormat The vertex format to duplicate.\n     * @param {VertexFormat} [result] The object onto which to store the result.\n     * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\n     */\n    VertexFormat.clone = function(vertexFormat, result) {\n        if (!defined(vertexFormat)) {\n            return undefined;\n        }\n        if (!defined(result)) {\n            result = new VertexFormat();\n        }\n\n        result.position = vertexFormat.position;\n        result.normal = vertexFormat.normal;\n        result.st = vertexFormat.st;\n        result.tangent = vertexFormat.tangent;\n        result.bitangent = vertexFormat.bitangent;\n        result.color = vertexFormat.color;\n        return result;\n    };\nexport default VertexFormat;\n"],"names":["defaultValue","defined","DeveloperError"],"mappings":"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"}