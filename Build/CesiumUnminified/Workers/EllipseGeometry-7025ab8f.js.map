{"version":3,"file":"EllipseGeometry-7025ab8f.js","sources":["../../../../Source/Core/EllipseGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport GeographicProjection from './GeographicProjection.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport Rectangle from './Rectangle.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var texCoordScratch = new Cartesian2();\n    var textureMatrixScratch = new Matrix3();\n    var tangentMatrixScratch = new Matrix3();\n    var quaternionScratch = new Quaternion();\n\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n\n    var scratchCartographic = new Cartographic();\n    var projectedCenterScratch = new Cartesian3();\n\n    var scratchMinTexCoord = new Cartesian2();\n    var scratchMaxTexCoord = new Cartesian2();\n\n    function computeTopBottomAttributes(positions, options, extrude) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var stRotation = options.stRotation;\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\n        var shadowVolume = options.shadowVolume;\n\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n\n        var textureMatrix = textureMatrixScratch;\n        var tangentMatrix = tangentMatrixScratch;\n        if (stRotation !== 0) {\n            var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\n            tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n            tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\n        }\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var bottomOffset = (extrude) ? length : 0;\n        var stOffset = bottomOffset / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                if (extrude) {\n                    textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                    textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n                }\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n                normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n                if (shadowVolume) {\n                    extrudeNormals[i + bottomOffset] = -normal.x;\n                    extrudeNormals[i1 + bottomOffset] = -normal.y;\n                    extrudeNormals[i2 + bottomOffset] = -normal.z;\n                }\n\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\n                        Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\n                    }\n                    if (vertexFormat.normal) {\n                        normals[i] = normal.x;\n                        normals[i1] = normal.y;\n                        normals[i2] = normal.z;\n                        if (extrude) {\n                            normals[i + bottomOffset] = -normal.x;\n                            normals[i1 + bottomOffset] = -normal.y;\n                            normals[i2 + bottomOffset] = -normal.z;\n                        }\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[i] = tangent.x;\n                        tangents[i1] = tangent.y;\n                        tangents[i2] = tangent.z;\n                        if (extrude) {\n                            tangents[i + bottomOffset] = -tangent.x;\n                            tangents[i1 + bottomOffset] = -tangent.y;\n                            tangents[i2 + bottomOffset] = -tangent.z;\n                        }\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                        bitangents[i ] = bitangent.x;\n                        bitangents[i1] = bitangent.y;\n                        bitangents[i2] = bitangent.z;\n                        if (extrude) {\n                            bitangents[i + bottomOffset] = bitangent.x;\n                            bitangents[i1 + bottomOffset] = bitangent.y;\n                            bitangents[i2 + bottomOffset] = bitangent.z;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (extrude && defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function topIndices(numPts) {\n        // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\n        //              = -1 + 4 * ((n * ( n + 1)) / 2)\n        // total triangles = 2 * numTrangles in half\n        // indices = total triangles * 3;\n        // Substitute numPts for n above\n\n        var indices = new Array(12 * (numPts * ( numPts + 1)) - 6);\n        var indicesIndex = 0;\n        var prevIndex;\n        var numInterior;\n        var positionIndex;\n        var i;\n        var j;\n        // Indices triangles to the 'right' of the north vector\n\n        prevIndex = 0;\n        positionIndex = 1;\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        for (i = 2; i < numPts + 1; ++i) {\n            positionIndex = i * (i + 1) - 1;\n            prevIndex = (i - 1) * i - 1;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        // Indices for center column of triangles\n        numInterior = numPts * 2;\n        ++positionIndex;\n        ++prevIndex;\n        for (i = 0; i < numInterior - 1; ++i) {\n            indices[indicesIndex++] = positionIndex;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        indices[indicesIndex++] = positionIndex;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        indices[indicesIndex++] = positionIndex++;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        // Reverse the process creating indices to the 'left' of the north vector\n        ++prevIndex;\n        for (i = numPts - 1; i > 1; --i) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = positionIndex++;\n        }\n\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n        return indices;\n    }\n\n    var boundingSphereCenter = new Cartesian3();\n\n    function computeEllipse(options) {\n        var center = options.center;\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var attributes = computeTopBottomAttributes(positions, options, false);\n        var indices = topIndices(numPts);\n        indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    function computeWallAttributes(positions, options) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var stRotation = options.stRotation;\n        var size = positions.length / 3 * 2;\n\n        var finalPositions = new Float64Array(size * 3);\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var shadowVolume = options.shadowVolume;\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n        var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var stOffset = length / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n            var extrudedPosition;\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            position = ellipsoid.scaleToGeodeticSurface(position, position);\n            extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n            if (shadowVolume) {\n                extrudeNormals[i + length] = -normal.x;\n                extrudeNormals[i1 + length] = -normal.y;\n                extrudeNormals[i2 + length] = -normal.z;\n            }\n\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\n            position = Cartesian3.add(position, scaledNormal, position);\n            scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n            extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n            if (vertexFormat.position) {\n                finalPositions[i + length] = extrudedPosition.x;\n                finalPositions[i1 + length] = extrudedPosition.y;\n                finalPositions[i2 + length] = extrudedPosition.z;\n\n                finalPositions[i] = position.x;\n                finalPositions[i1] = position.y;\n                finalPositions[i2] = position.z;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n\n                bitangent = Cartesian3.clone(normal, bitangent);\n                var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\n                Cartesian3.subtract(next, position, next);\n                var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\n\n                normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\n\n                if (vertexFormat.normal) {\n                    normals[i] = normal.x;\n                    normals[i1] = normal.y;\n                    normals[i2] = normal.z;\n\n                    normals[i + length] = normal.x;\n                    normals[i1 + length] = normal.y;\n                    normals[i2 + length] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                    tangents[i] = tangent.x;\n                    tangents[i1] = tangent.y;\n                    tangents[i2] = tangent.z;\n\n                    tangents[i + length] = tangent.x;\n                    tangents[i + 1 + length] = tangent.y;\n                    tangents[i + 2 + length] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[i ] = bitangent.x;\n                    bitangents[i1] = bitangent.y;\n                    bitangents[i2] = bitangent.z;\n\n                    bitangents[i + length] = bitangent.x;\n                    bitangents[i1 + length] = bitangent.y;\n                    bitangents[i2 + length] = bitangent.z;\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function computeWallIndices(positions) {\n        var length = positions.length / 3;\n        var indices = IndexDatatype.createTypedArray(length, length * 6);\n        var index = 0;\n        for (var i = 0; i < length; i++) {\n            var UL = i;\n            var LL = i + length;\n            var UR = (UL + 1) % length;\n            var LR = UR + length;\n            indices[index++] = UL;\n            indices[index++] = LL;\n            indices[index++] = UR;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n        }\n\n        return indices;\n    }\n\n    var topBoundingSphere = new BoundingSphere();\n    var bottomBoundingSphere = new BoundingSphere();\n\n    function computeExtrudedEllipse(options) {\n        var center = options.center;\n        var ellipsoid = options.ellipsoid;\n        var semiMajorAxis = options.semiMajorAxis;\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\n        topBoundingSphere.radius = semiMajorAxis;\n\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\n        bottomBoundingSphere.radius = semiMajorAxis;\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var outerPositions = cep.outerPositions;\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\n        var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\n        var indices = topIndices(numPts);\n        var length = indices.length;\n        indices.length = length * 2;\n        var posLength = positions.length / 3;\n        for (var i = 0; i < length; i += 3) {\n            indices[i + length] = indices[i + 2] + posLength;\n            indices[i + 1 + length] = indices[i + 1] + posLength;\n            indices[i + 2 + length] = indices[i] + posLength;\n        }\n\n        var topBottomIndices = IndexDatatype.createTypedArray(posLength * 2 / 3, indices);\n\n        var topBottomGeo = new Geometry({\n            attributes : topBottomAttributes,\n            indices : topBottomIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var wallAttributes = computeWallAttributes(outerPositions, options);\n        indices = computeWallIndices(outerPositions);\n        var wallIndices = IndexDatatype.createTypedArray(outerPositions.length * 2 / 3, indices);\n\n        var wallGeo = new Geometry({\n            attributes : wallAttributes,\n            indices : wallIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var geo = GeometryPipeline.combineInstances([\n            new GeometryInstance({\n                geometry : topBottomGeo\n            }),\n            new GeometryInstance({\n                geometry : wallGeo\n            })\n        ]);\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : geo[0].attributes,\n            indices : geo[0].indices\n        };\n    }\n\n    function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : center,\n            semiMajorAxis : semiMajorAxis,\n            semiMinorAxis : semiMinorAxis,\n            rotation : rotation,\n            granularity : granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n        var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\n        // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\n        // When this happens, make the rectangle into a \"circle\" around the pole\n        if (rectangle.width > CesiumMath.PI) {\n            rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\n            rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\n            rectangle.east = CesiumMath.PI;\n            rectangle.west = -CesiumMath.PI;\n        }\n        return rectangle;\n    }\n\n    /**\n     * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias EllipseGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     *\n     * @example\n     * // Create an ellipse.\n     * var ellipse = new Cesium.EllipseGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   semiMajorAxis : 500000.0,\n     *   semiMinorAxis : 300000.0,\n     *   rotation : Cesium.Math.toRadians(60.0)\n     * });\n     * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\n     *\n     * @see EllipseGeometry.createGeometry\n     */\n    function EllipseGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('options.center', center);\n        Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\n        Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\n        if (semiMajorAxis < semiMinorAxis) {\n            throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\n        }\n        if (granularity <= 0.0) {\n            throw new DeveloperError('granularity must be greater than zero.');\n        }\n        //>>includeEnd('debug');\n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._center = Cartesian3.clone(center);\n        this._semiMajorAxis = semiMajorAxis;\n        this._semiMinorAxis = semiMinorAxis;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._height = Math.max(extrudedHeight, height);\n        this._granularity = granularity;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._extrudedHeight = Math.min(extrudedHeight, height);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createEllipseGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n\n        this._rectangle = undefined;\n        this._textureCoordinateRotationPoints = undefined;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipseGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipseGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('value', value);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._center, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._semiMajorAxis;\n        array[startingIndex++] = value._semiMinorAxis;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        center : scratchCenter,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        rotation : undefined,\n        stRotation : undefined,\n        height : undefined,\n        granularity : undefined,\n        extrudedHeight : undefined,\n        shadowVolume: undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipseGeometry} [result] The object into which to store the result.\n     * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\n     */\n    EllipseGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('array', array);\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n        startingIndex += Cartesian3.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var semiMajorAxis = array[startingIndex++];\n        var semiMinorAxis = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var height = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.granularity = granularity;\n            scratchOptions.stRotation = stRotation;\n            scratchOptions.rotation = rotation;\n            scratchOptions.semiMajorAxis = semiMajorAxis;\n            scratchOptions.semiMinorAxis = semiMinorAxis;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new EllipseGeometry(scratchOptions);\n        }\n\n        result._center = Cartesian3.clone(center, result._center);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._semiMajorAxis = semiMajorAxis;\n        result._semiMinorAxis = semiMinorAxis;\n        result._rotation = rotation;\n        result._stRotation = stRotation;\n        result._height = height;\n        result._granularity = granularity;\n        result._extrudedHeight = extrudedHeight;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle based on the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {Rectangle} [result] An object in which to store the result\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    EllipseGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var rotation = defaultValue(options.rotation, 0.0);\n\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('options.center', center);\n        Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\n        Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\n        if (semiMajorAxis < semiMinorAxis) {\n            throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\n        }\n        if (granularity <= 0.0) {\n            throw new DeveloperError('granularity must be greater than zero.');\n        }\n        //>>includeEnd('debug');\n\n        return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\n    };\n\n    /**\n     * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipseGeometry.createGeometry = function(ellipseGeometry) {\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\n            return;\n        }\n\n        var height = ellipseGeometry._height;\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\n        var options = {\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipseGeometry._ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            height : height,\n            granularity : ellipseGeometry._granularity,\n            vertexFormat : ellipseGeometry._vertexFormat,\n            stRotation : ellipseGeometry._stRotation\n        };\n        var geometry;\n        if (extrude) {\n            options.extrudedHeight = extrudedHeight;\n            options.shadowVolume = ellipseGeometry._shadowVolume;\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\n            geometry = computeExtrudedEllipse(options);\n        } else {\n            geometry = computeEllipse(options);\n\n            if (defined(ellipseGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : geometry.boundingSphere,\n            offsetAttribute : ellipseGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = ellipseGeometry._granularity;\n        var ellipsoid = ellipseGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new EllipseGeometry({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            stRotation : ellipseGeometry._stRotation,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    function textureCoordinateRotationPoints(ellipseGeometry) {\n        var stRotation = -ellipseGeometry._stRotation;\n        if (stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            rotation : ellipseGeometry._rotation,\n            granularity : ellipseGeometry._granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n\n        var ellipsoid = ellipseGeometry._ellipsoid;\n        var boundingRectangle = ellipseGeometry.rectangle;\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\n    }\n\n    Object.defineProperties(EllipseGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\n                }\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\nexport default EllipseGeometry;\n"],"names":["Cartesian3","Cartesian2","Matrix3","Quaternion","Cartographic","GeographicProjection","GeometryAttributes","EllipseGeometryLibrary","GeometryAttribute","ComponentDatatype","defined","GeometryOffsetAttribute","arrayFill","BoundingSphere","IndexDatatype","Geometry","PrimitiveType","GeometryPipeline","GeometryInstance","Rectangle","CesiumMath","defaultValue","Ellipsoid","VertexFormat","Check","DeveloperError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IA2BI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,eAAe,GAAG,IAAIC,qBAAU,EAAE,CAAC;IAC3C,IAAI,IAAI,oBAAoB,GAAG,IAAIC,kBAAO,EAAE,CAAC;IAC7C,IAAI,IAAI,oBAAoB,GAAG,IAAIA,kBAAO,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIC,qBAAU,EAAE,CAAC;AAC7C;IACA,IAAI,IAAI,aAAa,GAAG,IAAIH,qBAAU,EAAE,CAAC;IACzC,IAAI,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC5C;IACA,IAAI,IAAI,mBAAmB,GAAG,IAAII,uBAAY,EAAE,CAAC;IACjD,IAAI,IAAI,sBAAsB,GAAG,IAAIJ,qBAAU,EAAE,CAAC;AAClD;IACA,IAAI,IAAI,kBAAkB,GAAG,IAAIC,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAC9C;IACA,IAAI,SAAS,0BAA0B,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE;IACrE,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1C,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IAC5C,QAAQ,IAAI,IAAI,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/E,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;AAChD;IACA,QAAQ,IAAI,kBAAkB,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC5F,QAAQ,IAAI,OAAO,GAAG,CAAC,YAAY,CAAC,MAAM,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACrF,QAAQ,IAAI,QAAQ,GAAG,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACvF,QAAQ,IAAI,UAAU,GAAG,CAAC,YAAY,CAAC,SAAS,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AAC3F;IACA,QAAQ,IAAI,cAAc,GAAG,CAAC,YAAY,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AACrF;IACA,QAAQ,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAClC;IACA;IACA;IACA,QAAQ,IAAI,MAAM,GAAG,aAAa,CAAC;IACnC,QAAQ,IAAI,OAAO,GAAG,cAAc,CAAC;IACrC,QAAQ,IAAI,SAAS,GAAG,gBAAgB,CAAC;AACzC;IACA,QAAQ,IAAI,UAAU,GAAG,IAAII,+BAAoB,CAAC,SAAS,CAAC,CAAC;IAC7D,QAAQ,IAAI,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAAE,sBAAsB,CAAC,CAAC;AACzI;IACA,QAAQ,IAAI,cAAc,GAAG,SAAS,CAAC,sBAAsB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACzF,QAAQ,SAAS,CAAC,qBAAqB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;AACxE;IACA,QAAQ,IAAI,aAAa,GAAG,oBAAoB,CAAC;IACjD,QAAQ,IAAI,aAAa,GAAG,oBAAoB,CAAC;IACjD,QAAQ,IAAI,UAAU,KAAK,CAAC,EAAE;IAC9B,YAAY,IAAI,QAAQ,GAAGF,qBAAU,CAAC,aAAa,CAAC,cAAc,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;IACnG,YAAY,aAAa,GAAGD,kBAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AAC5E;IACA,YAAY,QAAQ,GAAGC,qBAAU,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAChG,YAAY,aAAa,GAAGD,kBAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC5E,SAAS,MAAM;IACf,YAAY,aAAa,GAAGA,kBAAO,CAAC,KAAK,CAACA,kBAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3E,YAAY,aAAa,GAAGA,kBAAO,CAAC,KAAK,CAACA,kBAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3E,SAAS;AACT;IACA,QAAQ,IAAI,WAAW,GAAGD,qBAAU,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;IAC1H,QAAQ,IAAI,WAAW,GAAGA,qBAAU,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;AAC1H;IACA,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,IAAI,YAAY,GAAG,CAAC,OAAO,IAAI,MAAM,GAAG,CAAC,CAAC;IAClD,QAAQ,IAAI,QAAQ,GAAG,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,IAAI,QAAQ,GAAGD,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;AACjF;IACA,YAAY,IAAI,YAAY,CAAC,EAAE,EAAE;IACjC,gBAAgB,IAAI,YAAY,GAAGE,kBAAO,CAAC,gBAAgB,CAAC,aAAa,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACxG,gBAAgB,IAAI,cAAc,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,EAAE,mBAAmB,CAAC,EAAE,iBAAiB,CAAC,CAAC;IACjJ,gBAAgBF,qBAAU,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;AACrF;IACA,gBAAgB,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,aAAa,KAAK,GAAG,GAAG,aAAa,CAAC,CAAC;IAC/F,gBAAgB,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,aAAa,KAAK,GAAG,GAAG,aAAa,CAAC,CAAC;AAC/F;IACA,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AAC3E;IACA,gBAAgB,IAAI,OAAO,EAAE;IAC7B,oBAAoB,kBAAkB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IACzF,oBAAoB,kBAAkB,CAAC,iBAAiB,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC7F,iBAAiB;AACjB;IACA,gBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC5E,gBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC5E,aAAa;AACb;IACA,YAAY,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,IAAI,YAAY,EAAE;IACvG,gBAAgB,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC3E;IACA,gBAAgB,IAAI,YAAY,EAAE;IAClC,oBAAoB,cAAc,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,oBAAoB,cAAc,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,oBAAoB,cAAc,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;IAC3F,oBAAoB,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;IACxE,wBAAwB,OAAO,GAAGA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;IACtH,wBAAwBE,kBAAO,CAAC,gBAAgB,CAAC,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAClF,qBAAqB;IACrB,oBAAoB,IAAI,YAAY,CAAC,MAAM,EAAE;IAC7C,wBAAwB,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC9C,wBAAwB,OAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC/C,wBAAwB,OAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC/C,wBAAwB,IAAI,OAAO,EAAE;IACrC,4BAA4B,OAAO,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,4BAA4B,OAAO,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,4BAA4B,OAAO,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,yBAAyB;IACzB,qBAAqB;AACrB;IACA,oBAAoB,IAAI,YAAY,CAAC,OAAO,EAAE;IAC9C,wBAAwB,QAAQ,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAChD,wBAAwB,QAAQ,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACjD,wBAAwB,QAAQ,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACjD,wBAAwB,IAAI,OAAO,EAAE;IACrC,4BAA4B,QAAQ,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,4BAA4B,QAAQ,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACrE,4BAA4B,QAAQ,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACrE,yBAAyB;IACzB,qBAAqB;AACrB;IACA,oBAAoB,IAAI,YAAY,CAAC,SAAS,EAAE;IAChD,wBAAwB,SAAS,GAAGF,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;IAClH,wBAAwB,UAAU,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;IACrD,wBAAwB,UAAU,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACrD,wBAAwB,UAAU,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACrD,wBAAwB,IAAI,OAAO,EAAE;IACrC,4BAA4B,UAAU,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACvE,4BAA4B,UAAU,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACxE,4BAA4B,UAAU,CAAC,EAAE,GAAG,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACxE,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,EAAE,EAAE;IAC7B,YAAY,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC/C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAChD,gBAAgB,kBAAkB,CAAC,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAClH,gBAAgB,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAC1H,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,IAAIM,qCAAkB,EAAE,CAAC;AAClD;IACA,QAAQ,IAAI,YAAY,CAAC,QAAQ,EAAE;IACnC,YAAY,IAAI,cAAc,GAAGC,6CAAsB,CAAC,sBAAsB,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC5G,YAAY,UAAU,CAAC,QAAQ,GAAG,IAAIC,mCAAiB,CAAC;IACxD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IAC5D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,cAAc;IACvC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,EAAE,EAAE;IAC7B,YAAY,UAAU,CAAC,EAAE,GAAG,IAAID,mCAAiB,CAAC;IAClD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,kBAAkB;IAC3C,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE;IACjC,YAAY,UAAU,CAAC,MAAM,GAAG,IAAID,mCAAiB,CAAC;IACtD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,OAAO;IAChC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,OAAO,EAAE;IAClC,YAAY,UAAU,CAAC,OAAO,GAAG,IAAID,mCAAiB,CAAC;IACvD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,QAAQ;IACjC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,SAAS,EAAE;IACpC,YAAY,UAAU,CAAC,SAAS,GAAG,IAAID,mCAAiB,CAAC;IACzD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,UAAU;IACnC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,EAAE;IAC1B,YAAY,UAAU,CAAC,gBAAgB,GAAG,IAAID,mCAAiB,CAAC;IAChE,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,cAAc;IACvC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,IAAIC,YAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;IACzD,YAAY,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;IACvD,YAAY,IAAI,OAAO,CAAC,eAAe,KAAKC,+CAAuB,CAAC,GAAG,EAAE;IACzE,gBAAgB,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;IAC7E,aAAa,MAAM;IACnB,gBAAgB,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,KAAKD,+CAAuB,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACnG,gBAAgB,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IAC1E,aAAa;AACb;IACA,YAAY,UAAU,CAAC,WAAW,GAAG,IAAIJ,mCAAiB,CAAC;IAC3D,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,aAAa;IACnE,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,eAAe;IACxC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,SAAS,UAAU,CAAC,MAAM,EAAE;IAChC;IACA;IACA;IACA;IACA;AACA;IACA,QAAQ,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,EAAE,IAAI,MAAM,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACnE,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,SAAS,CAAC;IACtB,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAI,aAAa,CAAC;IAC1B,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;IACd;AACA;IACA,QAAQ,SAAS,GAAG,CAAC,CAAC;IACtB,QAAQ,aAAa,GAAG,CAAC,CAAC;IAC1B,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAChC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IACtD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACpD,SAAS;AACT;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,aAAa,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACxC;IACA,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IACtD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;AACpD;IACA,YAAY,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAClD;IACA,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACxD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IACtD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;AACpD;IACA,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IAC1D,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IACpD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACxD,aAAa;AACb;IACA,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IACtD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACpD,SAAS;AACT;IACA;IACA,QAAQ,WAAW,GAAG,MAAM,GAAG,CAAC,CAAC;IACjC,QAAQ,EAAE,aAAa,CAAC;IACxB,QAAQ,EAAE,SAAS,CAAC;IACpB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC9C,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACpD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAClD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;AAChD;IACA,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IACtD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACpD,SAAS;AACT;IACA,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IAChD,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAC9C,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;AAC5C;IACA,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IAClD,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAC9C,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;AAC5C;IACA;IACA,QAAQ,EAAE,SAAS,CAAC;IACpB,QAAQ,KAAK,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAClD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;AACpD;IACA,YAAY,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAClD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACxD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IACtD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;AACpD;IACA,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IAC1D,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IACpD,gBAAgB,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACxD,aAAa;AACb;IACA,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAClD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAClD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;IACtD,SAAS;AACT;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAChC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC;IAClD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC;IAChD,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,aAAa,CAAC;IACpD,SAAS;IACT,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK;AACL;IACA,IAAI,IAAI,oBAAoB,GAAG,IAAIT,qBAAU,EAAE,CAAC;AAChD;IACA,IAAI,SAAS,cAAc,CAAC,OAAO,EAAE;IACrC,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,oBAAoB,GAAGA,qBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,qBAAqB,CAAC,MAAM,EAAE,oBAAoB,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;IACxK,QAAQ,oBAAoB,GAAGA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;IAClG,QAAQ,IAAI,cAAc,GAAG,IAAIa,yBAAc,CAAC,oBAAoB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;IAC7F,QAAQ,IAAI,GAAG,GAAGN,6CAAsB,CAAC,uBAAuB,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACvF,QAAQ,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;IACtC,QAAQ,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAChC,QAAQ,IAAI,UAAU,GAAG,0BAA0B,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/E,QAAQ,IAAI,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACzC,QAAQ,OAAO,GAAGO,2BAAa,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IAChF,QAAQ,OAAO;IACf,YAAY,cAAc,GAAG,cAAc;IAC3C,YAAY,UAAU,GAAG,UAAU;IACnC,YAAY,OAAO,GAAG,OAAO;IAC7B,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,SAAS,qBAAqB,CAAC,SAAS,EAAE,OAAO,EAAE;IACvD,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1C,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;IACpD,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IAC5C,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5C;IACA,QAAQ,IAAI,cAAc,GAAG,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IACxD,QAAQ,IAAI,kBAAkB,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC5F,QAAQ,IAAI,OAAO,GAAG,CAAC,YAAY,CAAC,MAAM,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACrF,QAAQ,IAAI,QAAQ,GAAG,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACvF,QAAQ,IAAI,UAAU,GAAG,CAAC,YAAY,CAAC,SAAS,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AAC3F;IACA,QAAQ,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAChD,QAAQ,IAAI,cAAc,GAAG,CAAC,YAAY,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AACrF;IACA,QAAQ,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAClC;IACA;IACA;IACA,QAAQ,IAAI,MAAM,GAAG,aAAa,CAAC;IACnC,QAAQ,IAAI,OAAO,GAAG,cAAc,CAAC;IACrC,QAAQ,IAAI,SAAS,GAAG,gBAAgB,CAAC;AACzC;IACA,QAAQ,IAAI,UAAU,GAAG,IAAIT,+BAAoB,CAAC,SAAS,CAAC,CAAC;IAC7D,QAAQ,IAAI,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAAE,sBAAsB,CAAC,CAAC;AACzI;IACA,QAAQ,IAAI,cAAc,GAAG,SAAS,CAAC,sBAAsB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACzF,QAAQ,SAAS,CAAC,qBAAqB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACxE,QAAQ,IAAI,QAAQ,GAAGF,qBAAU,CAAC,aAAa,CAAC,cAAc,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC/F,QAAQ,IAAI,aAAa,GAAGD,kBAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;AACnF;IACA,QAAQ,IAAI,WAAW,GAAGD,qBAAU,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;IAC1H,QAAQ,IAAI,WAAW,GAAGA,qBAAU,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;AAC1H;IACA,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,IAAI,QAAQ,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,IAAI,QAAQ,GAAGD,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;IACjF,YAAY,IAAI,gBAAgB,CAAC;AACjC;IACA,YAAY,IAAI,YAAY,CAAC,EAAE,EAAE;IACjC,gBAAgB,IAAI,YAAY,GAAGE,kBAAO,CAAC,gBAAgB,CAAC,aAAa,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACxG,gBAAgB,IAAI,cAAc,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,EAAE,mBAAmB,CAAC,EAAE,iBAAiB,CAAC,CAAC;IACjJ,gBAAgBF,qBAAU,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;AACrF;IACA,gBAAgB,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,aAAa,KAAK,GAAG,GAAG,aAAa,CAAC,CAAC;IAC/F,gBAAgB,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,aAAa,KAAK,GAAG,GAAG,aAAa,CAAC,CAAC;AAC/F;IACA,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3E,gBAAgB,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AAC3E;IACA,gBAAgB,kBAAkB,CAAC,iBAAiB,GAAG,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IACrF,gBAAgB,kBAAkB,CAAC,iBAAiB,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AACzF;IACA,gBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC5E,gBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC5E,aAAa;AACb;IACA,YAAY,QAAQ,GAAG,SAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC5E,YAAY,gBAAgB,GAAGA,qBAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAC7E,YAAY,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACvE;IACA,YAAY,IAAI,YAAY,EAAE;IAC9B,gBAAgB,cAAc,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACvD,gBAAgB,cAAc,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACxD,gBAAgB,cAAc,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACxD,aAAa;AACb;IACA,YAAY,IAAI,YAAY,GAAGA,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAC9F,YAAY,QAAQ,GAAGA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IACxE,YAAY,YAAY,GAAGA,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;IAC7F,YAAY,gBAAgB,GAAGA,qBAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;AAChG;IACA,YAAY,IAAI,YAAY,CAAC,QAAQ,EAAE;IACvC,gBAAgB,cAAc,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;IAChE,gBAAgB,cAAc,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;IACjE,gBAAgB,cAAc,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;AACjE;IACA,gBAAgB,cAAc,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;IAC/C,gBAAgB,cAAc,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;IAChD,gBAAgB,cAAc,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;IAChD,aAAa;AACb;IACA,YAAY,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;AACvF;IACA,gBAAgB,SAAS,GAAGA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAChE,gBAAgB,IAAI,IAAI,GAAGA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAChG,gBAAgBA,qBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC1D,gBAAgB,IAAI,MAAM,GAAGA,qBAAU,CAAC,QAAQ,CAAC,gBAAgB,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AAChG;IACA,gBAAgB,MAAM,GAAGA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9F;IACA,gBAAgB,IAAI,YAAY,CAAC,MAAM,EAAE;IACzC,oBAAoB,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC1C,oBAAoB,OAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3C,oBAAoB,OAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAC3C;IACA,oBAAoB,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACnD,oBAAoB,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpD,oBAAoB,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpD,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,OAAO,EAAE;IAC1C,oBAAoB,OAAO,GAAGA,qBAAU,CAAC,SAAS,CAACA,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1G,oBAAoB,QAAQ,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC5C,oBAAoB,QAAQ,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7C,oBAAoB,QAAQ,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;AAC7C;IACA,oBAAoB,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACrD,oBAAoB,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACzD,oBAAoB,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACzD,iBAAiB;AACjB;IACA,gBAAgB,IAAI,YAAY,CAAC,SAAS,EAAE;IAC5C,oBAAoB,UAAU,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;IACjD,oBAAoB,UAAU,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjD,oBAAoB,UAAU,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;AACjD;IACA,oBAAoB,UAAU,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACzD,oBAAoB,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1D,oBAAoB,UAAU,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1D,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,EAAE,EAAE;IAC7B,YAAY,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;IAC/C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAChD,gBAAgB,kBAAkB,CAAC,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAClH,gBAAgB,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAC1H,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,IAAIM,qCAAkB,EAAE,CAAC;AAClD;IACA,QAAQ,IAAI,YAAY,CAAC,QAAQ,EAAE;IACnC,YAAY,UAAU,CAAC,QAAQ,GAAG,IAAIE,mCAAiB,CAAC;IACxD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IAC5D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,cAAc;IACvC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,EAAE,EAAE;IAC7B,YAAY,UAAU,CAAC,EAAE,GAAG,IAAID,mCAAiB,CAAC;IAClD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,kBAAkB;IAC3C,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE;IACjC,YAAY,UAAU,CAAC,MAAM,GAAG,IAAID,mCAAiB,CAAC;IACtD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,OAAO;IAChC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,OAAO,EAAE;IAClC,YAAY,UAAU,CAAC,OAAO,GAAG,IAAID,mCAAiB,CAAC;IACvD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,QAAQ;IACjC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,CAAC,SAAS,EAAE;IACpC,YAAY,UAAU,CAAC,SAAS,GAAG,IAAID,mCAAiB,CAAC;IACzD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,UAAU;IACnC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,EAAE;IAC1B,YAAY,UAAU,CAAC,gBAAgB,GAAG,IAAID,mCAAiB,CAAC;IAChE,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC3D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,cAAc;IACvC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAIC,YAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;IAC9C,YAAY,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;IACvD,YAAY,IAAI,OAAO,CAAC,eAAe,KAAKC,+CAAuB,CAAC,GAAG,EAAE;IACzE,gBAAgB,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;IAC7E,aAAa,MAAM;IACnB,gBAAgB,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,KAAKD,+CAAuB,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACnG,gBAAgB,eAAe,GAAGC,iCAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IAC1E,aAAa;IACb,YAAY,UAAU,CAAC,WAAW,GAAG,IAAIJ,mCAAiB,CAAC;IAC3D,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,aAAa;IACnE,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,eAAe;IACxC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,SAAS,kBAAkB,CAAC,SAAS,EAAE;IAC3C,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1C,QAAQ,IAAI,OAAO,GAAGK,2BAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;IACzE,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;IACzC,YAAY,IAAI,EAAE,GAAG,CAAC,CAAC;IACvB,YAAY,IAAI,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC;IAChC,YAAY,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC;IACvC,YAAY,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;IACjC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,SAAS;AACT;IACA,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK;AACL;IACA,IAAI,IAAI,iBAAiB,GAAG,IAAID,yBAAc,EAAE,CAAC;IACjD,IAAI,IAAI,oBAAoB,GAAG,IAAIA,yBAAc,EAAE,CAAC;AACpD;IACA,IAAI,SAAS,sBAAsB,CAAC,OAAO,EAAE;IAC7C,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1C,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,YAAY,GAAGb,qBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,qBAAqB,CAAC,MAAM,EAAE,iBAAiB,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACtJ,QAAQ,iBAAiB,CAAC,MAAM,GAAGA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAClG,QAAQ,iBAAiB,CAAC,MAAM,GAAG,aAAa,CAAC;AACjD;IACA,QAAQ,YAAY,GAAGA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,qBAAqB,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAChJ,QAAQ,oBAAoB,CAAC,MAAM,GAAGA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,oBAAoB,CAAC,MAAM,CAAC,CAAC;IACxG,QAAQ,oBAAoB,CAAC,MAAM,GAAG,aAAa,CAAC;AACpD;IACA,QAAQ,IAAI,GAAG,GAAGO,6CAAsB,CAAC,uBAAuB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACtF,QAAQ,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;IACtC,QAAQ,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAChC,QAAQ,IAAI,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC;IAChD,QAAQ,IAAI,cAAc,GAAGM,yBAAc,CAAC,KAAK,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;IAC3F,QAAQ,IAAI,mBAAmB,GAAG,0BAA0B,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACvF,QAAQ,IAAI,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACzC,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,OAAO,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC5C,YAAY,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC7D,YAAY,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IACjE,YAAY,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;IAC7D,SAAS;AACT;IACA,QAAQ,IAAI,gBAAgB,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;AAC1F;IACA,QAAQ,IAAI,YAAY,GAAG,IAAIC,0BAAQ,CAAC;IACxC,YAAY,UAAU,GAAG,mBAAmB;IAC5C,YAAY,OAAO,GAAG,gBAAgB;IACtC,YAAY,aAAa,GAAGC,+BAAa,CAAC,SAAS;IACnD,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,cAAc,GAAG,qBAAqB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC5E,QAAQ,OAAO,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACrD,QAAQ,IAAI,WAAW,GAAGF,2BAAa,CAAC,gBAAgB,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;AACjG;IACA,QAAQ,IAAI,OAAO,GAAG,IAAIC,0BAAQ,CAAC;IACnC,YAAY,UAAU,GAAG,cAAc;IACvC,YAAY,OAAO,GAAG,WAAW;IACjC,YAAY,aAAa,GAAGC,+BAAa,CAAC,SAAS;IACnD,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,GAAG,GAAGC,iCAAgB,CAAC,gBAAgB,CAAC;IACpD,YAAY,IAAIC,iCAAgB,CAAC;IACjC,gBAAgB,QAAQ,GAAG,YAAY;IACvC,aAAa,CAAC;IACd,YAAY,IAAIA,iCAAgB,CAAC;IACjC,gBAAgB,QAAQ,GAAG,OAAO;IAClC,aAAa,CAAC;IACd,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO;IACf,YAAY,cAAc,GAAG,cAAc;IAC3C,YAAY,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU;IAC1C,YAAY,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;IACpC,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,SAAS,gBAAgB,CAAC,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE;IAC9G,QAAQ,IAAI,GAAG,GAAGX,6CAAsB,CAAC,uBAAuB,CAAC;IACjE,YAAY,MAAM,GAAG,MAAM;IAC3B,YAAY,aAAa,GAAG,aAAa;IACzC,YAAY,aAAa,GAAG,aAAa;IACzC,YAAY,QAAQ,GAAG,QAAQ;IAC/B,YAAY,WAAW,GAAG,WAAW;IACrC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACxB,QAAQ,IAAI,aAAa,GAAG,GAAG,CAAC,cAAc,CAAC;IAC/C,QAAQ,IAAI,cAAc,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IACtD,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAClD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,EAAE,CAAC,EAAE;IACjD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAGP,qBAAU,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,SAAS,GAAGmB,oBAAS,CAAC,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IACnF;IACA;IACA,QAAQ,IAAI,SAAS,CAAC,KAAK,GAAGC,gBAAU,CAAC,EAAE,EAAE;IAC7C,YAAY,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,GAAG,GAAG,GAAGA,gBAAU,CAAC,WAAW,GAAGA,gBAAU,CAAC,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC;IACrH,YAAY,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,GAAG,GAAG,GAAGA,gBAAU,CAAC,QAAQ,GAAGA,gBAAU,CAAC,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC;IACrH,YAAY,SAAS,CAAC,IAAI,GAAGA,gBAAU,CAAC,EAAE,CAAC;IAC3C,YAAY,SAAS,CAAC,IAAI,GAAG,CAACA,gBAAU,CAAC,EAAE,CAAC;IAC5C,SAAS;IACT,QAAQ,OAAO,SAAS,CAAC;IACzB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,eAAe,CAAC,OAAO,EAAE;IACtC,QAAQ,OAAO,GAAGC,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AACnE;IACA,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,SAAS,GAAGA,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEC,oBAAS,CAAC,KAAK,CAAC,CAAC;IACzE,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,WAAW,GAAGD,iBAAY,CAAC,OAAO,CAAC,WAAW,EAAED,gBAAU,CAAC,kBAAkB,CAAC,CAAC;IAC3F,QAAQ,IAAI,YAAY,GAAGC,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAEE,yBAAY,CAAC,OAAO,CAAC,CAAC;AACpF;IACA;IACA,QAAQC,WAAK,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAChD,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;IACpE,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;IACpE,QAAQ,IAAI,aAAa,GAAG,aAAa,EAAE;IAC3C,YAAY,MAAM,IAAIC,oBAAc,CAAC,mEAAmE,CAAC,CAAC;IAC1G,SAAS;IACT,QAAQ,IAAI,WAAW,IAAI,GAAG,EAAE;IAChC,YAAY,MAAM,IAAIA,oBAAc,CAAC,wCAAwC,CAAC,CAAC;IAC/E,SAAS;IACT;AACA;IACA,QAAQ,IAAI,MAAM,GAAGJ,iBAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACvD,QAAQ,IAAI,cAAc,GAAGA,iBAAY,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AAC1E;IACA,QAAQ,IAAI,CAAC,OAAO,GAAGrB,qBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChD,QAAQ,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IAC5C,QAAQ,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IAC5C,QAAQ,IAAI,CAAC,UAAU,GAAGsB,oBAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,SAAS,GAAGD,iBAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC7D,QAAQ,IAAI,CAAC,WAAW,GAAGA,iBAAY,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACjE,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACxC,QAAQ,IAAI,CAAC,aAAa,GAAGE,yBAAY,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC9D,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAChE,QAAQ,IAAI,CAAC,aAAa,GAAGF,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACvE,QAAQ,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC;IACnD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,eAAe,CAAC;AACxD;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IACpC,QAAQ,IAAI,CAAC,gCAAgC,GAAG,SAAS,CAAC;IAC1D,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,YAAY,GAAGrB,qBAAU,CAAC,YAAY,GAAGsB,oBAAS,CAAC,YAAY,GAAGC,yBAAY,CAAC,YAAY,GAAG,CAAC,CAAC;AACpH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACjE;IACA,QAAQC,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;AACA;IACA,QAAQ,aAAa,GAAGH,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvD;IACA,QAAQrB,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC7D,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;AACjD;IACA,QAAQsB,oBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAChD;IACA,QAAQC,yBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACrE,QAAQ,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AACnD;IACA,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;IACtD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;IACtD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;IACjD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IACnD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;IAC/C,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC;IACpD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC;IACvD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,GAAG,CAAC;IACjE,QAAQ,KAAK,CAAC,aAAa,CAAC,GAAGF,iBAAY,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;AACxE;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,aAAa,GAAG,IAAIrB,qBAAU,EAAE,CAAC;IACzC,IAAI,IAAI,gBAAgB,GAAG,IAAIsB,oBAAS,EAAE,CAAC;IAC3C,IAAI,IAAI,mBAAmB,GAAG,IAAIC,yBAAY,EAAE,CAAC;IACjD,IAAI,IAAI,cAAc,GAAG;IACzB,QAAQ,MAAM,GAAG,aAAa;IAC9B,QAAQ,SAAS,GAAG,gBAAgB;IACpC,QAAQ,YAAY,GAAG,mBAAmB;IAC1C,QAAQ,aAAa,GAAG,SAAS;IACjC,QAAQ,aAAa,GAAG,SAAS;IACjC,QAAQ,QAAQ,GAAG,SAAS;IAC5B,QAAQ,UAAU,GAAG,SAAS;IAC9B,QAAQ,MAAM,GAAG,SAAS;IAC1B,QAAQ,WAAW,GAAG,SAAS;IAC/B,QAAQ,cAAc,GAAG,SAAS;IAClC,QAAQ,YAAY,EAAE,SAAS;IAC/B,QAAQ,eAAe,EAAE,SAAS;IAClC,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACpE;IACA,QAAQC,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;AACA;IACA,QAAQ,aAAa,GAAGH,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvD;IACA,QAAQ,IAAI,MAAM,GAAGrB,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IAC5E,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;AACjD;IACA,QAAQ,IAAI,SAAS,GAAGsB,oBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjF,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAChD;IACA,QAAQ,IAAI,YAAY,GAAGC,yBAAY,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAC;IAC1F,QAAQ,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AACnD;IACA,QAAQ,IAAI,aAAa,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACnD,QAAQ,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC9C,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACjD,QAAQ,IAAI,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACpD,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IAC1D,QAAQ,IAAI,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AACnD;IACA,QAAQ,IAAI,CAACb,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,cAAc,CAAC,MAAM,GAAG,MAAM,CAAC;IAC3C,YAAY,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC;IAC3D,YAAY,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;IACrD,YAAY,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;IACnD,YAAY,cAAc,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC/C,YAAY,cAAc,CAAC,aAAa,GAAG,aAAa,CAAC;IACzD,YAAY,cAAc,CAAC,aAAa,GAAG,aAAa,CAAC;IACzD,YAAY,cAAc,CAAC,YAAY,GAAG,YAAY,CAAC;IACvD,YAAY,cAAc,CAAC,eAAe,GAAG,eAAe,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,CAAC;AAClG;IACA,YAAY,OAAO,IAAI,eAAe,CAAC,cAAc,CAAC,CAAC;IACvD,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,OAAO,GAAGV,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAClE,QAAQ,MAAM,CAAC,UAAU,GAAGsB,oBAAS,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1E,QAAQ,MAAM,CAAC,aAAa,GAAGC,yBAAY,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;IACtF,QAAQ,MAAM,CAAC,cAAc,GAAG,aAAa,CAAC;IAC9C,QAAQ,MAAM,CAAC,cAAc,GAAG,aAAa,CAAC;IAC9C,QAAQ,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;IACpC,QAAQ,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;IACxC,QAAQ,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IAChC,QAAQ,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IAC1C,QAAQ,MAAM,CAAC,eAAe,GAAG,cAAc,CAAC;IAChD,QAAQ,MAAM,CAAC,aAAa,GAAG,YAAY,CAAC;IAC5C,QAAQ,MAAM,CAAC,gBAAgB,GAAG,eAAe,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,CAAC;AACvF;IACA,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,gBAAgB,GAAG,SAAS,OAAO,EAAE,MAAM,EAAE;IACjE,QAAQ,OAAO,GAAGF,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AACnE;IACA,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,SAAS,GAAGA,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEC,oBAAS,CAAC,KAAK,CAAC,CAAC;IACzE,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,WAAW,GAAGD,iBAAY,CAAC,OAAO,CAAC,WAAW,EAAED,gBAAU,CAAC,kBAAkB,CAAC,CAAC;IAC3F,QAAQ,IAAI,QAAQ,GAAGC,iBAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC3D;IACA;IACA,QAAQG,WAAK,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAChD,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;IACpE,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;IACpE,QAAQ,IAAI,aAAa,GAAG,aAAa,EAAE;IAC3C,YAAY,MAAM,IAAIC,oBAAc,CAAC,mEAAmE,CAAC,CAAC;IAC1G,SAAS;IACT,QAAQ,IAAI,WAAW,IAAI,GAAG,EAAE;IAChC,YAAY,MAAM,IAAIA,oBAAc,CAAC,wCAAwC,CAAC,CAAC;IAC/E,SAAS;IACT;AACA;IACA,QAAQ,OAAO,gBAAgB,CAAC,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAChH,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,cAAc,GAAG,SAAS,eAAe,EAAE;IAC/D,QAAQ,IAAI,CAAC,eAAe,CAAC,cAAc,IAAI,GAAG,MAAM,eAAe,CAAC,cAAc,IAAI,GAAG,CAAC,EAAE;IAChG,YAAY,OAAO;IACnB,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC;IAC7C,QAAQ,IAAI,cAAc,GAAG,eAAe,CAAC,eAAe,CAAC;IAC7D,QAAQ,IAAI,OAAO,GAAG,CAACL,gBAAU,CAAC,aAAa,CAAC,MAAM,EAAE,cAAc,EAAE,CAAC,EAAEA,gBAAU,CAAC,QAAQ,CAAC,CAAC;AAChG;IACA,QAAQ,eAAe,CAAC,OAAO,GAAG,eAAe,CAAC,UAAU,CAAC,sBAAsB,CAAC,eAAe,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;IACtI,QAAQ,IAAI,OAAO,GAAG;IACtB,YAAY,MAAM,GAAG,eAAe,CAAC,OAAO;IAC5C,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,SAAS,GAAG,eAAe,CAAC,UAAU;IAClD,YAAY,QAAQ,GAAG,eAAe,CAAC,SAAS;IAChD,YAAY,MAAM,GAAG,MAAM;IAC3B,YAAY,WAAW,GAAG,eAAe,CAAC,YAAY;IACtD,YAAY,YAAY,GAAG,eAAe,CAAC,aAAa;IACxD,YAAY,UAAU,GAAG,eAAe,CAAC,WAAW;IACpD,SAAS,CAAC;IACV,QAAQ,IAAI,QAAQ,CAAC;IACrB,QAAQ,IAAI,OAAO,EAAE;IACrB,YAAY,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;IACpD,YAAY,OAAO,CAAC,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;IACjE,YAAY,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC,gBAAgB,CAAC;IACvE,YAAY,QAAQ,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACvD,SAAS,MAAM;IACf,YAAY,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;AAC/C;IACA,YAAY,IAAIV,YAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE;IAC3D,gBAAgB,IAAI,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;IACxE,gBAAgB,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC7D,gBAAgB,IAAI,WAAW,GAAG,eAAe,CAAC,gBAAgB,KAAKC,+CAAuB,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5G,gBAAgBC,iCAAS,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACpD,gBAAgB,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,IAAIJ,mCAAiB,CAAC;IACxE,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,aAAa;IACvE,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,EAAE,WAAW;IACvC,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,IAAIM,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG,QAAQ,CAAC,UAAU;IAC5C,YAAY,OAAO,GAAG,QAAQ,CAAC,OAAO;IACtC,YAAY,aAAa,GAAGC,+BAAa,CAAC,SAAS;IACnD,YAAY,cAAc,GAAG,QAAQ,CAAC,cAAc;IACpD,YAAY,eAAe,GAAG,eAAe,CAAC,gBAAgB;IAC9D,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,kBAAkB,GAAG,SAAS,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE;IACjG,QAAQ,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACvD,QAAQ,IAAI,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;AACnD;IACA,QAAQ,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9D,QAAQ,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC9D;IACA,QAAQ,OAAO,IAAI,eAAe,CAAC;IACnC,YAAY,MAAM,GAAG,eAAe,CAAC,OAAO;IAC5C,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,SAAS,GAAG,SAAS;IACjC,YAAY,QAAQ,GAAG,eAAe,CAAC,SAAS;IAChD,YAAY,UAAU,GAAG,eAAe,CAAC,WAAW;IACpD,YAAY,WAAW,GAAG,WAAW;IACrC,YAAY,cAAc,GAAG,SAAS;IACtC,YAAY,MAAM,GAAG,SAAS;IAC9B,YAAY,YAAY,GAAGO,yBAAY,CAAC,aAAa;IACrD,YAAY,YAAY,EAAE,IAAI;IAC9B,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA,IAAI,SAAS,+BAA+B,CAAC,eAAe,EAAE;IAC9D,QAAQ,IAAI,UAAU,GAAG,CAAC,eAAe,CAAC,WAAW,CAAC;IACtD,QAAQ,IAAI,UAAU,KAAK,GAAG,EAAE;IAChC,YAAY,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtC,SAAS;AACT;IACA,QAAQ,IAAI,GAAG,GAAGhB,6CAAsB,CAAC,uBAAuB,CAAC;IACjE,YAAY,MAAM,GAAG,eAAe,CAAC,OAAO;IAC5C,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,aAAa,GAAG,eAAe,CAAC,cAAc;IAC1D,YAAY,QAAQ,GAAG,eAAe,CAAC,SAAS;IAChD,YAAY,WAAW,GAAG,eAAe,CAAC,YAAY;IACtD,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACxB,QAAQ,IAAI,aAAa,GAAG,GAAG,CAAC,cAAc,CAAC;IAC/C,QAAQ,IAAI,cAAc,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IACtD,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAClD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,EAAE,CAAC,EAAE;IACjD,YAAY,SAAS,CAAC,CAAC,CAAC,GAAGP,qBAAU,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,SAAS;AACT;IACA,QAAQ,IAAI,SAAS,GAAG,eAAe,CAAC,UAAU,CAAC;IACnD,QAAQ,IAAI,iBAAiB,GAAG,eAAe,CAAC,SAAS,CAAC;IAC1D,QAAQ,OAAOe,0BAAQ,CAAC,gCAAgC,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC9G,KAAK;AACL;IACA,IAAI,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE;IACvD;IACA;IACA;IACA,QAAQ,SAAS,GAAG;IACpB,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,IAAI,CAACL,YAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;IAC/C,oBAAoB,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACnK,iBAAiB;IACjB,gBAAgB,OAAO,IAAI,CAAC,UAAU,CAAC;IACvC,aAAa;IACb,SAAS;IACT;IACA;IACA;IACA;IACA,QAAQ,+BAA+B,GAAG;IAC1C,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,IAAI,CAACA,YAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,EAAE;IACrE,oBAAoB,IAAI,CAAC,gCAAgC,GAAG,+BAA+B,CAAC,IAAI,CAAC,CAAC;IAClG,iBAAiB;IACjB,gBAAgB,OAAO,IAAI,CAAC,gCAAgC,CAAC;IAC7D,aAAa;IACb,SAAS;IACT,KAAK,CAAC;;;;;;;;"}