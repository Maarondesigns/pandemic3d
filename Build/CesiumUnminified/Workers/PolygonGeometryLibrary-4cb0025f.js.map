{"version":3,"file":"PolygonGeometryLibrary-4cb0025f.js","sources":["../../../../Source/Core/Queue.js","../../../../Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["\n    /**\n     * A queue that can enqueue items at the end, and dequeue items from the front.\n     *\n     * @alias Queue\n     * @constructor\n     */\n    function Queue() {\n        this._array = [];\n        this._offset = 0;\n        this._length = 0;\n    }\n\n    Object.defineProperties(Queue.prototype, {\n        /**\n         * The length of the queue.\n         *\n         * @memberof Queue.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._length;\n            }\n        }\n    });\n\n    /**\n     * Enqueues the specified item.\n     *\n     * @param {*} item The item to enqueue.\n     */\n    Queue.prototype.enqueue = function(item) {\n        this._array.push(item);\n        this._length++;\n    };\n\n    /**\n     * Dequeues an item.  Returns undefined if the queue is empty.\n     *\n     * @returns {*} The the dequeued item.\n     */\n    Queue.prototype.dequeue = function() {\n        if (this._length === 0) {\n            return undefined;\n        }\n\n        var array = this._array;\n        var offset = this._offset;\n        var item = array[offset];\n        array[offset] = undefined;\n\n        offset++;\n        if ((offset > 10) && (offset * 2 > array.length)) {\n            //compact array\n            this._array = array.slice(offset);\n            offset = 0;\n        }\n\n        this._offset = offset;\n        this._length--;\n\n        return item;\n    };\n\n    /**\n     * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n     *\n     * @returns {*} The item at the front of the queue.\n     */\n    Queue.prototype.peek = function() {\n        if (this._length === 0) {\n            return undefined;\n        }\n\n        return this._array[this._offset];\n    };\n\n    /**\n     * Check whether this queue contains the specified item.\n     *\n     * @param {*} item The item to search for.\n     */\n    Queue.prototype.contains = function(item) {\n        return this._array.indexOf(item) !== -1;\n    };\n\n    /**\n     * Remove all items from the queue.\n     */\n    Queue.prototype.clear = function() {\n        this._array.length = this._offset = this._length = 0;\n    };\n\n    /**\n     * Sort the items in the queue in-place.\n     *\n     * @param {Queue~Comparator} compareFunction A function that defines the sort order.\n     */\n    Queue.prototype.sort = function(compareFunction) {\n        if (this._offset > 0) {\n            //compact array\n            this._array = this._array.slice(this._offset);\n            this._offset = 0;\n        }\n\n        this._array.sort(compareFunction);\n    };\n\n    /**\n     * A function used to compare two items while sorting a queue.\n     * @callback Queue~Comparator\n     *\n     * @param {*} a An item in the array.\n     * @param {*} b An item in the array.\n     * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n     *          a positive value if <code>a</code> is greater than <code>b</code>, or\n     *          0 if <code>a</code> is equal to <code>b</code>.\n     *\n     * @example\n     * function compareNumbers(a, b) {\n     *     return a - b;\n     * }\n     */\nexport default Queue;\n","import ArcType from './ArcType.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport Queue from './Queue.js';\nimport WindingOrder from './WindingOrder.js';\n\n    /**\n     * @private\n     */\n    var PolygonGeometryLibrary = {};\n\n    PolygonGeometryLibrary.computeHierarchyPackedLength = function(polygonHierarchy) {\n        var numComponents = 0;\n        var stack = [polygonHierarchy];\n        while (stack.length > 0) {\n            var hierarchy = stack.pop();\n            if (!defined(hierarchy)) {\n                continue;\n            }\n\n            numComponents += 2;\n\n            var positions = hierarchy.positions;\n            var holes = hierarchy.holes;\n\n            if (defined(positions)) {\n                numComponents += positions.length * Cartesian3.packedLength;\n            }\n\n            if (defined(holes)) {\n                var length = holes.length;\n                for (var i = 0; i < length; ++i) {\n                    stack.push(holes[i]);\n                }\n            }\n        }\n\n        return numComponents;\n    };\n\n    PolygonGeometryLibrary.packPolygonHierarchy = function(polygonHierarchy, array, startingIndex) {\n        var stack = [polygonHierarchy];\n        while (stack.length > 0) {\n            var hierarchy = stack.pop();\n            if (!defined(hierarchy)) {\n                continue;\n            }\n\n            var positions = hierarchy.positions;\n            var holes = hierarchy.holes;\n\n            array[startingIndex++] = defined(positions) ? positions.length : 0;\n            array[startingIndex++] = defined(holes) ? holes.length : 0;\n\n            if (defined(positions)) {\n                var positionsLength = positions.length;\n                for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\n                    Cartesian3.pack(positions[i], array, startingIndex);\n                }\n            }\n\n            if (defined(holes)) {\n                var holesLength = holes.length;\n                for (var j = 0; j < holesLength; ++j) {\n                    stack.push(holes[j]);\n                }\n            }\n        }\n\n        return startingIndex;\n    };\n\n    PolygonGeometryLibrary.unpackPolygonHierarchy = function(array, startingIndex) {\n        var positionsLength = array[startingIndex++];\n        var holesLength = array[startingIndex++];\n\n        var positions = new Array(positionsLength);\n        var holes = holesLength > 0 ? new Array(holesLength) : undefined;\n\n        for (var i = 0; i < positionsLength; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        for (var j = 0; j < holesLength; ++j) {\n            holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n            startingIndex = holes[j].startingIndex;\n            delete holes[j].startingIndex;\n        }\n\n        return {\n            positions : positions,\n            holes : holes,\n            startingIndex : startingIndex\n        };\n    };\n\n    var distanceScratch = new Cartesian3();\n    function getPointAtDistance(p0, p1, distance, length) {\n        Cartesian3.subtract(p1, p0, distanceScratch);\n        Cartesian3.multiplyByScalar(distanceScratch, distance / length, distanceScratch);\n        Cartesian3.add(p0, distanceScratch, distanceScratch);\n        return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\n    }\n\n    PolygonGeometryLibrary.subdivideLineCount = function(p0, p1, minDistance) {\n        var distance = Cartesian3.distance(p0, p1);\n        var n = distance / minDistance;\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n        return Math.pow(2, countDivide);\n    };\n\n    var scratchCartographic0 = new Cartographic();\n    var scratchCartographic1 = new Cartographic();\n    var scratchCartographic2 = new Cartographic();\n    var scratchCartesian0 = new Cartesian3();\n    PolygonGeometryLibrary.subdivideRhumbLineCount = function(ellipsoid, p0, p1, minDistance) {\n        var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n        var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n        var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n        var n = rhumb.surfaceDistance / minDistance;\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n        return Math.pow(2, countDivide);\n    };\n\n    PolygonGeometryLibrary.subdivideLine = function(p0, p1, minDistance, result) {\n        var numVertices = PolygonGeometryLibrary.subdivideLineCount(p0, p1, minDistance);\n        var length = Cartesian3.distance(p0, p1);\n        var distanceBetweenVertices = length / numVertices;\n\n        if (!defined(result)) {\n            result = [];\n        }\n\n        var positions = result;\n        positions.length = numVertices * 3;\n\n        var index = 0;\n        for ( var i = 0; i < numVertices; i++) {\n            var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\n            positions[index++] = p[0];\n            positions[index++] = p[1];\n            positions[index++] = p[2];\n        }\n\n        return positions;\n    };\n\n    PolygonGeometryLibrary.subdivideRhumbLine = function(ellipsoid, p0, p1, minDistance, result) {\n        var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n        var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n        var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n\n        var n = rhumb.surfaceDistance / minDistance;\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n        var numVertices = Math.pow(2, countDivide);\n        var distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\n\n        if (!defined(result)) {\n            result = [];\n        }\n\n        var positions = result;\n        positions.length = numVertices * 3;\n\n        var index = 0;\n        for ( var i = 0; i < numVertices; i++) {\n            var c = rhumb.interpolateUsingSurfaceDistance(i * distanceBetweenVertices, scratchCartographic2);\n            var p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\n            positions[index++] = p.x;\n            positions[index++] = p.y;\n            positions[index++] = p.z;\n        }\n\n        return positions;\n    };\n\n    var scaleToGeodeticHeightN1 = new Cartesian3();\n    var scaleToGeodeticHeightN2 = new Cartesian3();\n    var scaleToGeodeticHeightP1 = new Cartesian3();\n    var scaleToGeodeticHeightP2 = new Cartesian3();\n\n    PolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function(geometry, maxHeight, minHeight, ellipsoid, perPositionHeight) {\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n        var n1 = scaleToGeodeticHeightN1;\n        var n2 = scaleToGeodeticHeightN2;\n        var p = scaleToGeodeticHeightP1;\n        var p2 = scaleToGeodeticHeightP2;\n\n        if (defined(geometry) && defined(geometry.attributes) && defined(geometry.attributes.position)) {\n            var positions = geometry.attributes.position.values;\n            var length = positions.length / 2;\n\n            for ( var i = 0; i < length; i += 3) {\n                Cartesian3.fromArray(positions, i, p);\n\n                ellipsoid.geodeticSurfaceNormal(p, n1);\n                p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\n                n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\n                n2 = Cartesian3.add(p2, n2, n2);\n                positions[i + length] = n2.x;\n                positions[i + 1 + length] = n2.y;\n                positions[i + 2 + length] = n2.z;\n\n                if (perPositionHeight) {\n                    p2 = Cartesian3.clone(p, p2);\n                }\n                n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\n                n2 = Cartesian3.add(p2, n2, n2);\n                positions[i] = n2.x;\n                positions[i + 1] = n2.y;\n                positions[i + 2] = n2.z;\n            }\n        }\n        return geometry;\n    };\n\n    PolygonGeometryLibrary.polygonOutlinesFromHierarchy = function(polygonHierarchy, scaleToEllipsoidSurface, ellipsoid) {\n        // create from a polygon hierarchy\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n        var polygons = [];\n        var queue = new Queue();\n        queue.enqueue(polygonHierarchy);\n        var i;\n        var j;\n        var length;\n        while (queue.length !== 0) {\n            var outerNode = queue.dequeue();\n            var outerRing = outerNode.positions;\n            if (scaleToEllipsoidSurface) {\n                length = outerRing.length;\n                for (i = 0; i < length; i++) {\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n                }\n            }\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\n            if (outerRing.length < 3) {\n                continue;\n            }\n\n            var numChildren = outerNode.holes ? outerNode.holes.length : 0;\n            // The outer polygon contains inner polygons\n            for (i = 0; i < numChildren; i++) {\n                var hole = outerNode.holes[i];\n                var holePositions = hole.positions;\n                if (scaleToEllipsoidSurface) {\n                    length = holePositions.length;\n                    for (j = 0; j < length; ++j) {\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n                    }\n                }\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\n                if (holePositions.length < 3) {\n                    continue;\n                }\n                polygons.push(holePositions);\n\n                var numGrandchildren = 0;\n                if (defined(hole.holes)) {\n                    numGrandchildren = hole.holes.length;\n                }\n\n                for (j = 0; j < numGrandchildren; j++) {\n                    queue.enqueue(hole.holes[j]);\n                }\n            }\n\n            polygons.push(outerRing);\n        }\n\n        return polygons;\n    };\n\n    PolygonGeometryLibrary.polygonsFromHierarchy = function(polygonHierarchy, projectPointsTo2D, scaleToEllipsoidSurface, ellipsoid) {\n        // create from a polygon hierarchy\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n        var hierarchy = [];\n        var polygons = [];\n\n        var queue = new Queue();\n        queue.enqueue(polygonHierarchy);\n\n        while (queue.length !== 0) {\n            var outerNode = queue.dequeue();\n            var outerRing = outerNode.positions;\n            var holes = outerNode.holes;\n\n            var i;\n            var length;\n            if (scaleToEllipsoidSurface) {\n                length = outerRing.length;\n                for (i = 0; i < length; i++) {\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n                }\n            }\n\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\n            if (outerRing.length < 3) {\n                continue;\n            }\n\n            var positions2D = projectPointsTo2D(outerRing);\n            if (!defined(positions2D)) {\n                continue;\n            }\n            var holeIndices = [];\n\n            var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n            if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n                positions2D.reverse();\n                outerRing = outerRing.slice().reverse();\n            }\n\n            var positions = outerRing.slice();\n            var numChildren = defined(holes) ? holes.length : 0;\n            var polygonHoles = [];\n            var j;\n\n            for (i = 0; i < numChildren; i++) {\n                var hole = holes[i];\n                var holePositions = hole.positions;\n                if (scaleToEllipsoidSurface) {\n                    length = holePositions.length;\n                    for (j = 0; j < length; ++j) {\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n                    }\n                }\n\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\n                if (holePositions.length < 3) {\n                    continue;\n                }\n\n                var holePositions2D = projectPointsTo2D(holePositions);\n                if (!defined(holePositions2D)) {\n                    continue;\n                }\n\n                originalWindingOrder = PolygonPipeline.computeWindingOrder2D(holePositions2D);\n                if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n                    holePositions2D.reverse();\n                    holePositions = holePositions.slice().reverse();\n                }\n\n                polygonHoles.push(holePositions);\n                holeIndices.push(positions.length);\n                positions = positions.concat(holePositions);\n                positions2D = positions2D.concat(holePositions2D);\n\n                var numGrandchildren = 0;\n                if (defined(hole.holes)) {\n                    numGrandchildren = hole.holes.length;\n                }\n\n                for (j = 0; j < numGrandchildren; j++) {\n                    queue.enqueue(hole.holes[j]);\n                }\n            }\n\n            hierarchy.push({\n                outerRing : outerRing,\n                holes : polygonHoles\n            });\n            polygons.push({\n                positions : positions,\n                positions2D : positions2D,\n                holes : holeIndices\n            });\n        }\n\n        return {\n            hierarchy : hierarchy,\n            polygons : polygons\n        };\n    };\n\n    var computeBoundingRectangleCartesian2 = new Cartesian2();\n    var computeBoundingRectangleCartesian3 = new Cartesian3();\n    var computeBoundingRectangleQuaternion = new Quaternion();\n    var computeBoundingRectangleMatrix3 = new Matrix3();\n    PolygonGeometryLibrary.computeBoundingRectangle = function (planeNormal, projectPointTo2D, positions, angle, result) {\n        var rotation = Quaternion.fromAxisAngle(planeNormal, angle, computeBoundingRectangleQuaternion);\n        var textureMatrix = Matrix3.fromQuaternion(rotation, computeBoundingRectangleMatrix3);\n\n        var minX = Number.POSITIVE_INFINITY;\n        var maxX = Number.NEGATIVE_INFINITY;\n        var minY = Number.POSITIVE_INFINITY;\n        var maxY = Number.NEGATIVE_INFINITY;\n\n        var length = positions.length;\n        for ( var i = 0; i < length; ++i) {\n            var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\n            Matrix3.multiplyByVector(textureMatrix, p, p);\n            var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\n\n            if (defined(st)) {\n                minX = Math.min(minX, st.x);\n                maxX = Math.max(maxX, st.x);\n\n                minY = Math.min(minY, st.y);\n                maxY = Math.max(maxY, st.y);\n            }\n        }\n\n        result.x = minX;\n        result.y = minY;\n        result.width = maxX - minX;\n        result.height = maxY - minY;\n        return result;\n    };\n\n    PolygonGeometryLibrary.createGeometryFromPositions = function(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType) {\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n        /* If polygon is completely unrenderable, just use the first three vertices */\n        if (indices.length < 3) {\n            indices = [0, 1, 2];\n        }\n\n        var positions = polygon.positions;\n\n        if (perPositionHeight) {\n            var length = positions.length;\n            var flattenedPositions = new Array(length * 3);\n            var index = 0;\n            for ( var i = 0; i < length; i++) {\n                var p = positions[i];\n                flattenedPositions[index++] = p.x;\n                flattenedPositions[index++] = p.y;\n                flattenedPositions[index++] = p.z;\n            }\n            var geometry = new Geometry({\n                attributes : {\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.DOUBLE,\n                        componentsPerAttribute : 3,\n                        values : flattenedPositions\n                    })\n                },\n                indices : indices,\n                primitiveType : PrimitiveType.TRIANGLES\n            });\n\n            if (vertexFormat.normal) {\n                return GeometryPipeline.computeNormal(geometry);\n            }\n\n            return geometry;\n        }\n\n        if (arcType === ArcType.GEODESIC) {\n            return PolygonPipeline.computeSubdivision(ellipsoid, positions, indices, granularity);\n        } else if (arcType === ArcType.RHUMB) {\n            return PolygonPipeline.computeRhumbLineSubdivision(ellipsoid, positions, indices, granularity);\n        }\n    };\n\n    var computeWallIndicesSubdivided = [];\n    var p1Scratch = new Cartesian3();\n    var p2Scratch = new Cartesian3();\n\n    PolygonGeometryLibrary.computeWallGeometry = function(positions, ellipsoid, granularity, perPositionHeight, arcType) {\n        var edgePositions;\n        var topEdgeLength;\n        var i;\n        var p1;\n        var p2;\n\n        var length = positions.length;\n        var index = 0;\n\n        if (!perPositionHeight) {\n            var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n\n            var numVertices = 0;\n            if (arcType === ArcType.GEODESIC) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\n                }\n            } else if (arcType === ArcType.RHUMB) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\n                }\n            }\n\n            topEdgeLength = (numVertices + length) * 3;\n            edgePositions = new Array(topEdgeLength * 2);\n            for (i = 0; i < length; i++) {\n                p1 = positions[i];\n                p2 = positions[(i + 1) % length];\n\n                var tempPositions;\n                if (arcType === ArcType.GEODESIC) {\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(p1, p2, minDistance, computeWallIndicesSubdivided);\n                } else if (arcType === ArcType.RHUMB) {\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, p1, p2, minDistance, computeWallIndicesSubdivided);\n                }\n                var tempPositionsLength = tempPositions.length;\n                for (var j = 0; j < tempPositionsLength; ++j, ++index) {\n                    edgePositions[index] = tempPositions[j];\n                    edgePositions[index + topEdgeLength] = tempPositions[j];\n                }\n\n                edgePositions[index] = p2.x;\n                edgePositions[index + topEdgeLength] = p2.x;\n                ++index;\n\n                edgePositions[index] = p2.y;\n                edgePositions[index + topEdgeLength] = p2.y;\n                ++index;\n\n                edgePositions[index] = p2.z;\n                edgePositions[index + topEdgeLength] = p2.z;\n                ++index;\n            }\n        } else {\n            topEdgeLength = length * 3 * 2;\n            edgePositions = new Array(topEdgeLength * 2);\n            for (i = 0; i < length; i++) {\n                p1 = positions[i];\n                p2 = positions[(i + 1) % length];\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\n                ++index;\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\n                ++index;\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\n                ++index;\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\n                ++index;\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\n                ++index;\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\n                ++index;\n            }\n        }\n\n        length = edgePositions.length;\n        var indices = IndexDatatype.createTypedArray(length / 3, length - positions.length * 6);\n        var edgeIndex = 0;\n        length /= 6;\n\n        for (i = 0; i < length; i++) {\n            var UL = i;\n            var UR = UL + 1;\n            var LL = UL + length;\n            var LR = LL + 1;\n\n            p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\n            p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10, CesiumMath.EPSILON10)) {\n                //skip corner\n                continue;\n            }\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        return new Geometry({\n            attributes : new GeometryAttributes({\n                position : new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.DOUBLE,\n                    componentsPerAttribute : 3,\n                    values : edgePositions\n                })\n            }),\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n    };\nexport default PolygonGeometryLibrary;\n"],"names":["defined","Cartesian3","CesiumMath","Cartographic","EllipsoidRhumbLine","defaultValue","Ellipsoid","arrayRemoveDuplicates","PolygonPipeline","WindingOrder","Cartesian2","Quaternion","Matrix3","Geometry","GeometryAttribute","ComponentDatatype","PrimitiveType","GeometryPipeline","ArcType","IndexDatatype","GeometryAttributes"],"mappings":"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"}