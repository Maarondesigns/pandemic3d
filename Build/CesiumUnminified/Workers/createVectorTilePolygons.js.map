{"version":3,"file":"createVectorTilePolygons.js","sources":["../../../../Source/WorkersES6/createVectorTilePolygons.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport CesiumMath from '../Core/Math.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchRectangle = new Rectangle();\n    var scratchScalars = {\n        min : undefined,\n        max : undefined,\n        indexBytesPerElement : undefined\n    };\n\n    function unpackBuffer(buffer) {\n        var packedBuffer = new Float64Array(buffer);\n\n        var offset = 0;\n        scratchScalars.indexBytesPerElement = packedBuffer[offset++];\n\n        scratchScalars.min = packedBuffer[offset++];\n        scratchScalars.max = packedBuffer[offset++];\n\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\n        offset += Cartesian3.packedLength;\n\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\n        offset += Ellipsoid.packedLength;\n\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\n    }\n\n    function packedBatchedIndicesLength(batchedIndices) {\n        var length = batchedIndices.length;\n        var count = 0;\n        for (var i = 0; i < length; ++i) {\n            count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\n        }\n        return count;\n    }\n\n    function packBuffer(indexDatatype, boundingVolumes, batchedIndices) {\n        var numBVs = boundingVolumes.length;\n        var length = 1 + 1 + numBVs * OrientedBoundingBox.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\n\n        var packedBuffer = new Float64Array(length);\n\n        var offset = 0;\n        packedBuffer[offset++] = indexDatatype;\n        packedBuffer[offset++] = numBVs;\n\n        for (var i = 0; i < numBVs; ++i) {\n            OrientedBoundingBox.pack(boundingVolumes[i], packedBuffer, offset);\n            offset += OrientedBoundingBox.packedLength;\n        }\n\n        var indicesLength = batchedIndices.length;\n        packedBuffer[offset++] = indicesLength;\n\n        for (var j = 0; j < indicesLength; ++j) {\n            var batchedIndex = batchedIndices[j];\n\n            Color.pack(batchedIndex.color, packedBuffer, offset);\n            offset += Color.packedLength;\n\n            packedBuffer[offset++] = batchedIndex.offset;\n            packedBuffer[offset++] = batchedIndex.count;\n\n            var batchIds = batchedIndex.batchIds;\n            var batchIdsLength = batchIds.length;\n            packedBuffer[offset++] = batchIdsLength;\n\n            for (var k = 0; k < batchIdsLength; ++k) {\n                packedBuffer[offset++] = batchIds[k];\n            }\n        }\n\n        return packedBuffer;\n    }\n\n    var maxShort = 32767;\n\n    var scratchEncodedPosition = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchScaledNormal = new Cartesian3();\n    var scratchMinHeightPosition = new Cartesian3();\n    var scratchMaxHeightPosition = new Cartesian3();\n    var scratchBVCartographic = new Cartographic();\n    var scratchBVRectangle = new Rectangle();\n\n    function createVectorTilePolygons(parameters, transferableObjects) {\n        unpackBuffer(parameters.packedBuffer);\n\n        var indices;\n        var indexBytesPerElement = scratchScalars.indexBytesPerElement;\n        if (indexBytesPerElement === 2) {\n            indices = new Uint16Array(parameters.indices);\n        } else {\n            indices = new Uint32Array(parameters.indices);\n        }\n\n        var positions = new Uint16Array(parameters.positions);\n        var counts = new Uint32Array(parameters.counts);\n        var indexCounts = new Uint32Array(parameters.indexCounts);\n        var batchIds = new Uint32Array(parameters.batchIds);\n        var batchTableColors = new Uint32Array(parameters.batchTableColors);\n\n        var boundingVolumes = new Array(counts.length);\n\n        var center = scratchCenter;\n        var ellipsoid = scratchEllipsoid;\n        var rectangle = scratchRectangle;\n        var minHeight = scratchScalars.min;\n        var maxHeight = scratchScalars.max;\n\n        var minimumHeights = parameters.minimumHeights;\n        var maximumHeights = parameters.maximumHeights;\n        if (defined(minimumHeights) && defined(maximumHeights)) {\n            minimumHeights = new Float32Array(minimumHeights);\n            maximumHeights = new Float32Array(maximumHeights);\n        }\n\n        var i;\n        var j;\n        var rgba;\n\n        var positionsLength = positions.length / 2;\n        var uBuffer = positions.subarray(0, positionsLength);\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer);\n\n        var decodedPositions = new Float64Array(positionsLength * 3);\n        for (i = 0; i < positionsLength; ++i) {\n            var u = uBuffer[i];\n            var v = vBuffer[i];\n\n            var x = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n            var y = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n\n            var cart = Cartographic.fromRadians(x, y, 0.0, scratchBVCartographic);\n            var decodedPosition = ellipsoid.cartographicToCartesian(cart, scratchEncodedPosition);\n            Cartesian3.pack(decodedPosition, decodedPositions, i * 3);\n        }\n\n        var countsLength = counts.length;\n        var offsets = new Array(countsLength);\n        var indexOffsets = new Array(countsLength);\n        var currentOffset = 0;\n        var currentIndexOffset = 0;\n        for (i = 0; i < countsLength; ++i) {\n            offsets[i] = currentOffset;\n            indexOffsets[i] = currentIndexOffset;\n\n            currentOffset += counts[i];\n            currentIndexOffset += indexCounts[i];\n        }\n\n        var batchedPositions = new Float32Array(positionsLength * 3 * 2);\n        var batchedIds = new Uint16Array(positionsLength * 2);\n        var batchedIndexOffsets = new Uint32Array(indexOffsets.length);\n        var batchedIndexCounts = new Uint32Array(indexCounts.length);\n        var batchedIndices = [];\n\n        var colorToBuffers = {};\n        for (i = 0; i < countsLength; ++i) {\n            rgba = batchTableColors[i];\n            if (!defined(colorToBuffers[rgba])) {\n                colorToBuffers[rgba] = {\n                    positionLength : counts[i],\n                    indexLength : indexCounts[i],\n                    offset : 0,\n                    indexOffset : 0,\n                    batchIds : [i]\n                };\n            } else {\n                colorToBuffers[rgba].positionLength += counts[i];\n                colorToBuffers[rgba].indexLength += indexCounts[i];\n                colorToBuffers[rgba].batchIds.push(i);\n            }\n        }\n\n        // get the offsets and counts for the positions and indices of each primitive\n        var buffer;\n        var byColorPositionOffset = 0;\n        var byColorIndexOffset = 0;\n        for (rgba in colorToBuffers) {\n            if (colorToBuffers.hasOwnProperty(rgba)) {\n                buffer = colorToBuffers[rgba];\n                buffer.offset = byColorPositionOffset;\n                buffer.indexOffset = byColorIndexOffset;\n\n                var positionLength = buffer.positionLength * 2;\n                var indexLength = buffer.indexLength * 2 + buffer.positionLength * 6;\n\n                byColorPositionOffset += positionLength;\n                byColorIndexOffset += indexLength;\n\n                buffer.indexLength = indexLength;\n            }\n        }\n\n        var batchedDrawCalls = [];\n\n        for (rgba in colorToBuffers) {\n            if (colorToBuffers.hasOwnProperty(rgba)) {\n                buffer = colorToBuffers[rgba];\n\n                batchedDrawCalls.push({\n                    color : Color.fromRgba(parseInt(rgba)),\n                    offset : buffer.indexOffset,\n                    count : buffer.indexLength,\n                    batchIds : buffer.batchIds\n                });\n            }\n        }\n\n        for (i = 0; i < countsLength; ++i) {\n            rgba = batchTableColors[i];\n\n            buffer = colorToBuffers[rgba];\n            var positionOffset = buffer.offset;\n            var positionIndex = positionOffset * 3;\n            var batchIdIndex = positionOffset;\n\n            var polygonOffset = offsets[i];\n            var polygonCount = counts[i];\n            var batchId = batchIds[i];\n\n            var polygonMinimumHeight = minHeight;\n            var polygonMaximumHeight = maxHeight;\n            if (defined(minimumHeights) && defined(maximumHeights)) {\n                polygonMinimumHeight = minimumHeights[i];\n                polygonMaximumHeight = maximumHeights[i];\n            }\n\n            var minLat = Number.POSITIVE_INFINITY;\n            var maxLat = Number.NEGATIVE_INFINITY;\n            var minLon = Number.POSITIVE_INFINITY;\n            var maxLon = Number.NEGATIVE_INFINITY;\n\n            for (j = 0; j < polygonCount; ++j) {\n                var position = Cartesian3.unpack(decodedPositions, polygonOffset * 3 + j * 3, scratchEncodedPosition);\n                ellipsoid.scaleToGeodeticSurface(position, position);\n\n                var carto = ellipsoid.cartesianToCartographic(position, scratchBVCartographic);\n                var lat = carto.latitude;\n                var lon = carto.longitude;\n\n                minLat = Math.min(lat, minLat);\n                maxLat = Math.max(lat, maxLat);\n                minLon = Math.min(lon, minLon);\n                maxLon = Math.max(lon, maxLon);\n\n                var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n                var scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMinimumHeight, scratchScaledNormal);\n                var minHeightPosition = Cartesian3.add(position, scaledNormal, scratchMinHeightPosition);\n\n                scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMaximumHeight, scaledNormal);\n                var maxHeightPosition = Cartesian3.add(position, scaledNormal, scratchMaxHeightPosition);\n\n                Cartesian3.subtract(maxHeightPosition, center, maxHeightPosition);\n                Cartesian3.subtract(minHeightPosition, center, minHeightPosition);\n\n                Cartesian3.pack(maxHeightPosition, batchedPositions, positionIndex);\n                Cartesian3.pack(minHeightPosition, batchedPositions, positionIndex + 3);\n\n                batchedIds[batchIdIndex] = batchId;\n                batchedIds[batchIdIndex + 1] = batchId;\n\n                positionIndex += 6;\n                batchIdIndex += 2;\n            }\n\n            rectangle = scratchBVRectangle;\n            rectangle.west = minLon;\n            rectangle.east = maxLon;\n            rectangle.south = minLat;\n            rectangle.north = maxLat;\n\n            boundingVolumes[i] = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\n\n            var indicesIndex = buffer.indexOffset;\n\n            var indexOffset = indexOffsets[i];\n            var indexCount = indexCounts[i];\n\n            batchedIndexOffsets[i] = indicesIndex;\n\n            for (j = 0; j < indexCount; j += 3) {\n                var i0 = indices[indexOffset + j] - polygonOffset;\n                var i1 = indices[indexOffset + j + 1] - polygonOffset;\n                var i2 = indices[indexOffset + j + 2] - polygonOffset;\n\n                // triangle on the top of the extruded polygon\n                batchedIndices[indicesIndex++] = i0 * 2 + positionOffset;\n                batchedIndices[indicesIndex++] = i1 * 2 + positionOffset;\n                batchedIndices[indicesIndex++] = i2 * 2 + positionOffset;\n\n                // triangle on the bottom of the extruded polygon\n                batchedIndices[indicesIndex++] = i2 * 2 + 1 + positionOffset;\n                batchedIndices[indicesIndex++] = i1 * 2 + 1 + positionOffset;\n                batchedIndices[indicesIndex++] = i0 * 2 + 1 + positionOffset;\n            }\n\n            // indices for the walls of the extruded polygon\n            for (j = 0; j < polygonCount; ++j) {\n                var v0 = j;\n                var v1 = (j + 1) % polygonCount;\n\n                batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\n                batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\n                batchedIndices[indicesIndex++] = v0 * 2 + positionOffset;\n\n                batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\n                batchedIndices[indicesIndex++] = v1 * 2 + 1 + positionOffset;\n                batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\n            }\n\n            buffer.offset += polygonCount * 2;\n            buffer.indexOffset = indicesIndex;\n\n            batchedIndexCounts[i] = indicesIndex - batchedIndexOffsets[i];\n        }\n\n        batchedIndices = IndexDatatype.createTypedArray(batchedPositions.length / 3, batchedIndices);\n\n        var batchedIndicesLength = batchedDrawCalls.length;\n        for (var m = 0; m < batchedIndicesLength; ++m) {\n            var tempIds = batchedDrawCalls[m].batchIds;\n            var count = 0;\n            var tempIdsLength = tempIds.length;\n            for (var n = 0; n < tempIdsLength; ++n) {\n                count += batchedIndexCounts[tempIds[n]];\n            }\n            batchedDrawCalls[m].count = count;\n        }\n\n        var indexDatatype = (batchedIndices.BYTES_PER_ELEMENT === 2) ?  IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT;\n        var packedBuffer = packBuffer(indexDatatype, boundingVolumes, batchedDrawCalls);\n\n        transferableObjects.push(batchedPositions.buffer, batchedIndices.buffer, batchedIndexOffsets.buffer, batchedIndexCounts.buffer, batchedIds.buffer, packedBuffer.buffer);\n\n        return {\n            positions : batchedPositions.buffer,\n            indices : batchedIndices.buffer,\n            indexOffsets : batchedIndexOffsets.buffer,\n            indexCounts : batchedIndexCounts.buffer,\n            batchIds : batchedIds.buffer,\n            packedBuffer : packedBuffer.buffer\n        };\n    }\nexport default createTaskProcessorWorker(createVectorTilePolygons);\n"],"names":["Cartesian3","Ellipsoid","Rectangle","Color","OrientedBoundingBox","Cartographic","defined","AttributeCompression","CesiumMath","IndexDatatype"],"mappings":"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"}