{"version":3,"file":"createCircleGeometry.js","sources":["../../../../Source/Core/CircleGeometry.js","../../../../Source/WorkersES6/createCircleGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport EllipseGeometry from './EllipseGeometry.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport VertexFormat from './VertexFormat.js';\n\n    /**\n     * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias CircleGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n     * @param {Number} options.radius The radius in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     *\n     * @exception {DeveloperError} radius must be greater than zero.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     * @see CircleGeometry.createGeometry\n     * @see Packable\n     *\n     * @example\n     * // Create a circle.\n     * var circle = new Cesium.CircleGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   radius : 100000.0\n     * });\n     * var geometry = Cesium.CircleGeometry.createGeometry(circle);\n     */\n    function CircleGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var radius = options.radius;\n\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.number('radius', radius);\n        //>>includeEnd('debug');\n\n        var ellipseGeometryOptions = {\n            center : options.center,\n            semiMajorAxis : radius,\n            semiMinorAxis : radius,\n            ellipsoid : options.ellipsoid,\n            height : options.height,\n            extrudedHeight : options.extrudedHeight,\n            granularity : options.granularity,\n            vertexFormat : options.vertexFormat,\n            stRotation : options.stRotation,\n            shadowVolume: options.shadowVolume\n        };\n        this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n        this._workerName = 'createCircleGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    CircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CircleGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CircleGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        //>>includeEnd('debug');\n        return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n    };\n\n    var scratchEllipseGeometry = new EllipseGeometry({\n        center : new Cartesian3(),\n        semiMajorAxis : 1.0,\n        semiMinorAxis : 1.0\n    });\n    var scratchOptions = {\n        center : new Cartesian3(),\n        radius : undefined,\n        ellipsoid : Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n        height : undefined,\n        extrudedHeight : undefined,\n        granularity : undefined,\n        vertexFormat : new VertexFormat(),\n        stRotation : undefined,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        shadowVolume: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CircleGeometry} [result] The object into which to store the result.\n     * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n     */\n    CircleGeometry.unpack = function(array, startingIndex, result) {\n        var ellipseGeometry = EllipseGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\n        scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\n        scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\n        scratchOptions.height = ellipseGeometry._height;\n        scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n        scratchOptions.granularity = ellipseGeometry._granularity;\n        scratchOptions.vertexFormat = VertexFormat.clone(ellipseGeometry._vertexFormat, scratchOptions.vertexFormat);\n        scratchOptions.stRotation = ellipseGeometry._stRotation;\n        scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n        if (!defined(result)) {\n            scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n            return new CircleGeometry(scratchOptions);\n        }\n\n        scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n        scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n        result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CircleGeometry} circleGeometry A description of the circle.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CircleGeometry.createGeometry = function(circleGeometry) {\n        return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n    };\n\n    /**\n     * @private\n     */\n    CircleGeometry.createShadowVolume = function(circleGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = circleGeometry._ellipseGeometry._granularity;\n        var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new CircleGeometry({\n            center : circleGeometry._ellipseGeometry._center,\n            radius : circleGeometry._ellipseGeometry._semiMajorAxis,\n            ellipsoid : ellipsoid,\n            stRotation : circleGeometry._ellipseGeometry._stRotation,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    Object.defineProperties(CircleGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                return this._ellipseGeometry.rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                return this._ellipseGeometry.textureCoordinateRotationPoints;\n            }\n        }\n    });\nexport default CircleGeometry;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport CircleGeometry from '../Core/CircleGeometry.js';\nimport defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\n\n    function createCircleGeometry(circleGeometry, offset) {\n        if (defined(offset)) {\n            circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\n        }\n        circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\n        circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\n        return CircleGeometry.createGeometry(circleGeometry);\n    }\nexport default createCircleGeometry;\n"],"names":["defaultValue","Check","EllipseGeometry","Cartesian3","Ellipsoid","VertexFormat","defined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAQI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,cAAc,CAAC,OAAO,EAAE;IACrC,QAAQ,OAAO,GAAGA,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACpC;IACA;IACA,QAAQC,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC9C;AACA;IACA,QAAQ,IAAI,sBAAsB,GAAG;IACrC,YAAY,MAAM,GAAG,OAAO,CAAC,MAAM;IACnC,YAAY,aAAa,GAAG,MAAM;IAClC,YAAY,aAAa,GAAG,MAAM;IAClC,YAAY,SAAS,GAAG,OAAO,CAAC,SAAS;IACzC,YAAY,MAAM,GAAG,OAAO,CAAC,MAAM;IACnC,YAAY,cAAc,GAAG,OAAO,CAAC,cAAc;IACnD,YAAY,WAAW,GAAG,OAAO,CAAC,WAAW;IAC7C,YAAY,YAAY,GAAG,OAAO,CAAC,YAAY;IAC/C,YAAY,UAAU,GAAG,OAAO,CAAC,UAAU;IAC3C,YAAY,YAAY,EAAE,OAAO,CAAC,YAAY;IAC9C,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAIC,+BAAe,CAAC,sBAAsB,CAAC,CAAC;IAC5E,QAAQ,IAAI,CAAC,WAAW,GAAG,sBAAsB,CAAC;IAClD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,YAAY,GAAGA,+BAAe,CAAC,YAAY,CAAC;AAC/D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IAChE;IACA,QAAQD,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C;IACA,QAAQ,OAAOC,+BAAe,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAClF,KAAK,CAAC;AACN;IACA,IAAI,IAAI,sBAAsB,GAAG,IAAIA,+BAAe,CAAC;IACrD,QAAQ,MAAM,GAAG,IAAIC,qBAAU,EAAE;IACjC,QAAQ,aAAa,GAAG,GAAG;IAC3B,QAAQ,aAAa,GAAG,GAAG;IAC3B,KAAK,CAAC,CAAC;IACP,IAAI,IAAI,cAAc,GAAG;IACzB,QAAQ,MAAM,GAAG,IAAIA,qBAAU,EAAE;IACjC,QAAQ,MAAM,GAAG,SAAS;IAC1B,QAAQ,SAAS,GAAGC,oBAAS,CAAC,KAAK,CAACA,oBAAS,CAAC,WAAW,CAAC;IAC1D,QAAQ,MAAM,GAAG,SAAS;IAC1B,QAAQ,cAAc,GAAG,SAAS;IAClC,QAAQ,WAAW,GAAG,SAAS;IAC/B,QAAQ,YAAY,GAAG,IAAIC,yBAAY,EAAE;IACzC,QAAQ,UAAU,GAAG,SAAS;IAC9B,QAAQ,aAAa,GAAG,SAAS;IACjC,QAAQ,aAAa,GAAG,SAAS;IACjC,QAAQ,YAAY,EAAE,SAAS;IAC/B,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACnE,QAAQ,IAAI,eAAe,GAAGH,+BAAe,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC;IACnG,QAAQ,cAAc,CAAC,MAAM,GAAGC,qBAAU,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;IACjG,QAAQ,cAAc,CAAC,SAAS,GAAGC,oBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;IACzG,QAAQ,cAAc,CAAC,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC;IACxD,QAAQ,cAAc,CAAC,cAAc,GAAG,eAAe,CAAC,eAAe,CAAC;IACxE,QAAQ,cAAc,CAAC,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IAClE,QAAQ,cAAc,CAAC,YAAY,GAAGC,yBAAY,CAAC,KAAK,CAAC,eAAe,CAAC,aAAa,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IACrH,QAAQ,cAAc,CAAC,UAAU,GAAG,eAAe,CAAC,WAAW,CAAC;IAChE,QAAQ,cAAc,CAAC,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;AACpE;IACA,QAAQ,IAAI,CAACC,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,cAAc,CAAC,MAAM,GAAG,eAAe,CAAC,cAAc,CAAC;IACnE,YAAY,OAAO,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;IACtD,SAAS;AACT;IACA,QAAQ,cAAc,CAAC,aAAa,GAAG,eAAe,CAAC,cAAc,CAAC;IACtE,QAAQ,cAAc,CAAC,aAAa,GAAG,eAAe,CAAC,cAAc,CAAC;IACtE,QAAQ,MAAM,CAAC,gBAAgB,GAAG,IAAIJ,+BAAe,CAAC,cAAc,CAAC,CAAC;IACtE,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,cAAc,GAAG,SAAS,cAAc,EAAE;IAC7D,QAAQ,OAAOA,+BAAe,CAAC,cAAc,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAC/E,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,kBAAkB,GAAG,SAAS,cAAc,EAAE,aAAa,EAAE,aAAa,EAAE;IAC/F,QAAQ,IAAI,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,YAAY,CAAC;IACvE,QAAQ,IAAI,SAAS,GAAG,cAAc,CAAC,gBAAgB,CAAC,UAAU,CAAC;AACnE;IACA,QAAQ,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9D,QAAQ,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC9D;IACA,QAAQ,OAAO,IAAI,cAAc,CAAC;IAClC,YAAY,MAAM,GAAG,cAAc,CAAC,gBAAgB,CAAC,OAAO;IAC5D,YAAY,MAAM,GAAG,cAAc,CAAC,gBAAgB,CAAC,cAAc;IACnE,YAAY,SAAS,GAAG,SAAS;IACjC,YAAY,UAAU,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW;IACpE,YAAY,WAAW,GAAG,WAAW;IACrC,YAAY,cAAc,GAAG,SAAS;IACtC,YAAY,MAAM,GAAG,SAAS;IAC9B,YAAY,YAAY,GAAGG,yBAAY,CAAC,aAAa;IACrD,YAAY,YAAY,EAAE,IAAI;IAC9B,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,EAAE;IACtD;IACA;IACA;IACA,QAAQ,SAAS,GAAG;IACpB,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;IACvD,aAAa;IACb,SAAS;IACT;IACA;IACA;IACA;IACA,QAAQ,+BAA+B,GAAG;IAC1C,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,OAAO,IAAI,CAAC,gBAAgB,CAAC,+BAA+B,CAAC;IAC7E,aAAa;IACb,SAAS;IACT,KAAK,CAAC;;ICnLF,SAAS,oBAAoB,CAAC,cAAc,EAAE,MAAM,EAAE;IAC1D,QAAQ,IAAIC,YAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAY,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAC3E,SAAS;IACT,QAAQ,cAAc,CAAC,gBAAgB,CAAC,OAAO,GAAGH,qBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC5G,QAAQ,cAAc,CAAC,gBAAgB,CAAC,UAAU,GAAGC,oBAAS,CAAC,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IACjH,QAAQ,OAAO,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC7D,KAAK;;;;;;;;"}