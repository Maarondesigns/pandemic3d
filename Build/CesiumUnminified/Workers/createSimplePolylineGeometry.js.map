{"version":3,"file":"createSimplePolylineGeometry.js","sources":["../../../../Source/Core/SimplePolylineGeometry.js","../../../../Source/WorkersES6/createSimplePolylineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Color from './Color.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    function interpolateColors(p0, p1, color0, color1, minDistance, array, offset) {\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\n        var i;\n\n        var r0 = color0.red;\n        var g0 = color0.green;\n        var b0 = color0.blue;\n        var a0 = color0.alpha;\n\n        var r1 = color1.red;\n        var g1 = color1.green;\n        var b1 = color1.blue;\n        var a1 = color1.alpha;\n\n        if (Color.equals(color0, color1)) {\n            for (i = 0; i < numPoints; i++) {\n                array[offset++] = Color.floatToByte(r0);\n                array[offset++] = Color.floatToByte(g0);\n                array[offset++] = Color.floatToByte(b0);\n                array[offset++] = Color.floatToByte(a0);\n            }\n            return offset;\n        }\n\n        var redPerVertex = (r1 - r0) / numPoints;\n        var greenPerVertex = (g1 - g0) / numPoints;\n        var bluePerVertex = (b1 - b0) / numPoints;\n        var alphaPerVertex = (a1 - a0) / numPoints;\n\n        var index = offset;\n        for (i = 0; i < numPoints; i++) {\n            array[index++] = Color.floatToByte(r0 + i * redPerVertex);\n            array[index++] = Color.floatToByte(g0 + i * greenPerVertex);\n            array[index++] = Color.floatToByte(b0 + i * bluePerVertex);\n            array[index++] = Color.floatToByte(a0 + i * alphaPerVertex);\n        }\n\n        return index;\n    }\n\n    /**\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n     * and each additional position defines a line segment from the previous position.\n     *\n     * @alias SimplePolylineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @exception {DeveloperError} At least two positions are required.\n     * @exception {DeveloperError} colors has an invalid length.\n     *\n     * @see SimplePolylineGeometry#createGeometry\n     *\n     * @example\n     * // A polyline with two connected line segments\n     * var polyline = new Cesium.SimplePolylineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     0.0, 0.0,\n     *     5.0, 0.0,\n     *     5.0, 5.0\n     *   ])\n     * });\n     * var geometry = Cesium.SimplePolylineGeometry.createGeometry(polyline);\n     */\n    function SimplePolylineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var colors = options.colors;\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n        //>>includeStart('debug', pragmas.debug);\n        if ((!defined(positions)) || (positions.length < 2)) {\n            throw new DeveloperError('At least two positions are required.');\n        }\n        if (defined(colors) && ((colorsPerVertex && colors.length < positions.length) || (!colorsPerVertex && colors.length < positions.length - 1))) {\n            throw new DeveloperError('colors has an invalid length.');\n        }\n        //>>includeEnd('debug');\n\n        this._positions = positions;\n        this._colors = colors;\n        this._colorsPerVertex = colorsPerVertex;\n\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        this._workerName = 'createSimplePolylineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + 3;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {SimplePolylineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    SimplePolylineGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var colors = value._colors;\n        length = defined(colors) ? colors.length : 0.0;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            Color.pack(colors[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {SimplePolylineGeometry} [result] The object into which to store the result.\n     * @returns {SimplePolylineGeometry} The modified result parameter or a new SimplePolylineGeometry instance if one was not provided.\n     */\n    SimplePolylineGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var colors = length > 0 ? new Array(length) : undefined;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            colors[i] = Color.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        var colorsPerVertex = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            return new SimplePolylineGeometry({\n                positions : positions,\n                colors : colors,\n                ellipsoid : ellipsoid,\n                colorsPerVertex : colorsPerVertex,\n                arcType : arcType,\n                granularity : granularity\n            });\n        }\n\n        result._positions = positions;\n        result._colors = colors;\n        result._ellipsoid = ellipsoid;\n        result._colorsPerVertex = colorsPerVertex;\n        result._arcType = arcType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var scratchArray1 = new Array(2);\n    var scratchArray2 = new Array(2);\n    var generateArcOptionsScratch = {\n        positions : scratchArray1,\n        height: scratchArray2,\n        ellipsoid: undefined,\n        minDistance : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Computes the geometric representation of a simple polyline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {SimplePolylineGeometry} simplePolylineGeometry A description of the polyline.\n     * @returns {Geometry} The computed vertices and indices.\n     */\n    SimplePolylineGeometry.createGeometry = function(simplePolylineGeometry) {\n        var positions = simplePolylineGeometry._positions;\n        var colors = simplePolylineGeometry._colors;\n        var colorsPerVertex = simplePolylineGeometry._colorsPerVertex;\n        var arcType = simplePolylineGeometry._arcType;\n        var granularity = simplePolylineGeometry._granularity;\n        var ellipsoid = simplePolylineGeometry._ellipsoid;\n\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n        var perSegmentColors = defined(colors) && !colorsPerVertex;\n\n        var i;\n        var length = positions.length;\n\n        var positionValues;\n        var numberOfPositions;\n        var colorValues;\n        var color;\n        var offset = 0;\n\n        if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n            var subdivisionSize;\n            var numberOfPointsFunction;\n            var generateArcFunction;\n            if (arcType === ArcType.GEODESIC) {\n                subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n                numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n                generateArcFunction = PolylinePipeline.generateArc;\n            } else {\n                subdivisionSize = granularity;\n                numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n                generateArcFunction = PolylinePipeline.generateRhumbArc;\n            }\n\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n            var generateArcOptions = generateArcOptionsScratch;\n            if (arcType === ArcType.GEODESIC) {\n                generateArcOptions.minDistance = minDistance;\n            } else {\n                generateArcOptions.granularity = granularity;\n            }\n            generateArcOptions.ellipsoid = ellipsoid;\n\n            if (perSegmentColors) {\n                var positionCount = 0;\n                for (i = 0; i < length - 1; i++) {\n                    positionCount += numberOfPointsFunction(positions[i], positions[i+1], subdivisionSize) + 1;\n                }\n\n                positionValues = new Float64Array(positionCount * 3);\n                colorValues = new Uint8Array(positionCount * 4);\n\n                generateArcOptions.positions = scratchArray1;\n                generateArcOptions.height= scratchArray2;\n\n                var ci = 0;\n                for (i = 0; i < length - 1; ++i) {\n                    scratchArray1[0] = positions[i];\n                    scratchArray1[1] = positions[i + 1];\n\n                    scratchArray2[0] = heights[i];\n                    scratchArray2[1] = heights[i + 1];\n\n                    var pos = generateArcFunction(generateArcOptions);\n\n                    if (defined(colors)) {\n                        var segLen = pos.length / 3;\n                        color = colors[i];\n                        for(var k = 0; k < segLen; ++k) {\n                            colorValues[ci++] = Color.floatToByte(color.red);\n                            colorValues[ci++] = Color.floatToByte(color.green);\n                            colorValues[ci++] = Color.floatToByte(color.blue);\n                            colorValues[ci++] = Color.floatToByte(color.alpha);\n                        }\n                    }\n\n                    positionValues.set(pos, offset);\n                    offset += pos.length;\n                }\n            } else {\n                generateArcOptions.positions = positions;\n                generateArcOptions.height= heights;\n                positionValues = new Float64Array(generateArcFunction(generateArcOptions));\n\n                if (defined(colors)) {\n                    colorValues = new Uint8Array(positionValues.length / 3 * 4);\n\n                    for (i = 0; i < length - 1; ++i) {\n                        var p0 = positions[i];\n                        var p1 = positions[i + 1];\n                        var c0 = colors[i];\n                        var c1 = colors[i + 1];\n                        offset = interpolateColors(p0, p1, c0, c1, minDistance, colorValues, offset);\n                    }\n\n                    var lastColor = colors[length - 1];\n                    colorValues[offset++] = Color.floatToByte(lastColor.red);\n                    colorValues[offset++] = Color.floatToByte(lastColor.green);\n                    colorValues[offset++] = Color.floatToByte(lastColor.blue);\n                    colorValues[offset++] = Color.floatToByte(lastColor.alpha);\n                }\n            }\n        } else {\n            numberOfPositions = perSegmentColors ? length * 2 - 2 : length;\n            positionValues = new Float64Array(numberOfPositions * 3);\n            colorValues = defined(colors) ? new Uint8Array(numberOfPositions * 4) : undefined;\n\n            var positionIndex = 0;\n            var colorIndex = 0;\n\n            for (i = 0; i < length; ++i) {\n                var p = positions[i];\n\n                if (perSegmentColors && i > 0) {\n                    Cartesian3.pack(p, positionValues, positionIndex);\n                    positionIndex += 3;\n\n                    color = colors[i - 1];\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\n                }\n\n                if (perSegmentColors && i === length - 1) {\n                    break;\n                }\n\n                Cartesian3.pack(p, positionValues, positionIndex);\n                positionIndex += 3;\n\n                if (defined(colors)) {\n                    color = colors[i];\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positionValues\n        });\n\n        if (defined(colors)) {\n            attributes.color = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 4,\n                values : colorValues,\n                normalize : true\n            });\n        }\n\n        numberOfPositions = positionValues.length / 3;\n        var numberOfIndices = (numberOfPositions - 1) * 2;\n        var indices = IndexDatatype.createTypedArray(numberOfPositions, numberOfIndices);\n\n        var index = 0;\n        for (i = 0; i < numberOfPositions - 1; ++i) {\n            indices[index++] = i;\n            indices[index++] = i + 1;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : BoundingSphere.fromPoints(positions)\n        });\n    };\nexport default SimplePolylineGeometry;\n","import defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport SimplePolylineGeometry from '../Core/SimplePolylineGeometry.js';\n\n    function createSimplePolylineGeometry(simplePolylineGeometry, offset) {\n        if (defined(offset)) {\n            simplePolylineGeometry = SimplePolylineGeometry.unpack(simplePolylineGeometry, offset);\n        }\n        simplePolylineGeometry._ellipsoid = Ellipsoid.clone(simplePolylineGeometry._ellipsoid);\n        return SimplePolylineGeometry.createGeometry(simplePolylineGeometry);\n    }\nexport default createSimplePolylineGeometry;\n"],"names":["PolylinePipeline","Color","defaultValue","defined","DeveloperError","ArcType","CesiumMath","Ellipsoid","Cartesian3","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAiBI,SAAS,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE;IACnF,QAAQ,IAAI,SAAS,GAAGA,iCAAgB,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,WAAW,CAAC,CAAC;IAC7E,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;IAC5B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;AAC9B;IACA,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;IAC5B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;AAC9B;IACA,QAAQ,IAAIC,WAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;IAC1C,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAC5C,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACxD,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACxD,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACxD,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACxD,aAAa;IACb,YAAY,OAAO,MAAM,CAAC;IAC1B,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,SAAS,CAAC;IACjD,QAAQ,IAAI,cAAc,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,SAAS,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,SAAS,CAAC;IAClD,QAAQ,IAAI,cAAc,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,SAAS,CAAC;AACnD;IACA,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC;IAC3B,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IACxC,YAAY,KAAK,CAAC,KAAK,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC;IACtE,YAAY,KAAK,CAAC,KAAK,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC;IACxE,YAAY,KAAK,CAAC,KAAK,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,GAAG,aAAa,CAAC,CAAC;IACvE,YAAY,KAAK,CAAC,KAAK,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC;IACxE,SAAS;AACT;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,sBAAsB,CAAC,OAAO,EAAE;IAC7C,QAAQ,OAAO,GAAGC,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1C,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,eAAe,GAAGA,iBAAY,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC3E;IACA;IACA,QAAQ,IAAI,CAAC,CAACC,YAAO,CAAC,SAAS,CAAC,MAAM,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC7D,YAAY,MAAM,IAAIC,oBAAc,CAAC,sCAAsC,CAAC,CAAC;IAC7E,SAAS;IACT,QAAQ,IAAID,YAAO,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;IACtJ,YAAY,MAAM,IAAIC,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;IACT;AACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IACpC,QAAQ,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC9B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;AAChD;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAGF,iBAAY,CAAC,OAAO,CAAC,OAAO,EAAEG,eAAO,CAAC,QAAQ,CAAC,CAAC;IACxE,QAAQ,IAAI,CAAC,YAAY,GAAGH,iBAAY,CAAC,OAAO,CAAC,WAAW,EAAEI,gBAAU,CAAC,kBAAkB,CAAC,CAAC;IAC7F,QAAQ,IAAI,CAAC,UAAU,GAAGJ,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEK,oBAAS,CAAC,KAAK,CAAC,CAAC;IAC3E,QAAQ,IAAI,CAAC,WAAW,GAAG,8BAA8B,CAAC;AAC1D;IACA,QAAQ,IAAI,aAAa,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,GAAGC,qBAAU,CAAC,YAAY,CAAC;IAC3E,QAAQ,aAAa,IAAIL,YAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,GAAGF,WAAK,CAAC,YAAY,GAAG,CAAC,CAAC;AACtF;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,aAAa,GAAGM,oBAAS,CAAC,YAAY,GAAG,CAAC,CAAC;IACvE,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACxE;IACA,QAAQ,IAAI,CAACJ,YAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT,QAAQ,IAAI,CAACD,YAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT;AACA;IACA,QAAQ,aAAa,GAAGF,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvD;IACA,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC;IACzC,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,MAAM,CAAC;AACxC;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIM,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAYA,qBAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAChE,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;IACnC,QAAQ,MAAM,GAAGL,YAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;IACvD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,MAAM,CAAC;AACxC;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIF,WAAK,CAAC,YAAY,EAAE;IAC1E,YAAYA,WAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACxD,SAAS;AACT;IACA,QAAQM,oBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAChD;IACA,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,gBAAgB,GAAG,GAAG,GAAG,GAAG,CAAC;IACpE,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;IAChD,QAAQ,KAAK,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC,YAAY,CAAC;AACpD;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IAC3E;IACA,QAAQ,IAAI,CAACJ,YAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT;AACA;IACA,QAAQ,aAAa,GAAGF,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvD;IACA,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1C;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIM,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAY,SAAS,CAAC,CAAC,CAAC,GAAGA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACnE,SAAS;AACT;IACA,QAAQ,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,QAAQ,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;AAChE;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIP,WAAK,CAAC,YAAY,EAAE;IAC1E,YAAY,MAAM,CAAC,CAAC,CAAC,GAAGA,WAAK,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC3D,SAAS;AACT;IACA,QAAQ,IAAI,SAAS,GAAGM,oBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAChD;IACA,QAAQ,IAAI,eAAe,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;IAC7D,QAAQ,IAAI,OAAO,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC7C,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AAC/C;IACA,QAAQ,IAAI,CAACJ,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,OAAO,IAAI,sBAAsB,CAAC;IAC9C,gBAAgB,SAAS,GAAG,SAAS;IACrC,gBAAgB,MAAM,GAAG,MAAM;IAC/B,gBAAgB,SAAS,GAAG,SAAS;IACrC,gBAAgB,eAAe,GAAG,eAAe;IACjD,gBAAgB,OAAO,GAAG,OAAO;IACjC,gBAAgB,WAAW,GAAG,WAAW;IACzC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC;IACtC,QAAQ,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;IAChC,QAAQ,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC;IACtC,QAAQ,MAAM,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAClD,QAAQ,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC;IAClC,QAAQ,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;AAC1C;IACA,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;AACN;IACA,IAAI,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,IAAI,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,IAAI,IAAI,yBAAyB,GAAG;IACpC,QAAQ,SAAS,GAAG,aAAa;IACjC,QAAQ,MAAM,EAAE,aAAa;IAC7B,QAAQ,SAAS,EAAE,SAAS;IAC5B,QAAQ,WAAW,GAAG,SAAS;IAC/B,QAAQ,WAAW,GAAG,SAAS;IAC/B,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,cAAc,GAAG,SAAS,sBAAsB,EAAE;IAC7E,QAAQ,IAAI,SAAS,GAAG,sBAAsB,CAAC,UAAU,CAAC;IAC1D,QAAQ,IAAI,MAAM,GAAG,sBAAsB,CAAC,OAAO,CAAC;IACpD,QAAQ,IAAI,eAAe,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;IACtE,QAAQ,IAAI,OAAO,GAAG,sBAAsB,CAAC,QAAQ,CAAC;IACtD,QAAQ,IAAI,WAAW,GAAG,sBAAsB,CAAC,YAAY,CAAC;IAC9D,QAAQ,IAAI,SAAS,GAAG,sBAAsB,CAAC,UAAU,CAAC;AAC1D;IACA,QAAQ,IAAI,WAAW,GAAGG,gBAAU,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;IACvF,QAAQ,IAAI,gBAAgB,GAAGH,YAAO,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;AACnE;IACA,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AACtC;IACA,QAAQ,IAAI,cAAc,CAAC;IAC3B,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAI,KAAK,CAAC;IAClB,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC;AACvB;IACA,QAAQ,IAAI,OAAO,KAAKE,eAAO,CAAC,QAAQ,IAAI,OAAO,KAAKA,eAAO,CAAC,KAAK,EAAE;IACvE,YAAY,IAAI,eAAe,CAAC;IAChC,YAAY,IAAI,sBAAsB,CAAC;IACvC,YAAY,IAAI,mBAAmB,CAAC;IACpC,YAAY,IAAI,OAAO,KAAKA,eAAO,CAAC,QAAQ,EAAE;IAC9C,gBAAgB,eAAe,GAAGC,gBAAU,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;IAC/F,gBAAgB,sBAAsB,GAAGN,iCAAgB,CAAC,cAAc,CAAC;IACzE,gBAAgB,mBAAmB,GAAGA,iCAAgB,CAAC,WAAW,CAAC;IACnE,aAAa,MAAM;IACnB,gBAAgB,eAAe,GAAG,WAAW,CAAC;IAC9C,gBAAgB,sBAAsB,GAAGA,iCAAgB,CAAC,uBAAuB,CAAC;IAClF,gBAAgB,mBAAmB,GAAGA,iCAAgB,CAAC,gBAAgB,CAAC;IACxE,aAAa;AACb;IACA,YAAY,IAAI,OAAO,GAAGA,iCAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAChF;IACA,YAAY,IAAI,kBAAkB,GAAG,yBAAyB,CAAC;IAC/D,YAAY,IAAI,OAAO,KAAKK,eAAO,CAAC,QAAQ,EAAE;IAC9C,gBAAgB,kBAAkB,CAAC,WAAW,GAAG,WAAW,CAAC;IAC7D,aAAa,MAAM;IACnB,gBAAgB,kBAAkB,CAAC,WAAW,GAAG,WAAW,CAAC;IAC7D,aAAa;IACb,YAAY,kBAAkB,CAAC,SAAS,GAAG,SAAS,CAAC;AACrD;IACA,YAAY,IAAI,gBAAgB,EAAE;IAClC,gBAAgB,IAAI,aAAa,GAAG,CAAC,CAAC;IACtC,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACjD,oBAAoB,aAAa,IAAI,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC;IAC/G,iBAAiB;AACjB;IACA,gBAAgB,cAAc,GAAG,IAAI,YAAY,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IACrE,gBAAgB,WAAW,GAAG,IAAI,UAAU,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;AAChE;IACA,gBAAgB,kBAAkB,CAAC,SAAS,GAAG,aAAa,CAAC;IAC7D,gBAAgB,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC;AACzD;IACA,gBAAgB,IAAI,EAAE,GAAG,CAAC,CAAC;IAC3B,gBAAgB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACjD,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACpD,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACxD;IACA,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAClD,oBAAoB,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD;IACA,oBAAoB,IAAI,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;AACtE;IACA,oBAAoB,IAAIF,YAAO,CAAC,MAAM,CAAC,EAAE;IACzC,wBAAwB,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;IACpD,wBAAwB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1C,wBAAwB,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACxD,4BAA4B,WAAW,CAAC,EAAE,EAAE,CAAC,GAAGF,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7E,4BAA4B,WAAW,CAAC,EAAE,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,4BAA4B,WAAW,CAAC,EAAE,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9E,4BAA4B,WAAW,CAAC,EAAE,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,yBAAyB;IACzB,qBAAqB;AACrB;IACA,oBAAoB,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACpD,oBAAoB,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC;IACzC,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,kBAAkB,CAAC,SAAS,GAAG,SAAS,CAAC;IACzD,gBAAgB,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC;IACnD,gBAAgB,cAAc,GAAG,IAAI,YAAY,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAC3F;IACA,gBAAgB,IAAIE,YAAO,CAAC,MAAM,CAAC,EAAE;IACrC,oBAAoB,WAAW,GAAG,IAAI,UAAU,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAChF;IACA,oBAAoB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACrD,wBAAwB,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,wBAAwB,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,wBAAwB,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3C,wBAAwB,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,wBAAwB,MAAM,GAAG,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;IACrG,qBAAqB;AACrB;IACA,oBAAoB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvD,oBAAoB,WAAW,CAAC,MAAM,EAAE,CAAC,GAAGF,WAAK,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC7E,oBAAoB,WAAW,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC/E,oBAAoB,WAAW,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9E,oBAAoB,WAAW,CAAC,MAAM,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC/E,iBAAiB;IACjB,aAAa;IACb,SAAS,MAAM;IACf,YAAY,iBAAiB,GAAG,gBAAgB,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC3E,YAAY,cAAc,GAAG,IAAI,YAAY,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;IACrE,YAAY,WAAW,GAAGE,YAAO,CAAC,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AAC9F;IACA,YAAY,IAAI,aAAa,GAAG,CAAC,CAAC;IAClC,YAAY,IAAI,UAAU,GAAG,CAAC,CAAC;AAC/B;IACA,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,gBAAgB,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACrC;IACA,gBAAgB,IAAI,gBAAgB,IAAI,CAAC,GAAG,CAAC,EAAE;IAC/C,oBAAoBK,qBAAU,CAAC,IAAI,CAAC,CAAC,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;IACtE,oBAAoB,aAAa,IAAI,CAAC,CAAC;AACvC;IACA,oBAAoB,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGP,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,iBAAiB;AACjB;IACA,gBAAgB,IAAI,gBAAgB,IAAI,CAAC,KAAK,MAAM,GAAG,CAAC,EAAE;IAC1D,oBAAoB,MAAM;IAC1B,iBAAiB;AACjB;IACA,gBAAgBO,qBAAU,CAAC,IAAI,CAAC,CAAC,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;IAClE,gBAAgB,aAAa,IAAI,CAAC,CAAC;AACnC;IACA,gBAAgB,IAAIL,YAAO,CAAC,MAAM,CAAC,EAAE;IACrC,oBAAoB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtC,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGF,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9E,oBAAoB,WAAW,CAAC,UAAU,EAAE,CAAC,GAAGA,WAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/E,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,IAAIQ,qCAAkB,EAAE,CAAC;IAClD,QAAQ,UAAU,CAAC,QAAQ,GAAG,IAAIC,mCAAiB,CAAC;IACpD,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IACxD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,cAAc;IACnC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAIR,YAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAY,UAAU,CAAC,KAAK,GAAG,IAAIO,mCAAiB,CAAC;IACrD,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,aAAa;IACnE,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,WAAW;IACpC,gBAAgB,SAAS,GAAG,IAAI;IAChC,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,iBAAiB,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;IACtD,QAAQ,IAAI,eAAe,GAAG,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1D,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;AACzF;IACA,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACpD,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;IACjC,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,SAAS;AACT;IACA,QAAQ,OAAO,IAAIC,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG,UAAU;IACnC,YAAY,OAAO,GAAG,OAAO;IAC7B,YAAY,aAAa,GAAGC,+BAAa,CAAC,KAAK;IAC/C,YAAY,cAAc,GAAGC,yBAAc,CAAC,UAAU,CAAC,SAAS,CAAC;IACjE,SAAS,CAAC,CAAC;IACX,KAAK;;IClaD,SAAS,4BAA4B,CAAC,sBAAsB,EAAE,MAAM,EAAE;IAC1E,QAAQ,IAAIZ,YAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAY,sBAAsB,GAAG,sBAAsB,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;IACnG,SAAS;IACT,QAAQ,sBAAsB,CAAC,UAAU,GAAGI,oBAAS,CAAC,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;IAC/F,QAAQ,OAAO,sBAAsB,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC;IAC7E,KAAK;;;;;;;;"}