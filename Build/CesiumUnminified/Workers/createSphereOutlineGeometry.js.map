{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../../Source/Core/SphereOutlineGeometry.js","../../../../Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport EllipsoidOutlineGeometry from './EllipsoidOutlineGeometry.js';\n\n    /**\n     * A description of the outline of a sphere.\n     *\n     * @alias SphereOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\n     * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\n     * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\n     *\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n     *\n     * @example\n     * var sphere = new Cesium.SphereOutlineGeometry({\n     *   radius : 100.0,\n     *   stackPartitions : 6,\n     *   slicePartitions: 5\n     * });\n     * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\n     */\n    function SphereOutlineGeometry(options) {\n        var radius = defaultValue(options.radius, 1.0);\n        var radii = new Cartesian3(radius, radius, radius);\n        var ellipsoidOptions = {\n                radii: radii,\n                stackPartitions: options.stackPartitions,\n                slicePartitions: options.slicePartitions,\n                subdivisions: options.subdivisions\n        };\n\n        this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\n        this._workerName = 'createSphereOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    SphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {SphereOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    SphereOutlineGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.typeOf.object('value', value);\n        //>>includeEnd('debug');\n\n        return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n    };\n\n    var scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\n    var scratchOptions = {\n        radius : undefined,\n        radii : new Cartesian3(),\n        stackPartitions : undefined,\n        slicePartitions : undefined,\n        subdivisions : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {SphereOutlineGeometry} [result] The object into which to store the result.\n     * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\n     */\n    SphereOutlineGeometry.unpack = function(array, startingIndex, result) {\n        var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n        scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\n\n        if (!defined(result)) {\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\n            return new SphereOutlineGeometry(scratchOptions);\n        }\n\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n        result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\n     * @returns {Geometry} The computed vertices and indices.\n     */\n    SphereOutlineGeometry.createGeometry = function(sphereGeometry) {\n        return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n    };\nexport default SphereOutlineGeometry;\n","import defined from '../Core/defined.js';\nimport SphereOutlineGeometry from '../Core/SphereOutlineGeometry.js';\n\n    function createSphereOutlineGeometry(sphereGeometry, offset) {\n        if (defined(offset)) {\n            sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\n        }\n        return SphereOutlineGeometry.createGeometry(sphereGeometry);\n    }\nexport default createSphereOutlineGeometry;\n"],"names":["defaultValue","Cartesian3","EllipsoidOutlineGeometry","Check","defined"],"mappings":"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"}