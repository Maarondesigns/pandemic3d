{"version":3,"file":"createVerticesFromGoogleEarthEnterpriseBuffer.js","sources":["../../../../Source/WorkersES6/createVerticesFromGoogleEarthEnterpriseBuffer.js"],"sourcesContent":["import AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\nimport Transforms from '../Core/Transforms.js';\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\n\n    var sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\n    var sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n    var sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;\n    var sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;\n\n    function indexOfEpsilon(arr, elem, elemType) {\n        elemType = defaultValue(elemType, CesiumMath);\n        var count = arr.length;\n        for (var i = 0; i < count; ++i) {\n            if (elemType.equalsEpsilon(arr[i], elem, CesiumMath.EPSILON12)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    function createVerticesFromGoogleEarthEnterpriseBuffer(parameters, transferableObjects) {\n        parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\n        parameters.rectangle = Rectangle.clone(parameters.rectangle);\n\n        var statistics = processBuffer(parameters.buffer, parameters.relativeToCenter, parameters.ellipsoid,\n            parameters.rectangle, parameters.nativeRectangle, parameters.exaggeration, parameters.skirtHeight,\n            parameters.includeWebMercatorT, parameters.negativeAltitudeExponentBias, parameters.negativeElevationThreshold);\n        var vertices = statistics.vertices;\n        transferableObjects.push(vertices.buffer);\n        var indices = statistics.indices;\n        transferableObjects.push(indices.buffer);\n\n        return {\n            vertices : vertices.buffer,\n            indices : indices.buffer,\n            numberOfAttributes : statistics.encoding.getStride(),\n            minimumHeight : statistics.minimumHeight,\n            maximumHeight : statistics.maximumHeight,\n            boundingSphere3D : statistics.boundingSphere3D,\n            orientedBoundingBox : statistics.orientedBoundingBox,\n            occludeePointInScaledSpace : statistics.occludeePointInScaledSpace,\n            encoding : statistics.encoding,\n            vertexCountWithoutSkirts : statistics.vertexCountWithoutSkirts,\n            indexCountWithoutSkirts : statistics.indexCountWithoutSkirts,\n            westIndicesSouthToNorth : statistics.westIndicesSouthToNorth,\n            southIndicesEastToWest : statistics.southIndicesEastToWest,\n            eastIndicesNorthToSouth : statistics.eastIndicesNorthToSouth,\n            northIndicesWestToEast : statistics.northIndicesWestToEast\n        };\n    }\n\n    var scratchCartographic = new Cartographic();\n    var scratchCartesian = new Cartesian3();\n    var minimumScratch = new Cartesian3();\n    var maximumScratch = new Cartesian3();\n    var matrix4Scratch = new Matrix4();\n\n    function processBuffer(buffer, relativeToCenter, ellipsoid, rectangle, nativeRectangle, exaggeration, skirtHeight, includeWebMercatorT, negativeAltitudeExponentBias, negativeElevationThreshold) {\n        var geographicWest;\n        var geographicSouth;\n        var geographicEast;\n        var geographicNorth;\n        var rectangleWidth, rectangleHeight;\n\n        if (!defined(rectangle)) {\n            geographicWest = CesiumMath.toRadians(nativeRectangle.west);\n            geographicSouth = CesiumMath.toRadians(nativeRectangle.south);\n            geographicEast = CesiumMath.toRadians(nativeRectangle.east);\n            geographicNorth = CesiumMath.toRadians(nativeRectangle.north);\n            rectangleWidth = CesiumMath.toRadians(rectangle.width);\n            rectangleHeight = CesiumMath.toRadians(rectangle.height);\n        } else {\n            geographicWest = rectangle.west;\n            geographicSouth = rectangle.south;\n            geographicEast = rectangle.east;\n            geographicNorth = rectangle.north;\n            rectangleWidth = rectangle.width;\n            rectangleHeight = rectangle.height;\n        }\n\n        // Keep track of quad borders so we can remove duplicates around the borders\n        var quadBorderLatitudes = [geographicSouth, geographicNorth];\n        var quadBorderLongitudes = [geographicWest, geographicEast];\n\n        var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\n        var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\n\n        var southMercatorY;\n        var oneOverMercatorHeight;\n        if (includeWebMercatorT) {\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\n        }\n\n        var dv = new DataView(buffer);\n\n        var minHeight = Number.POSITIVE_INFINITY;\n        var maxHeight = Number.NEGATIVE_INFINITY;\n\n        var minimum = minimumScratch;\n        minimum.x = Number.POSITIVE_INFINITY;\n        minimum.y = Number.POSITIVE_INFINITY;\n        minimum.z = Number.POSITIVE_INFINITY;\n\n        var maximum = maximumScratch;\n        maximum.x = Number.NEGATIVE_INFINITY;\n        maximum.y = Number.NEGATIVE_INFINITY;\n        maximum.z = Number.NEGATIVE_INFINITY;\n\n        // Compute sizes\n        var offset = 0;\n        var size = 0;\n        var indicesSize = 0;\n        var quadSize;\n        var quad;\n        for (quad = 0; quad < 4; ++quad) {\n            var o = offset;\n            quadSize = dv.getUint32(o, true);\n            o += sizeOfUint32;\n\n            var x = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\n            o += sizeOfDouble;\n            if (indexOfEpsilon(quadBorderLongitudes, x) === -1) {\n                quadBorderLongitudes.push(x);\n            }\n\n            var y = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\n            o += sizeOfDouble;\n            if (indexOfEpsilon(quadBorderLatitudes, y) === -1) {\n                quadBorderLatitudes.push(y);\n            }\n\n            o += 2 * sizeOfDouble; // stepX + stepY\n\n            var c = dv.getInt32(o, true); // Read point count\n            o += sizeOfInt32;\n            size += c;\n\n            c = dv.getInt32(o, true); // Read index count\n            indicesSize += c * 3;\n\n            offset += quadSize + sizeOfUint32; // Jump to next quad\n        }\n\n        // Quad Border points to remove duplicates\n        var quadBorderPoints = [];\n        var quadBorderIndices = [];\n\n        // Create arrays\n        var positions = new Array(size);\n        var uvs = new Array(size);\n        var heights = new Array(size);\n        var webMercatorTs = includeWebMercatorT ? new Array(size) : [];\n        var indices = new Array(indicesSize);\n\n        // Points are laid out in rows starting at SW, so storing border points as we\n        //  come across them all points will be adjacent.\n        var westBorder = [];\n        var southBorder = [];\n        var eastBorder = [];\n        var northBorder = [];\n\n        // Each tile is split into 4 parts\n        var pointOffset = 0;\n        var indicesOffset = 0;\n        offset = 0;\n        for (quad = 0; quad < 4; ++quad) {\n            quadSize = dv.getUint32(offset, true);\n            offset += sizeOfUint32;\n            var startQuad = offset;\n\n            var originX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\n            offset += sizeOfDouble;\n\n            var originY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\n            offset += sizeOfDouble;\n\n            var stepX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\n            var halfStepX = stepX * 0.5;\n            offset += sizeOfDouble;\n\n            var stepY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\n            var halfStepY = stepY * 0.5;\n            offset += sizeOfDouble;\n\n            var numPoints = dv.getInt32(offset, true);\n            offset += sizeOfInt32;\n\n            var numFaces = dv.getInt32(offset, true);\n            offset += sizeOfInt32;\n\n            //var level = dv.getInt32(offset, true);\n            offset += sizeOfInt32;\n\n            // Keep track of quad indices to overall tile indices\n            var indicesMapping = new Array(numPoints);\n            for (var i = 0; i < numPoints; ++i) {\n                var longitude = originX + dv.getUint8(offset++) * stepX;\n                scratchCartographic.longitude = longitude;\n                var latitude = originY + dv.getUint8(offset++) * stepY;\n                scratchCartographic.latitude = latitude;\n\n                var height = dv.getFloat32(offset, true);\n                offset += sizeOfFloat;\n\n                // In order to support old clients, negative altitude values are stored as\n                // height/-2^32. Old clients see the value as really close to 0 but new clients multiply\n                // by -2^32 to get the real negative altitude value.\n                if (height !== 0 && height < negativeElevationThreshold) {\n                    height *= -Math.pow(2, negativeAltitudeExponentBias);\n                }\n\n                // Height is stored in units of (1/EarthRadius) or (1/6371010.0)\n                height *= 6371010.0 * exaggeration;\n\n                scratchCartographic.height = height;\n\n                // Is it along a quad border - if so check if already exists and use that index\n                if (indexOfEpsilon(quadBorderLongitudes, longitude) !== -1 ||\n                    indexOfEpsilon(quadBorderLatitudes, latitude) !== -1) {\n                    var index = indexOfEpsilon(quadBorderPoints, scratchCartographic, Cartographic);\n                    if (index === -1) {\n                        quadBorderPoints.push(Cartographic.clone(scratchCartographic));\n                        quadBorderIndices.push(pointOffset);\n                    } else {\n                        indicesMapping[i] = quadBorderIndices[index];\n                        continue;\n                    }\n                }\n                indicesMapping[i] = pointOffset;\n\n                if (Math.abs(longitude - geographicWest) < halfStepX) {\n                    westBorder.push({\n                        index : pointOffset,\n                        cartographic : Cartographic.clone(scratchCartographic)\n                    });\n                } else if (Math.abs(longitude - geographicEast) < halfStepX) {\n                    eastBorder.push({\n                        index : pointOffset,\n                        cartographic : Cartographic.clone(scratchCartographic)\n                    });\n                } else if (Math.abs(latitude - geographicSouth) < halfStepY) {\n                    southBorder.push({\n                        index : pointOffset,\n                        cartographic : Cartographic.clone(scratchCartographic)\n                    });\n                } else if (Math.abs(latitude - geographicNorth) < halfStepY) {\n                    northBorder.push({\n                        index : pointOffset,\n                        cartographic : Cartographic.clone(scratchCartographic)\n                    });\n                }\n\n                minHeight = Math.min(height, minHeight);\n                maxHeight = Math.max(height, maxHeight);\n                heights[pointOffset] = height;\n\n                var pos = ellipsoid.cartographicToCartesian(scratchCartographic);\n                positions[pointOffset] = pos;\n\n                if (includeWebMercatorT) {\n                    webMercatorTs[pointOffset] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\n                }\n\n                Matrix4.multiplyByPoint(toENU, pos, scratchCartesian);\n\n                Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\n                Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\n\n                var u = (longitude - geographicWest) / (geographicEast - geographicWest);\n                u = CesiumMath.clamp(u, 0.0, 1.0);\n                var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\n                v = CesiumMath.clamp(v, 0.0, 1.0);\n\n                uvs[pointOffset] = new Cartesian2(u, v);\n                ++pointOffset;\n            }\n\n            var facesElementCount = numFaces * 3;\n            for (var j = 0; j < facesElementCount; ++j, ++indicesOffset) {\n                indices[indicesOffset] = indicesMapping[dv.getUint16(offset, true)];\n                offset += sizeOfUint16;\n            }\n\n            if (quadSize !== (offset - startQuad)) {\n                throw new RuntimeError('Invalid terrain tile.');\n            }\n        }\n\n        positions.length = pointOffset;\n        uvs.length = pointOffset;\n        heights.length = pointOffset;\n        if (includeWebMercatorT) {\n            webMercatorTs.length = pointOffset;\n        }\n\n        var vertexCountWithoutSkirts = pointOffset;\n        var indexCountWithoutSkirts = indicesOffset;\n\n        // Add skirt points\n        var skirtOptions = {\n            hMin : minHeight,\n            lastBorderPoint : undefined,\n            skirtHeight : skirtHeight,\n            toENU : toENU,\n            ellipsoid : ellipsoid,\n            minimum : minimum,\n            maximum : maximum\n        };\n\n        // Sort counter clockwise from NW corner\n        // Corner points are in the east/west arrays\n        westBorder.sort(function(a, b) {\n            return b.cartographic.latitude - a.cartographic.latitude;\n        });\n        southBorder.sort(function(a, b) {\n            return a.cartographic.longitude - b.cartographic.longitude;\n        });\n        eastBorder.sort(function(a, b) {\n            return a.cartographic.latitude - b.cartographic.latitude;\n        });\n        northBorder.sort(function(a, b) {\n            return b.cartographic.longitude - a.cartographic.longitude;\n        });\n\n        var percentage = 0.00001;\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\n            westBorder, -percentage * rectangleWidth, true, -percentage * rectangleHeight);\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\n            southBorder, -percentage * rectangleHeight, false);\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\n            eastBorder, percentage * rectangleWidth, true, percentage * rectangleHeight);\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\n            northBorder, percentage * rectangleHeight, false);\n\n        // Since the corner between the north and west sides is in the west array, generate the last\n        //  two triangles between the last north vertex and the first west vertex\n        if (westBorder.length > 0 && northBorder.length > 0) {\n            var firstBorderIndex = westBorder[0].index;\n            var firstSkirtIndex = vertexCountWithoutSkirts;\n            var lastBorderIndex = northBorder[northBorder.length - 1].index;\n            var lastSkirtIndex = positions.length - 1;\n\n            indices.push(lastBorderIndex, lastSkirtIndex, firstSkirtIndex, firstSkirtIndex, firstBorderIndex, lastBorderIndex);\n        }\n\n        size = positions.length; // Get new size with skirt vertices\n\n        var boundingSphere3D = BoundingSphere.fromPoints(positions);\n        var orientedBoundingBox;\n        if (defined(rectangle)) {\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\n        }\n\n        var occluder = new EllipsoidalOccluder(ellipsoid);\n        var occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(relativeToCenter, positions, minHeight);\n\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\n        var encoding = new TerrainEncoding(aaBox, skirtOptions.hMin, maxHeight, fromENU, false, includeWebMercatorT);\n        var vertices = new Float32Array(size * encoding.getStride());\n\n        var bufferIndex = 0;\n        for (var k = 0; k < size; ++k) {\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[k], uvs[k], heights[k], undefined, webMercatorTs[k]);\n        }\n\n        var westIndicesSouthToNorth = westBorder.map(function(vertex) { return vertex.index; }).reverse();\n        var southIndicesEastToWest = southBorder.map(function(vertex) { return vertex.index; }).reverse();\n        var eastIndicesNorthToSouth = eastBorder.map(function(vertex) { return vertex.index; }).reverse();\n        var northIndicesWestToEast = northBorder.map(function(vertex) { return vertex.index; }).reverse();\n\n        southIndicesEastToWest.unshift(eastIndicesNorthToSouth[eastIndicesNorthToSouth.length - 1]);\n        southIndicesEastToWest.push(westIndicesSouthToNorth[0]);\n\n        northIndicesWestToEast.unshift(westIndicesSouthToNorth[westIndicesSouthToNorth.length - 1]);\n        northIndicesWestToEast.push(eastIndicesNorthToSouth[0]);\n\n        return {\n            vertices : vertices,\n            indices : new Uint16Array(indices),\n            maximumHeight : maxHeight,\n            minimumHeight : minHeight,\n            encoding : encoding,\n            boundingSphere3D : boundingSphere3D,\n            orientedBoundingBox : orientedBoundingBox,\n            occludeePointInScaledSpace : occludeePointInScaledSpace,\n            vertexCountWithoutSkirts : vertexCountWithoutSkirts,\n            indexCountWithoutSkirts : indexCountWithoutSkirts,\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\n            southIndicesEastToWest : southIndicesEastToWest,\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\n            northIndicesWestToEast : northIndicesWestToEast\n        };\n    }\n\n    function addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\n                      borderPoints, fudgeFactor, eastOrWest, cornerFudge) {\n        var count = borderPoints.length;\n        for (var j = 0; j < count; ++j) {\n            var borderPoint = borderPoints[j];\n            var borderCartographic = borderPoint.cartographic;\n            var borderIndex = borderPoint.index;\n            var currentIndex = positions.length;\n\n            var longitude = borderCartographic.longitude;\n            var latitude = borderCartographic.latitude;\n            latitude = CesiumMath.clamp(latitude, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO); // Don't go over the poles\n            var height = borderCartographic.height - skirtOptions.skirtHeight;\n            skirtOptions.hMin = Math.min(skirtOptions.hMin, height);\n\n            Cartographic.fromRadians(longitude, latitude, height, scratchCartographic);\n\n            // Adjust sides to angle out\n            if (eastOrWest) {\n                scratchCartographic.longitude += fudgeFactor;\n            }\n\n            // Adjust top or bottom to angle out\n            // Since corners are in the east/west arrays angle the first and last points as well\n            if (!eastOrWest) {\n                scratchCartographic.latitude += fudgeFactor;\n            } else if (j === (count - 1)) {\n                scratchCartographic.latitude += cornerFudge;\n            } else if (j === 0) {\n                scratchCartographic.latitude -= cornerFudge;\n            }\n\n            var pos = skirtOptions.ellipsoid.cartographicToCartesian(scratchCartographic);\n            positions.push(pos);\n            heights.push(height);\n            uvs.push(Cartesian2.clone(uvs[borderIndex])); // Copy UVs from border point\n            if (webMercatorTs.length > 0) {\n                webMercatorTs.push(webMercatorTs[borderIndex]);\n            }\n\n            Matrix4.multiplyByPoint(skirtOptions.toENU, pos, scratchCartesian);\n\n            var minimum = skirtOptions.minimum;\n            var maximum = skirtOptions.maximum;\n            Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\n            Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\n\n            var lastBorderPoint = skirtOptions.lastBorderPoint;\n            if (defined(lastBorderPoint)) {\n                var lastBorderIndex = lastBorderPoint.index;\n                indices.push(lastBorderIndex, currentIndex - 1, currentIndex, currentIndex, borderIndex, lastBorderIndex);\n            }\n\n            skirtOptions.lastBorderPoint = borderPoint;\n        }\n    }\nexport default createTaskProcessorWorker(createVerticesFromGoogleEarthEnterpriseBuffer);\n"],"names":["defaultValue","CesiumMath","Ellipsoid","Rectangle","Cartographic","Cartesian3","Matrix4","defined","Transforms","WebMercatorProjection","Cartesian2","RuntimeError","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding"],"mappings":"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"}