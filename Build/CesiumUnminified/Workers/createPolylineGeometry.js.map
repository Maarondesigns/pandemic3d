{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Color from './Color.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryType from './GeometryType.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchInterpolateColorsArray = [];\n\n    function interpolateColors(p0, p1, color0, color1, numPoints) {\n        var colors = scratchInterpolateColorsArray;\n        colors.length = numPoints;\n        var i;\n\n        var r0 = color0.red;\n        var g0 = color0.green;\n        var b0 = color0.blue;\n        var a0 = color0.alpha;\n\n        var r1 = color1.red;\n        var g1 = color1.green;\n        var b1 = color1.blue;\n        var a1 = color1.alpha;\n\n        if (Color.equals(color0, color1)) {\n            for (i = 0; i < numPoints; i++) {\n                colors[i] = Color.clone(color0);\n            }\n            return colors;\n        }\n\n        var redPerVertex = (r1 - r0) / numPoints;\n        var greenPerVertex = (g1 - g0) / numPoints;\n        var bluePerVertex = (b1 - b0) / numPoints;\n        var alphaPerVertex = (a1 - a0) / numPoints;\n\n        for (i = 0; i < numPoints; i++) {\n            colors[i] = new Color(r0 + i * redPerVertex, g0 + i * greenPerVertex, b0 + i * bluePerVertex, a0 + i * alphaPerVertex);\n        }\n\n        return colors;\n    }\n\n    /**\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n     * and each additional position defines a line segment from the previous position. The polyline is capable of\n     * displaying with a material.\n     *\n     * @alias PolylineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n     * @param {Number} [options.width=1.0] The width in pixels.\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @exception {DeveloperError} At least two positions are required.\n     * @exception {DeveloperError} width must be greater than or equal to one.\n     * @exception {DeveloperError} colors has an invalid length.\n     *\n     * @see PolylineGeometry#createGeometry\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n     *\n     * @example\n     * // A polyline with two connected line segments\n     * var polyline = new Cesium.PolylineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     0.0, 0.0,\n     *     5.0, 0.0,\n     *     5.0, 5.0\n     *   ]),\n     *   width : 10.0\n     * });\n     * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\n     */\n    function PolylineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var colors = options.colors;\n        var width = defaultValue(options.width, 1.0);\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n        //>>includeStart('debug', pragmas.debug);\n        if ((!defined(positions)) || (positions.length < 2)) {\n            throw new DeveloperError('At least two positions are required.');\n        }\n        if (typeof width !== 'number') {\n            throw new DeveloperError('width must be a number');\n        }\n        if (defined(colors) && ((colorsPerVertex && colors.length < positions.length) || (!colorsPerVertex && colors.length < positions.length - 1))) {\n            throw new DeveloperError('colors has an invalid length.');\n        }\n        //>>includeEnd('debug');\n\n        this._positions = positions;\n        this._colors = colors;\n        this._width = width;\n        this._colorsPerVertex = colorsPerVertex;\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._workerName = 'createPolylineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var colors = value._colors;\n        length = defined(colors) ? colors.length : 0.0;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            Color.pack(colors[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        colors : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        width : undefined,\n        colorsPerVertex : undefined,\n        arcType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineGeometry} [result] The object into which to store the result.\n     * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\n     */\n    PolylineGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var colors = length > 0 ? new Array(length) : undefined;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            colors[i] = Color.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var width = array[startingIndex++];\n        var colorsPerVertex = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.colors = colors;\n            scratchOptions.width = width;\n            scratchOptions.colorsPerVertex = colorsPerVertex;\n            scratchOptions.arcType = arcType;\n            scratchOptions.granularity = granularity;\n            return new PolylineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._colors = colors;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._width = width;\n        result._colorsPerVertex = colorsPerVertex;\n        result._arcType = arcType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var scratchCartesian3 = new Cartesian3();\n    var scratchPosition = new Cartesian3();\n    var scratchPrevPosition = new Cartesian3();\n    var scratchNextPosition = new Cartesian3();\n\n    /**\n     * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineGeometry} polylineGeometry A description of the polyline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineGeometry.createGeometry = function(polylineGeometry) {\n        var width = polylineGeometry._width;\n        var vertexFormat = polylineGeometry._vertexFormat;\n        var colors = polylineGeometry._colors;\n        var colorsPerVertex = polylineGeometry._colorsPerVertex;\n        var arcType = polylineGeometry._arcType;\n        var granularity = polylineGeometry._granularity;\n        var ellipsoid = polylineGeometry._ellipsoid;\n\n        var i;\n        var j;\n        var k;\n\n        var positions = arrayRemoveDuplicates(polylineGeometry._positions, Cartesian3.equalsEpsilon);\n        var positionsLength = positions.length;\n\n        // A width of a pixel or less is not a valid geometry, but in order to support external data\n        // that may have errors we treat this as an empty geometry.\n        if (positionsLength < 2 || width <= 0.0) {\n            return undefined;\n        }\n\n        if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n            var subdivisionSize;\n            var numberOfPointsFunction;\n            if (arcType === ArcType.GEODESIC) {\n                subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n                numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n            } else {\n                subdivisionSize = granularity;\n                numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n            }\n\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n            if (defined(colors)) {\n                var colorLength = 1;\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    colorLength += numberOfPointsFunction(positions[i], positions[i + 1], subdivisionSize);\n                }\n\n                var newColors = new Array(colorLength);\n                var newColorIndex = 0;\n\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    var p0 = positions[i];\n                    var p1 = positions[i + 1];\n                    var c0 = colors[i];\n\n                    var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\n                    if (colorsPerVertex && i < colorLength) {\n                        var c1 = colors[i + 1];\n                        var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\n                        var interpolatedColorsLength = interpolatedColors.length;\n                        for (j = 0; j < interpolatedColorsLength; ++j) {\n                            newColors[newColorIndex++] = interpolatedColors[j];\n                        }\n                    } else {\n                        for (j = 0; j < numColors; ++j) {\n                            newColors[newColorIndex++] = Color.clone(c0);\n                        }\n                    }\n                }\n\n                newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\n                colors = newColors;\n\n                scratchInterpolateColorsArray.length = 0;\n            }\n\n            if (arcType === ArcType.GEODESIC) {\n                positions = PolylinePipeline.generateCartesianArc({\n                    positions: positions,\n                    minDistance: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            } else {\n                positions = PolylinePipeline.generateCartesianRhumbArc({\n                    positions: positions,\n                    granularity: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            }\n        }\n\n        positionsLength = positions.length;\n        var size = positionsLength * 4.0 - 4.0;\n\n        var finalPositions = new Float64Array(size * 3);\n        var prevPositions = new Float64Array(size * 3);\n        var nextPositions = new Float64Array(size * 3);\n        var expandAndWidth = new Float32Array(size * 2);\n        var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\n        var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\n\n        var positionIndex = 0;\n        var expandAndWidthIndex = 0;\n        var stIndex = 0;\n        var colorIndex = 0;\n        var position;\n\n        for (j = 0; j < positionsLength; ++j) {\n            if (j === 0) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[0], positions[1], position);\n                Cartesian3.add(positions[0], position, position);\n            } else {\n                position = positions[j - 1];\n            }\n\n            Cartesian3.clone(position, scratchPrevPosition);\n            Cartesian3.clone(positions[j], scratchPosition);\n\n            if (j === positionsLength - 1) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\n                Cartesian3.add(positions[positionsLength - 1], position, position);\n            } else {\n                position = positions[j + 1];\n            }\n\n            Cartesian3.clone(position, scratchNextPosition);\n\n            var color0, color1;\n            if (defined(finalColors)) {\n                if (j !== 0 && !colorsPerVertex) {\n                    color0 = colors[j - 1];\n                } else {\n                    color0 = colors[j];\n                }\n\n                if (j !== positionsLength - 1) {\n                    color1 = colors[j];\n                }\n            }\n\n            var startK = j === 0 ? 2 : 0;\n            var endK = j === positionsLength - 1 ? 2 : 4;\n\n            for (k = startK; k < endK; ++k) {\n                Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\n                Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\n                Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\n                positionIndex += 3;\n\n                var direction = (k - 2 < 0) ? -1.0 : 1.0;\n                expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;       // expand direction\n                expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n                if (vertexFormat.st) {\n                    st[stIndex++] = j / (positionsLength - 1);\n                    st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\n                }\n\n                if (defined(finalColors)) {\n                    var color = (k < 2) ? color0 : color1;\n\n                    finalColors[colorIndex++] = Color.floatToByte(color.red);\n                    finalColors[colorIndex++] = Color.floatToByte(color.green);\n                    finalColors[colorIndex++] = Color.floatToByte(color.blue);\n                    finalColors[colorIndex++] = Color.floatToByte(color.alpha);\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        attributes.prevPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : prevPositions\n        });\n\n        attributes.nextPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : nextPositions\n        });\n\n        attributes.expandAndWidth = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 2,\n            values : expandAndWidth\n        });\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        if (defined(finalColors)) {\n            attributes.color = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 4,\n                values : finalColors,\n                normalize : true\n            });\n        }\n\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n        var index = 0;\n        var indicesIndex = 0;\n        var length = positionsLength - 1.0;\n        for (j = 0; j < length; ++j) {\n            indices[indicesIndex++] = index;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 1;\n\n            indices[indicesIndex++] = index + 1;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 3;\n\n            index += 4;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromPoints(positions),\n            geometryType : GeometryType.POLYLINES\n        });\n    };\nexport default PolylineGeometry;\n","import defined from '../Core/defined.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport PolylineGeometry from '../Core/PolylineGeometry.js';\n\n    function createPolylineGeometry(polylineGeometry, offset) {\n        if (defined(offset)) {\n            polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\n        }\n        polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\n        return PolylineGeometry.createGeometry(polylineGeometry);\n    }\nexport default createPolylineGeometry;\n"],"names":["Color","defaultValue","defined","DeveloperError","VertexFormat","ArcType","CesiumMath","Ellipsoid","Cartesian3","arrayRemoveDuplicates","PolylinePipeline","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere","GeometryType"],"mappings":"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"}