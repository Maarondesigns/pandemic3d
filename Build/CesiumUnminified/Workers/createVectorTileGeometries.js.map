{"version":3,"file":"createVectorTileGeometries.js","sources":["../../../../Source/Scene/Vector3DTileBatch.js","../../../../Source/WorkersES6/createVectorTileGeometries.js"],"sourcesContent":["\n    /**\n     * Describes a renderable batch of geometry.\n     *\n     * @alias Vector3DTileBatch\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {Number} options.offset The offset of the batch into the indices buffer.\n     * @param {Number} options.count The number of indices in the batch.\n     * @param {Color} options.color The color of the geometry in the batch.\n     * @param {Number[]} options.batchIds An array where each element is the batch id of the geometry in the batch.\n     *\n     * @private\n     */\n    function Vector3DTileBatch(options) {\n        /**\n         * The offset of the batch into the indices buffer.\n         * @type {Number}\n         */\n        this.offset = options.offset;\n        /**\n         * The number of indices in the batch.\n         * @type {Number}\n         */\n        this.count = options.count;\n        /**\n         * The color of the geometry in the batch.\n         * @type {Color}\n         */\n        this.color = options.color;\n        /**\n         * An array where each element is the batch id of the geometry in the batch.\n         * @type {Number[]}\n         */\n        this.batchIds = options.batchIds;\n    }\nexport default Vector3DTileBatch;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport BoxGeometry from '../Core/BoxGeometry.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport CylinderGeometry from '../Core/CylinderGeometry.js';\nimport defined from '../Core/defined.js';\nimport EllipsoidGeometry from '../Core/EllipsoidGeometry.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Vector3DTileBatch from '../Scene/Vector3DTileBatch.js';\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\n\n    var scratchCartesian = new Cartesian3();\n\n    var packedBoxLength = Matrix4.packedLength + Cartesian3.packedLength;\n    var packedCylinderLength = Matrix4.packedLength + 2;\n    var packedEllipsoidLength = Matrix4.packedLength + Cartesian3.packedLength;\n    var packedSphereLength = Cartesian3.packedLength + 1;\n\n    var scratchModelMatrixAndBV = {\n        modelMatrix : new Matrix4(),\n        boundingVolume : new BoundingSphere()\n    };\n\n    function boxModelMatrixAndBoundingVolume(boxes, index) {\n        var boxIndex  = index * packedBoxLength;\n\n        var dimensions = Cartesian3.unpack(boxes, boxIndex, scratchCartesian);\n        boxIndex += Cartesian3.packedLength;\n\n        var boxModelMatrix = Matrix4.unpack(boxes, boxIndex, scratchModelMatrixAndBV.modelMatrix);\n        Matrix4.multiplyByScale(boxModelMatrix, dimensions, boxModelMatrix);\n\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\n        boundingVolume.radius = Math.sqrt(3.0);\n\n        return scratchModelMatrixAndBV;\n    }\n\n    function cylinderModelMatrixAndBoundingVolume(cylinders, index) {\n        var cylinderIndex = index * packedCylinderLength;\n\n        var cylinderRadius = cylinders[cylinderIndex++];\n        var length = cylinders[cylinderIndex++];\n        var scale = Cartesian3.fromElements(cylinderRadius, cylinderRadius, length, scratchCartesian);\n\n        var cylinderModelMatrix = Matrix4.unpack(cylinders, cylinderIndex, scratchModelMatrixAndBV.modelMatrix);\n        Matrix4.multiplyByScale(cylinderModelMatrix, scale, cylinderModelMatrix);\n\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\n        boundingVolume.radius = Math.sqrt(2.0);\n\n        return scratchModelMatrixAndBV;\n    }\n\n    function ellipsoidModelMatrixAndBoundingVolume(ellipsoids, index) {\n        var ellipsoidIndex = index * packedEllipsoidLength;\n\n        var radii = Cartesian3.unpack(ellipsoids, ellipsoidIndex, scratchCartesian);\n        ellipsoidIndex += Cartesian3.packedLength;\n\n        var ellipsoidModelMatrix = Matrix4.unpack(ellipsoids, ellipsoidIndex, scratchModelMatrixAndBV.modelMatrix);\n        Matrix4.multiplyByScale(ellipsoidModelMatrix, radii, ellipsoidModelMatrix);\n\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\n        boundingVolume.radius = 1.0;\n\n        return scratchModelMatrixAndBV;\n    }\n\n    function sphereModelMatrixAndBoundingVolume(spheres, index) {\n        var sphereIndex = index * packedSphereLength;\n\n        var sphereRadius = spheres[sphereIndex++];\n\n        var sphereTranslation = Cartesian3.unpack(spheres, sphereIndex, scratchCartesian);\n        var sphereModelMatrix = Matrix4.fromTranslation(sphereTranslation, scratchModelMatrixAndBV.modelMatrix);\n        Matrix4.multiplyByUniformScale(sphereModelMatrix, sphereRadius, sphereModelMatrix);\n\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\n        boundingVolume.radius = 1.0;\n\n        return scratchModelMatrixAndBV;\n    }\n\n    var scratchPosition = new Cartesian3();\n\n    function createPrimitive(options, primitive, primitiveBatchIds, geometry, getModelMatrixAndBoundingVolume) {\n        if (!defined(primitive)) {\n            return;\n        }\n\n        var numberOfPrimitives = primitiveBatchIds.length;\n        var geometryPositions = geometry.attributes.position.values;\n        var geometryIndices = geometry.indices;\n\n        var positions = options.positions;\n        var vertexBatchIds = options.vertexBatchIds;\n        var indices = options.indices;\n\n        var batchIds = options.batchIds;\n        var batchTableColors = options.batchTableColors;\n        var batchedIndices = options.batchedIndices;\n        var indexOffsets = options.indexOffsets;\n        var indexCounts = options.indexCounts;\n        var boundingVolumes = options.boundingVolumes;\n\n        var modelMatrix = options.modelMatrix;\n        var center = options.center;\n\n        var positionOffset = options.positionOffset;\n        var batchIdIndex = options.batchIdIndex;\n        var indexOffset = options.indexOffset;\n        var batchedIndicesOffset = options.batchedIndicesOffset;\n\n        for (var i = 0; i < numberOfPrimitives; ++i) {\n            var primitiveModelMatrixAndBV = getModelMatrixAndBoundingVolume(primitive, i);\n            var primitiveModelMatrix = primitiveModelMatrixAndBV.modelMatrix;\n            Matrix4.multiply(modelMatrix, primitiveModelMatrix, primitiveModelMatrix);\n\n            var batchId = primitiveBatchIds[i];\n\n            var positionsLength = geometryPositions.length;\n            for (var j = 0; j < positionsLength; j += 3) {\n                var position = Cartesian3.unpack(geometryPositions, j, scratchPosition);\n                Matrix4.multiplyByPoint(primitiveModelMatrix, position, position);\n                Cartesian3.subtract(position, center, position);\n\n                Cartesian3.pack(position, positions, positionOffset * 3 + j);\n                vertexBatchIds[batchIdIndex++] = batchId;\n            }\n\n            var indicesLength = geometryIndices.length;\n            for (var k = 0; k < indicesLength; ++k) {\n                indices[indexOffset + k] = geometryIndices[k] + positionOffset;\n            }\n\n            var offset = i + batchedIndicesOffset;\n            batchedIndices[offset] = new Vector3DTileBatch({\n                offset : indexOffset,\n                count : indicesLength,\n                color : Color.fromRgba(batchTableColors[batchId]),\n                batchIds : [batchId]\n            });\n            batchIds[offset] = batchId;\n            indexOffsets[offset] = indexOffset;\n            indexCounts[offset] = indicesLength;\n            boundingVolumes[offset] = BoundingSphere.transform(primitiveModelMatrixAndBV.boundingVolume, primitiveModelMatrix);\n\n            positionOffset += positionsLength / 3;\n            indexOffset += indicesLength;\n        }\n\n        options.positionOffset = positionOffset;\n        options.batchIdIndex = batchIdIndex;\n        options.indexOffset = indexOffset;\n        options.batchedIndicesOffset += numberOfPrimitives;\n    }\n\n    var scratchCenter = new Cartesian3();\n    var scratchMatrix4 = new Matrix4();\n\n    function unpackBuffer(buffer) {\n        var packedBuffer = new Float64Array(buffer);\n\n        var offset = 0;\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\n        offset += Cartesian3.packedLength;\n\n        Matrix4.unpack(packedBuffer, offset, scratchMatrix4);\n    }\n\n    function packedBatchedIndicesLength(batchedIndices) {\n        var length = batchedIndices.length;\n        var count = 0;\n        for (var i = 0; i < length; ++i) {\n            count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\n        }\n        return count;\n    }\n\n    function packBuffer(indicesBytesPerElement, batchedIndices, boundingVolumes) {\n        var numBVs = boundingVolumes.length;\n        var length = 1 + 1 + numBVs * BoundingSphere.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\n\n        var packedBuffer = new Float64Array(length);\n\n        var offset = 0;\n        packedBuffer[offset++] = indicesBytesPerElement;\n        packedBuffer[offset++] = numBVs;\n\n        for (var i = 0; i < numBVs; ++i) {\n            BoundingSphere.pack(boundingVolumes[i], packedBuffer, offset);\n            offset += BoundingSphere.packedLength;\n        }\n\n        var indicesLength = batchedIndices.length;\n        packedBuffer[offset++] = indicesLength;\n\n        for (var j = 0; j < indicesLength; ++j) {\n            var batchedIndex = batchedIndices[j];\n\n            Color.pack(batchedIndex.color, packedBuffer, offset);\n            offset += Color.packedLength;\n\n            packedBuffer[offset++] = batchedIndex.offset;\n            packedBuffer[offset++] = batchedIndex.count;\n\n            var batchIds = batchedIndex.batchIds;\n            var batchIdsLength = batchIds.length;\n            packedBuffer[offset++] = batchIdsLength;\n\n            for (var k = 0; k < batchIdsLength; ++k) {\n                packedBuffer[offset++] = batchIds[k];\n            }\n        }\n\n        return packedBuffer;\n    }\n\n    function createVectorTileGeometries(parameters, transferableObjects) {\n        var boxes = defined(parameters.boxes) ? new Float32Array(parameters.boxes) : undefined;\n        var boxBatchIds = defined(parameters.boxBatchIds) ? new Uint16Array(parameters.boxBatchIds) : undefined;\n        var cylinders =  defined(parameters.cylinders) ? new Float32Array(parameters.cylinders) : undefined;\n        var cylinderBatchIds = defined(parameters.cylinderBatchIds) ? new Uint16Array(parameters.cylinderBatchIds) : undefined;\n        var ellipsoids =  defined(parameters.ellipsoids) ? new Float32Array(parameters.ellipsoids) : undefined;\n        var ellipsoidBatchIds = defined(parameters.ellipsoidBatchIds) ? new Uint16Array(parameters.ellipsoidBatchIds) : undefined;\n        var spheres = defined(parameters.spheres) ?  new Float32Array(parameters.spheres) : undefined;\n        var sphereBatchIds = defined(parameters.sphereBatchIds) ? new Uint16Array(parameters.sphereBatchIds) : undefined;\n\n        var numberOfBoxes = defined(boxes) ? boxBatchIds.length : 0;\n        var numberOfCylinders = defined(cylinders) ? cylinderBatchIds.length : 0;\n        var numberOfEllipsoids = defined(ellipsoids) ? ellipsoidBatchIds.length : 0;\n        var numberOfSpheres = defined(spheres) ? sphereBatchIds.length : 0;\n\n        var boxGeometry = BoxGeometry.getUnitBox();\n        var cylinderGeometry = CylinderGeometry.getUnitCylinder();\n        var ellipsoidGeometry = EllipsoidGeometry.getUnitEllipsoid();\n\n        var boxPositions = boxGeometry.attributes.position.values;\n        var cylinderPositions = cylinderGeometry.attributes.position.values;\n        var ellipsoidPositions = ellipsoidGeometry.attributes.position.values;\n\n        var numberOfPositions = boxPositions.length * numberOfBoxes;\n        numberOfPositions += cylinderPositions.length * numberOfCylinders;\n        numberOfPositions += ellipsoidPositions.length * (numberOfEllipsoids + numberOfSpheres);\n\n        var boxIndices = boxGeometry.indices;\n        var cylinderIndices = cylinderGeometry.indices;\n        var ellipsoidIndices = ellipsoidGeometry.indices;\n\n        var numberOfIndices = boxIndices.length * numberOfBoxes;\n        numberOfIndices += cylinderIndices.length * numberOfCylinders;\n        numberOfIndices += ellipsoidIndices.length * (numberOfEllipsoids + numberOfSpheres);\n\n        var positions = new Float32Array(numberOfPositions);\n        var vertexBatchIds = new Uint16Array(numberOfPositions / 3);\n        var indices = IndexDatatype.createTypedArray(numberOfPositions / 3, numberOfIndices);\n\n        var numberOfGeometries = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\n        var batchIds = new Uint16Array(numberOfGeometries);\n        var batchedIndices = new Array(numberOfGeometries);\n        var indexOffsets = new Uint32Array(numberOfGeometries);\n        var indexCounts = new Uint32Array(numberOfGeometries);\n        var boundingVolumes = new Array(numberOfGeometries);\n\n        unpackBuffer(parameters.packedBuffer);\n\n        var options = {\n            batchTableColors : new Uint32Array(parameters.batchTableColors),\n            positions : positions,\n            vertexBatchIds : vertexBatchIds,\n            indices : indices,\n            batchIds : batchIds,\n            batchedIndices : batchedIndices,\n            indexOffsets : indexOffsets,\n            indexCounts : indexCounts,\n            boundingVolumes : boundingVolumes,\n            positionOffset : 0,\n            batchIdIndex : 0,\n            indexOffset : 0,\n            batchedIndicesOffset : 0,\n            modelMatrix : scratchMatrix4,\n            center : scratchCenter\n        };\n\n        createPrimitive(options, boxes, boxBatchIds, boxGeometry, boxModelMatrixAndBoundingVolume);\n        createPrimitive(options, cylinders, cylinderBatchIds, cylinderGeometry, cylinderModelMatrixAndBoundingVolume);\n        createPrimitive(options, ellipsoids, ellipsoidBatchIds, ellipsoidGeometry, ellipsoidModelMatrixAndBoundingVolume);\n        createPrimitive(options, spheres, sphereBatchIds, ellipsoidGeometry, sphereModelMatrixAndBoundingVolume);\n\n        var packedBuffer = packBuffer(indices.BYTES_PER_ELEMENT, batchedIndices, boundingVolumes);\n        transferableObjects.push(positions.buffer, vertexBatchIds.buffer, indices.buffer);\n        transferableObjects.push(batchIds.buffer, indexOffsets.buffer, indexCounts.buffer);\n        transferableObjects.push(packedBuffer.buffer);\n\n        return {\n            positions : positions.buffer,\n            vertexBatchIds : vertexBatchIds.buffer,\n            indices : indices.buffer,\n            indexOffsets : indexOffsets.buffer,\n            indexCounts : indexCounts.buffer,\n            batchIds : batchIds.buffer,\n            packedBuffer : packedBuffer.buffer\n        };\n    }\nexport default createTaskProcessorWorker(createVectorTileGeometries);\n"],"names":["Cartesian3","Matrix4","BoundingSphere","defined","Color","BoxGeometry","CylinderGeometry","EllipsoidGeometry","IndexDatatype"],"mappings":"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"}