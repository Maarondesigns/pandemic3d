{"version":3,"file":"WebMercatorProjection-ed47c368.js","sources":["../../../../Source/Core/WebMercatorProjection.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\n     * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\n     * the spherical (rather than ellipsoidal) equations.\n     *\n     * @alias WebMercatorProjection\n     * @constructor\n     *\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n     *\n     * @see GeographicProjection\n     */\n    function WebMercatorProjection(ellipsoid) {\n        this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        this._semimajorAxis = this._ellipsoid.maximumRadius;\n        this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\n    }\n\n    Object.defineProperties(WebMercatorProjection.prototype, {\n        /**\n         * Gets the {@link Ellipsoid}.\n         *\n         * @memberof WebMercatorProjection.prototype\n         *\n         * @type {Ellipsoid}\n         * @readonly\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        }\n    });\n\n    /**\n     * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\n     * in the range -PI/2 to PI/2.\n     *\n     * @param {Number} mercatorAngle The angle to convert.\n     * @returns {Number} The geodetic latitude in radians.\n     */\n    WebMercatorProjection.mercatorAngleToGeodeticLatitude = function(mercatorAngle) {\n        return CesiumMath.PI_OVER_TWO - (2.0 * Math.atan(Math.exp(-mercatorAngle)));\n    };\n\n    /**\n     * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\n     * angle in the range -PI to PI.\n     *\n     * @param {Number} latitude The geodetic latitude in radians.\n     * @returns {Number} The Mercator angle.\n     */\n    WebMercatorProjection.geodeticLatitudeToMercatorAngle = function(latitude) {\n        // Clamp the latitude coordinate to the valid Mercator bounds.\n        if (latitude > WebMercatorProjection.MaximumLatitude) {\n            latitude = WebMercatorProjection.MaximumLatitude;\n        } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\n            latitude = -WebMercatorProjection.MaximumLatitude;\n        }\n        var sinLatitude = Math.sin(latitude);\n        return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n    };\n\n    /**\n     * The maximum latitude (both North and South) supported by a Web Mercator\n     * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n     * for any latitude up to (but not including) 90 degrees, but it makes sense\n     * to cut it off sooner because it grows exponentially with increasing latitude.\n     * The logic behind this particular cutoff value, which is the one used by\n     * Google Maps, Bing Maps, and Esri, is that it makes the projection\n     * square.  That is, the rectangle is equal in the X and Y directions.\n     *\n     * The constant value is computed by calling:\n     *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\n     *\n     * @type {Number}\n     */\n    WebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\n\n    /**\n     * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\n     * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\n     * is copied unmodified to the Z coordinate.\n     *\n     * @param {Cartographic} cartographic The cartographic coordinates in radians.\n     * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\n     *        new instance should be created.\n     * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\n     */\n    WebMercatorProjection.prototype.project = function(cartographic, result) {\n        var semimajorAxis = this._semimajorAxis;\n        var x = cartographic.longitude * semimajorAxis;\n        var y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographic.latitude) * semimajorAxis;\n        var z = cartographic.height;\n\n        if (!defined(result)) {\n            return new Cartesian3(x, y, z);\n        }\n\n        result.x = x;\n        result.y = y;\n        result.z = z;\n        return result;\n    };\n\n    /**\n     * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\n     * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\n     * height.\n     *\n     * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\n     * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\n     *        new instance should be created.\n     * @returns {Cartographic} The equivalent cartographic coordinates.\n     */\n    WebMercatorProjection.prototype.unproject = function(cartesian, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(cartesian)) {\n            throw new DeveloperError('cartesian is required');\n        }\n        //>>includeEnd('debug');\n\n        var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\n        var longitude = cartesian.x * oneOverEarthSemimajorAxis;\n        var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(cartesian.y * oneOverEarthSemimajorAxis);\n        var height = cartesian.z;\n\n        if (!defined(result)) {\n            return new Cartographic(longitude, latitude, height);\n        }\n\n        result.longitude = longitude;\n        result.latitude = latitude;\n        result.height = height;\n        return result;\n    };\nexport default WebMercatorProjection;\n"],"names":["defaultValue","Ellipsoid","CesiumMath","defined","Cartesian3","DeveloperError","Cartographic"],"mappings":"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"}