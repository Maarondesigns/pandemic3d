{"version":3,"file":"Check-c4f3a3fc.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js"],"sourcesContent":["import defined from './defined.js';\n\n    /**\n     * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n     * argument out of range, etc.  This exception should only be thrown during development;\n     * it usually indicates a bug in the calling code.  This exception should never be\n     * caught; instead the calling code should strive not to generate it.\n     * <br /><br />\n     * On the other hand, a {@link RuntimeError} indicates an exception that may\n     * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n     * to catch.\n     *\n     * @alias DeveloperError\n     * @constructor\n     * @extends Error\n     *\n     * @param {String} [message] The error message for this exception.\n     *\n     * @see RuntimeError\n     */\n    function DeveloperError(message) {\n        /**\n         * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n         * @type {String}\n         * @readonly\n         */\n        this.name = 'DeveloperError';\n\n        /**\n         * The explanation for why this exception was thrown.\n         * @type {String}\n         * @readonly\n         */\n        this.message = message;\n\n        //Browsers such as IE don't have a stack property until you actually throw the error.\n        var stack;\n        try {\n            throw new Error();\n        } catch (e) {\n            stack = e.stack;\n        }\n\n        /**\n         * The stack trace of this exception, if available.\n         * @type {String}\n         * @readonly\n         */\n        this.stack = stack;\n    }\n\n    if (defined(Object.create)) {\n        DeveloperError.prototype = Object.create(Error.prototype);\n        DeveloperError.prototype.constructor = DeveloperError;\n    }\n\n    DeveloperError.prototype.toString = function() {\n        var str = this.name + ': ' + this.message;\n\n        if (defined(this.stack)) {\n            str += '\\n' + this.stack.toString();\n        }\n\n        return str;\n    };\n\n    /**\n     * @private\n     */\n    DeveloperError.throwInstantiationError = function() {\n        throw new DeveloperError('This function defines an interface and should not be called directly.');\n    };\nexport default DeveloperError;\n","import defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\n\n    /**\n     * Contains functions for checking that supplied arguments are of a specified type\n     * or meet specified conditions\n     * @private\n     */\n    var Check = {};\n\n    /**\n     * Contains type checking functions, all using the typeof operator\n     */\n    Check.typeOf = {};\n\n    function getUndefinedErrorMessage(name) {\n        return name + ' is required, actual value was undefined';\n    }\n\n    function getFailedTypeErrorMessage(actual, expected, name) {\n        return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\n    }\n\n    /**\n     * Throws if test is not defined\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value that is to be checked\n     * @exception {DeveloperError} test must be defined\n     */\n    Check.defined = function (name, test) {\n        if (!defined(test)) {\n            throw new DeveloperError(getUndefinedErrorMessage(name));\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'function'\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @exception {DeveloperError} test must be typeof 'function'\n     */\n    Check.typeOf.func = function (name, test) {\n        if (typeof test !== 'function') {\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'string'\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @exception {DeveloperError} test must be typeof 'string'\n     */\n    Check.typeOf.string = function (name, test) {\n        if (typeof test !== 'string') {\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'number'\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @exception {DeveloperError} test must be typeof 'number'\n     */\n    Check.typeOf.number = function (name, test) {\n        if (typeof test !== 'number') {\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'number' and less than limit\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @param {Number} limit The limit value to compare against\n     * @exception {DeveloperError} test must be typeof 'number' and less than limit\n     */\n    Check.typeOf.number.lessThan = function (name, test, limit) {\n        Check.typeOf.number(name, test);\n        if (test >= limit) {\n            throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'number' and less than or equal to limit\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @param {Number} limit The limit value to compare against\n     * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n     */\n    Check.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n        Check.typeOf.number(name, test);\n        if (test > limit) {\n            throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'number' and greater than limit\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @param {Number} limit The limit value to compare against\n     * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n     */\n    Check.typeOf.number.greaterThan = function (name, test, limit) {\n        Check.typeOf.number(name, test);\n        if (test <= limit) {\n            throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'number' and greater than or equal to limit\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @param {Number} limit The limit value to compare against\n     * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n     */\n    Check.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n        Check.typeOf.number(name, test);\n        if (test < limit) {\n            throw new DeveloperError('Expected ' + name + ' to be greater than or equal to' + limit + ', actual value was ' + test);\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'object'\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @exception {DeveloperError} test must be typeof 'object'\n     */\n    Check.typeOf.object = function (name, test) {\n        if (typeof test !== 'object') {\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\n        }\n    };\n\n    /**\n     * Throws if test is not typeof 'boolean'\n     *\n     * @param {String} name The name of the variable being tested\n     * @param {*} test The value to test\n     * @exception {DeveloperError} test must be typeof 'boolean'\n     */\n    Check.typeOf.bool = function (name, test) {\n        if (typeof test !== 'boolean') {\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\n        }\n    };\n\n    /**\n     * Throws if test1 and test2 is not typeof 'number' and not equal in value\n     *\n     * @param {String} name1 The name of the first variable being tested\n     * @param {String} name2 The name of the second variable being tested against\n     * @param {*} test1 The value to test\n     * @param {*} test2 The value to test against\n     * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n     */\n    Check.typeOf.number.equals = function (name1, name2, test1, test2) {\n        Check.typeOf.number(name1, test1);\n        Check.typeOf.number(name2, test2);\n        if (test1 !== test2) {\n            throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\n        }\n    };\nexport default Check;\n"],"names":["defined"],"mappings":"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"}