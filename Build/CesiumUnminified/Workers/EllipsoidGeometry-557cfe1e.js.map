{"version":3,"file":"EllipsoidGeometry-557cfe1e.js","sources":["../../../../Source/Core/EllipsoidGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchPosition = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var scratchNormalST = new Cartesian3();\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n\n    /**\n     * A description of an ellipsoid centered at the origin.\n     *\n     * @alias EllipsoidGeometry\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n     * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n     * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n     * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n     * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n     * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n     * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n     * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n     * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n     *\n     * @see EllipsoidGeometry#createGeometry\n     *\n     * @example\n     * var ellipsoid = new Cesium.EllipsoidGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\n     * });\n     * var geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\n     */\n    function EllipsoidGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var radii = defaultValue(options.radii, defaultRadii);\n        var innerRadii = defaultValue(options.innerRadii, radii);\n        var minimumClock = defaultValue(options.minimumClock, 0.0);\n        var maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\n        var minimumCone = defaultValue(options.minimumCone, 0.0);\n        var maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        //>>includeStart('debug', pragmas.debug);\n        if (slicePartitions < 3) {\n            throw new DeveloperError('options.slicePartitions cannot be less than three.');\n        }\n        if (stackPartitions < 3) {\n            throw new DeveloperError('options.stackPartitions cannot be less than three.');\n        }\n        //>>includeEnd('debug');\n\n        this._radii = Cartesian3.clone(radii);\n        this._innerRadii = Cartesian3.clone(innerRadii);\n        this._minimumClock = minimumClock;\n        this._maximumClock = maximumClock;\n        this._minimumCone = minimumCone;\n        this._maximumCone = maximumCone;\n        this._stackPartitions = stackPartitions;\n        this._slicePartitions = slicePartitions;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createEllipsoidGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipsoidGeometry.packedLength = 2 * (Cartesian3.packedLength) + VertexFormat.packedLength + 7;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipsoidGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipsoidGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._radii, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Cartesian3.pack(value._innerRadii, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._minimumClock;\n        array[startingIndex++] = value._maximumClock;\n        array[startingIndex++] = value._minimumCone;\n        array[startingIndex++] = value._maximumCone;\n        array[startingIndex++] = value._stackPartitions;\n        array[startingIndex++] = value._slicePartitions;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchRadii = new Cartesian3();\n    var scratchInnerRadii = new Cartesian3();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        radii : scratchRadii,\n        innerRadii : scratchInnerRadii,\n        vertexFormat : scratchVertexFormat,\n        minimumClock : undefined,\n        maximumClock : undefined,\n        minimumCone : undefined,\n        maximumCone : undefined,\n        stackPartitions : undefined,\n        slicePartitions : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipsoidGeometry} [result] The object into which to store the result.\n     * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\n     */\n    EllipsoidGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n        startingIndex += Cartesian3.packedLength;\n\n        var innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\n        startingIndex += Cartesian3.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var minimumClock = array[startingIndex++];\n        var maximumClock = array[startingIndex++];\n        var minimumCone = array[startingIndex++];\n        var maximumCone = array[startingIndex++];\n        var stackPartitions = array[startingIndex++];\n        var slicePartitions = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.minimumClock = minimumClock;\n            scratchOptions.maximumClock = maximumClock;\n            scratchOptions.minimumCone = minimumCone;\n            scratchOptions.maximumCone = maximumCone;\n            scratchOptions.stackPartitions = stackPartitions;\n            scratchOptions.slicePartitions = slicePartitions;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new EllipsoidGeometry(scratchOptions);\n        }\n\n        result._radii = Cartesian3.clone(radii, result._radii);\n        result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._minimumClock = minimumClock;\n        result._maximumClock = maximumClock;\n        result._minimumCone = minimumCone;\n        result._maximumCone = maximumCone;\n        result._stackPartitions = stackPartitions;\n        result._slicePartitions = slicePartitions;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipsoidGeometry.createGeometry = function(ellipsoidGeometry) {\n        var radii = ellipsoidGeometry._radii;\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\n            return;\n        }\n\n        var innerRadii = ellipsoidGeometry._innerRadii;\n        if ((innerRadii.x <= 0) || (innerRadii.y <= 0) || innerRadii.z <= 0) {\n            return;\n        }\n\n        var minimumClock = ellipsoidGeometry._minimumClock;\n        var maximumClock = ellipsoidGeometry._maximumClock;\n        var minimumCone = ellipsoidGeometry._minimumCone;\n        var maximumCone = ellipsoidGeometry._maximumCone;\n        var vertexFormat = ellipsoidGeometry._vertexFormat;\n\n        // Add an extra slice and stack so that the number of partitions is the\n        // number of surfaces rather than the number of joints\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n        slicePartitions = Math.round(slicePartitions * Math.abs(maximumClock - minimumClock) / CesiumMath.TWO_PI);\n        stackPartitions = Math.round(stackPartitions * Math.abs(maximumCone - minimumCone) / CesiumMath.PI);\n\n        if (slicePartitions < 2) {\n            slicePartitions = 2;\n        }\n        if (stackPartitions < 2) {\n            stackPartitions = 2;\n        }\n\n        var i;\n        var j;\n        var index = 0;\n\n        // Create arrays for theta and phi. Duplicate first and last angle to\n        // allow different normals at the intersections.\n        var phis = [minimumCone];\n        var thetas = [minimumClock];\n        for (i = 0; i < stackPartitions; i++) {\n            phis.push(minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1));\n        }\n        phis.push(maximumCone);\n        for (j = 0; j < slicePartitions; j++) {\n            thetas.push(minimumClock + j * (maximumClock - minimumClock) / (slicePartitions - 1));\n        }\n        thetas.push(maximumClock);\n        var numPhis = phis.length;\n        var numThetas = thetas.length;\n\n        // Allow for extra indices if there is an inner surface and if we need\n        // to close the sides if the clock range is not a full circle\n        var extraIndices = 0;\n        var vertexMultiplier = 1.0;\n        var hasInnerSurface = ((innerRadii.x !== radii.x) || (innerRadii.y !== radii.y) || innerRadii.z !== radii.z);\n        var isTopOpen = false;\n        var isBotOpen = false;\n        var isClockOpen = false;\n        if (hasInnerSurface) {\n            vertexMultiplier = 2.0;\n            if (minimumCone > 0.0) {\n                isTopOpen = true;\n                extraIndices += (slicePartitions - 1);\n            }\n            if (maximumCone < Math.PI) {\n                isBotOpen = true;\n                extraIndices += (slicePartitions - 1);\n            }\n            if ((maximumClock - minimumClock) % CesiumMath.TWO_PI) {\n                isClockOpen = true;\n                extraIndices += ((stackPartitions - 1) * 2) + 1;\n            } else {\n                extraIndices += 1;\n            }\n        }\n\n        var vertexCount = numThetas * numPhis * vertexMultiplier;\n        var positions = new Float64Array(vertexCount * 3);\n        var isInner = arrayFill(new Array(vertexCount), false);\n        var negateNormal = arrayFill(new Array(vertexCount), false);\n\n        // Multiply by 6 because there are two triangles per sector\n        var indexCount = slicePartitions * stackPartitions * vertexMultiplier;\n        var numIndices = 6 * (indexCount + extraIndices + 1 - (slicePartitions + stackPartitions) * vertexMultiplier);\n        var indices = IndexDatatype.createTypedArray(indexCount, numIndices);\n\n        var normals = (vertexFormat.normal) ? new Float32Array(vertexCount * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(vertexCount * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(vertexCount * 3) : undefined;\n        var st = (vertexFormat.st) ? new Float32Array(vertexCount * 2) : undefined;\n\n        // Calculate sin/cos phi\n        var sinPhi = new Array(numPhis);\n        var cosPhi = new Array(numPhis);\n        for (i = 0; i < numPhis; i++) {\n            sinPhi[i] = sin(phis[i]);\n            cosPhi[i] = cos(phis[i]);\n        }\n\n        // Calculate sin/cos theta\n        var sinTheta = new Array(numThetas);\n        var cosTheta = new Array(numThetas);\n        for (j = 0; j < numThetas; j++) {\n            cosTheta[j] = cos(thetas[j]);\n            sinTheta[j] = sin(thetas[j]);\n        }\n\n        // Create outer surface\n        for (i = 0; i < numPhis; i++) {\n            for (j = 0; j < numThetas; j++) {\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n                positions[index++] = radii.z * cosPhi[i];\n            }\n        }\n\n        // Create inner surface\n        var vertexIndex = vertexCount / 2.0;\n        if (hasInnerSurface) {\n            for (i = 0; i < numPhis; i++) {\n                for (j = 0; j < numThetas; j++) {\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n                    positions[index++] = innerRadii.z * cosPhi[i];\n\n                    // Keep track of which vertices are the inner and which ones\n                    // need the normal to be negated\n                    isInner[vertexIndex] = true;\n                    if (i > 0 && i !== (numPhis - 1) && j !== 0 && j !== (numThetas - 1)) {\n                        negateNormal[vertexIndex] = true;\n                    }\n                    vertexIndex++;\n                }\n            }\n        }\n\n        // Create indices for outer surface\n        index = 0;\n        var topOffset;\n        var bottomOffset;\n        for (i = 1; i < (numPhis - 2); i++) {\n            topOffset = i * numThetas;\n            bottomOffset = (i + 1) * numThetas;\n\n            for (j = 1; j < numThetas - 2; j++) {\n                indices[index++] = bottomOffset + j;\n                indices[index++] = bottomOffset + j + 1;\n                indices[index++] = topOffset + j + 1;\n\n                indices[index++] = bottomOffset + j;\n                indices[index++] = topOffset + j + 1;\n                indices[index++] = topOffset + j;\n            }\n        }\n\n        // Create indices for inner surface\n        if (hasInnerSurface) {\n            var offset = numPhis * numThetas;\n            for (i = 1; i < (numPhis - 2); i++) {\n                topOffset = offset + i * numThetas;\n                bottomOffset = offset + (i + 1) * numThetas;\n\n                for (j = 1; j < numThetas - 2; j++) {\n                    indices[index++] = bottomOffset + j;\n                    indices[index++] = topOffset + j;\n                    indices[index++] = topOffset + j + 1;\n\n                    indices[index++] = bottomOffset + j;\n                    indices[index++] = topOffset + j + 1;\n                    indices[index++] = bottomOffset + j + 1;\n                }\n            }\n        }\n\n        var outerOffset;\n        var innerOffset;\n        if (hasInnerSurface) {\n            if (isTopOpen) {\n                // Connect the top of the inner surface to the top of the outer surface\n                innerOffset = numPhis * numThetas;\n                for (i = 1; i < numThetas - 2; i++) {\n                    indices[index++] = i;\n                    indices[index++] = i + 1;\n                    indices[index++] = innerOffset + i + 1;\n\n                    indices[index++] = i;\n                    indices[index++] = innerOffset + i + 1;\n                    indices[index++] = innerOffset + i;\n                }\n            }\n\n            if (isBotOpen) {\n                // Connect the bottom of the inner surface to the bottom of the outer surface\n                outerOffset = numPhis * numThetas - numThetas;\n                innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\n                for (i = 1; i < numThetas - 2; i++) {\n                    indices[index++] = outerOffset + i + 1;\n                    indices[index++] = outerOffset + i;\n                    indices[index++] = innerOffset + i;\n\n                    indices[index++] = outerOffset + i + 1;\n                    indices[index++] = innerOffset + i;\n                    indices[index++] = innerOffset + i + 1;\n                }\n            }\n        }\n\n        // Connect the edges if clock is not closed\n        if (isClockOpen) {\n            for (i = 1; i < numPhis - 2; i++) {\n                innerOffset = numThetas * numPhis + (numThetas * i);\n                outerOffset = numThetas * i;\n                indices[index++] = innerOffset;\n                indices[index++] = outerOffset + numThetas;\n                indices[index++] = outerOffset;\n\n                indices[index++] = innerOffset;\n                indices[index++] = innerOffset + numThetas;\n                indices[index++] = outerOffset + numThetas;\n            }\n\n            for (i = 1; i < numPhis - 2; i++) {\n                innerOffset = numThetas * numPhis + (numThetas * (i + 1)) - 1;\n                outerOffset = numThetas * (i + 1) - 1;\n                indices[index++] = outerOffset + numThetas;\n                indices[index++] = innerOffset;\n                indices[index++] = outerOffset;\n\n                indices[index++] = outerOffset + numThetas;\n                indices[index++] = innerOffset + numThetas;\n                indices[index++] = innerOffset;\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n        }\n\n        var stIndex = 0;\n        var normalIndex = 0;\n        var tangentIndex = 0;\n        var bitangentIndex = 0;\n        var vertexCountHalf = vertexCount / 2.0;\n\n        var ellipsoid;\n        var ellipsoidOuter = Ellipsoid.fromCartesian3(radii);\n        var ellipsoidInner = Ellipsoid.fromCartesian3(innerRadii);\n\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n            for (i = 0; i < vertexCount; i++) {\n                ellipsoid = (isInner[i]) ? ellipsoidInner : ellipsoidOuter;\n                var position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\n                var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n                if (negateNormal[i]) {\n                    Cartesian3.negate(normal, normal);\n                }\n\n                if (vertexFormat.st) {\n                    var normalST = Cartesian2.negate(normal, scratchNormalST);\n                    st[stIndex++] = (Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI) + 0.5;\n                    st[stIndex++] = (Math.asin(normal.z) / Math.PI) + 0.5;\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    var tangent = scratchTangent;\n\n                    // Use UNIT_X for the poles\n                    var tangetOffset = 0;\n                    var unit;\n                    if (isInner[i]) {\n                        tangetOffset = vertexCountHalf;\n                    }\n                    if ((!isTopOpen && (i >= tangetOffset && i < (tangetOffset + numThetas * 2)))) {\n                        unit = Cartesian3.UNIT_X;\n                    } else {\n                        unit = Cartesian3.UNIT_Z;\n                    }\n                    Cartesian3.cross(unit, normal, tangent);\n                    Cartesian3.normalize(tangent, tangent);\n\n                    if (vertexFormat.tangent) {\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        var bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\n                        Cartesian3.normalize(bitangent, bitangent);\n\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                    }\n                }\n            }\n\n            if (vertexFormat.st) {\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : st\n                });\n            }\n\n            if (vertexFormat.normal) {\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n        }\n\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\n            var length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoidOuter),\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\n        });\n    };\n\n    var unitEllipsoidGeometry;\n\n    /**\n     * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\n     * @returns {Geometry} The computed vertices and indices.\n     *\n     * @private\n     */\n    EllipsoidGeometry.getUnitEllipsoid = function() {\n        if (!defined(unitEllipsoidGeometry)) {\n            unitEllipsoidGeometry = EllipsoidGeometry.createGeometry((new EllipsoidGeometry({\n                radii : new Cartesian3(1.0, 1.0, 1.0),\n                vertexFormat : VertexFormat.POSITION_ONLY\n            })));\n        }\n        return unitEllipsoidGeometry;\n    };\nexport default EllipsoidGeometry;\n"],"names":["Cartesian3","defaultValue","CesiumMath","VertexFormat","DeveloperError","defined","arrayFill","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","Ellipsoid","Cartesian2","GeometryOffsetAttribute","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}