{"version":3,"file":"EllipsoidOutlineGeometry-bf2ab20b.js","sources":["../../../../Source/Core/EllipsoidOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\n    var cos = Math.cos;\n    var sin = Math.sin;\n\n    /**\n     * A description of the outline of an ellipsoid centered at the origin.\n     *\n     * @alias EllipsoidOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n     * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n     * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n     * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n     * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n     * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\n     * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\n     * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\n     *\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n     *\n     * @example\n     * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\n     *   stackPartitions: 6,\n     *   slicePartitions: 5\n     * });\n     * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\n     */\n    function EllipsoidOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var radii = defaultValue(options.radii, defaultRadii);\n        var innerRadii = defaultValue(options.innerRadii, radii);\n        var minimumClock = defaultValue(options.minimumClock, 0.0);\n        var maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\n        var minimumCone = defaultValue(options.minimumCone, 0.0);\n        var maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\n        var subdivisions = Math.round(defaultValue(options.subdivisions, 128));\n\n        //>>includeStart('debug', pragmas.debug);\n        if (stackPartitions < 1) {\n            throw new DeveloperError('options.stackPartitions cannot be less than 1');\n        }\n        if (slicePartitions < 0) {\n            throw new DeveloperError('options.slicePartitions cannot be less than 0');\n        }\n        if (subdivisions < 0) {\n            throw new DeveloperError('options.subdivisions must be greater than or equal to zero.');\n        }\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\n        }\n        //>>includeEnd('debug');\n\n        this._radii = Cartesian3.clone(radii);\n        this._innerRadii = Cartesian3.clone(innerRadii);\n        this._minimumClock = minimumClock;\n        this._maximumClock = maximumClock;\n        this._minimumCone = minimumCone;\n        this._maximumCone = maximumCone;\n        this._stackPartitions = stackPartitions;\n        this._slicePartitions = slicePartitions;\n        this._subdivisions = subdivisions;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createEllipsoidOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipsoidOutlineGeometry.packedLength = 2 * (Cartesian3.packedLength) + 8;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipsoidOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipsoidOutlineGeometry.pack = function(value, array, startingIndex) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(value)) {\n            throw new DeveloperError('value is required');\n        }\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._radii, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Cartesian3.pack(value._innerRadii, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        array[startingIndex++] = value._minimumClock;\n        array[startingIndex++] = value._maximumClock;\n        array[startingIndex++] = value._minimumCone;\n        array[startingIndex++] = value._maximumCone;\n        array[startingIndex++] = value._stackPartitions;\n        array[startingIndex++] = value._slicePartitions;\n        array[startingIndex++] = value._subdivisions;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchRadii = new Cartesian3();\n    var scratchInnerRadii = new Cartesian3();\n    var scratchOptions = {\n        radii : scratchRadii,\n        innerRadii : scratchInnerRadii,\n        minimumClock : undefined,\n        maximumClock : undefined,\n        minimumCone : undefined,\n        maximumCone : undefined,\n        stackPartitions : undefined,\n        slicePartitions : undefined,\n        subdivisions : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\n     * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\n     */\n    EllipsoidOutlineGeometry.unpack = function(array, startingIndex, result) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(array)) {\n            throw new DeveloperError('array is required');\n        }\n        //>>includeEnd('debug');\n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n        startingIndex += Cartesian3.packedLength;\n\n        var innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\n        startingIndex += Cartesian3.packedLength;\n\n        var minimumClock = array[startingIndex++];\n        var maximumClock = array[startingIndex++];\n        var minimumCone = array[startingIndex++];\n        var maximumCone = array[startingIndex++];\n        var stackPartitions = array[startingIndex++];\n        var slicePartitions = array[startingIndex++];\n        var subdivisions = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.minimumClock = minimumClock;\n            scratchOptions.maximumClock = maximumClock;\n            scratchOptions.minimumCone = minimumCone;\n            scratchOptions.maximumCone = maximumCone;\n            scratchOptions.stackPartitions = stackPartitions;\n            scratchOptions.slicePartitions = slicePartitions;\n            scratchOptions.subdivisions = subdivisions;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new EllipsoidOutlineGeometry(scratchOptions);\n        }\n\n        result._radii = Cartesian3.clone(radii, result._radii);\n        result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\n        result._minimumClock = minimumClock;\n        result._maximumClock = maximumClock;\n        result._minimumCone = minimumCone;\n        result._maximumCone = maximumCone;\n        result._stackPartitions = stackPartitions;\n        result._slicePartitions = slicePartitions;\n        result._subdivisions = subdivisions;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipsoidOutlineGeometry.createGeometry = function(ellipsoidGeometry) {\n        var radii = ellipsoidGeometry._radii;\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\n            return;\n        }\n\n        var innerRadii = ellipsoidGeometry._innerRadii;\n        if ((innerRadii.x <= 0) || (innerRadii.y <= 0) || (innerRadii.z <= 0)) {\n            return;\n        }\n\n        var minimumClock = ellipsoidGeometry._minimumClock;\n        var maximumClock = ellipsoidGeometry._maximumClock;\n        var minimumCone = ellipsoidGeometry._minimumCone;\n        var maximumCone = ellipsoidGeometry._maximumCone;\n        var subdivisions = ellipsoidGeometry._subdivisions;\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\n\n        // Add an extra slice and stack to remain consistent with EllipsoidGeometry\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n        slicePartitions = Math.round(slicePartitions * Math.abs(maximumClock - minimumClock) / CesiumMath.TWO_PI);\n        stackPartitions = Math.round(stackPartitions * Math.abs(maximumCone - minimumCone) / CesiumMath.PI);\n\n        if (slicePartitions < 2) {\n            slicePartitions = 2;\n        }\n        if (stackPartitions < 2) {\n            stackPartitions = 2;\n        }\n\n        var extraIndices = 0;\n        var vertexMultiplier = 1.0;\n        var hasInnerSurface = ((innerRadii.x !== radii.x) || (innerRadii.y !== radii.y) || innerRadii.z !== radii.z);\n        var isTopOpen = false;\n        var isBotOpen = false;\n        if (hasInnerSurface) {\n            vertexMultiplier = 2.0;\n            // Add 2x slicePartitions to connect the top/bottom of the outer to\n            // the top/bottom of the inner\n            if (minimumCone > 0.0) {\n                isTopOpen = true;\n                extraIndices += slicePartitions;\n            }\n            if (maximumCone < Math.PI) {\n                isBotOpen = true;\n                extraIndices += slicePartitions;\n            }\n        }\n\n        var vertexCount = subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\n        var positions = new Float64Array(vertexCount * 3);\n\n        // Multiply by two because two points define each line segment\n        var numIndices = 2 * (vertexCount + extraIndices - (slicePartitions + stackPartitions) * vertexMultiplier);\n        var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\n\n        var i;\n        var j;\n        var theta;\n        var phi;\n        var index = 0;\n\n        // Calculate sin/cos phi\n        var sinPhi = new Array(stackPartitions);\n        var cosPhi = new Array(stackPartitions);\n        for (i = 0; i < stackPartitions; i++) {\n            phi = minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1);\n            sinPhi[i] = sin(phi);\n            cosPhi[i] = cos(phi);\n        }\n\n        // Calculate sin/cos theta\n        var sinTheta = new Array(subdivisions);\n        var cosTheta = new Array(subdivisions);\n        for (i = 0; i < subdivisions; i++) {\n            theta = minimumClock + i * (maximumClock - minimumClock) / (subdivisions - 1);\n            sinTheta[i] = sin(theta);\n            cosTheta[i] = cos(theta);\n        }\n\n        // Calculate the latitude lines on the outer surface\n        for (i = 0; i < stackPartitions; i++) {\n            for (j = 0; j < subdivisions; j++) {\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n                positions[index++] = radii.z * cosPhi[i];\n            }\n        }\n\n        // Calculate the latitude lines on the inner surface\n        if (hasInnerSurface) {\n            for (i = 0; i < stackPartitions; i++) {\n                for (j = 0; j < subdivisions; j++) {\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n                    positions[index++] = innerRadii.z * cosPhi[i];\n                }\n            }\n        }\n\n        // Calculate sin/cos phi\n        sinPhi.length = subdivisions;\n        cosPhi.length = subdivisions;\n        for (i = 0; i < subdivisions; i++) {\n            phi = minimumCone + i * (maximumCone - minimumCone) / (subdivisions - 1);\n            sinPhi[i] = sin(phi);\n            cosPhi[i] = cos(phi);\n        }\n\n        // Calculate sin/cos theta for each slice partition\n        sinTheta.length = slicePartitions;\n        cosTheta.length = slicePartitions;\n        for (i = 0; i < slicePartitions; i++) {\n            theta = minimumClock + i * (maximumClock - minimumClock) / (slicePartitions - 1);\n            sinTheta[i] = sin(theta);\n            cosTheta[i] = cos(theta);\n        }\n\n        // Calculate the longitude lines on the outer surface\n        for (i = 0; i < subdivisions; i++) {\n            for (j = 0; j < slicePartitions; j++) {\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n                positions[index++] = radii.z * cosPhi[i];\n            }\n        }\n\n        // Calculate the longitude lines on the inner surface\n        if (hasInnerSurface) {\n            for (i = 0; i < subdivisions; i++) {\n                for (j = 0; j < slicePartitions; j++) {\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n                    positions[index++] = innerRadii.z * cosPhi[i];\n                }\n            }\n        }\n\n        // Create indices for the latitude lines\n        index = 0;\n        for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\n            var topOffset = i * subdivisions;\n            for (j = 0; j < subdivisions - 1; j++) {\n                indices[index++] = topOffset + j;\n                indices[index++] = topOffset + j + 1;\n            }\n        }\n\n        // Create indices for the outer longitude lines\n        var offset = stackPartitions * subdivisions * vertexMultiplier;\n        for (i = 0; i < slicePartitions; i++) {\n            for (j = 0; j < subdivisions - 1; j++) {\n                indices[index++] = offset + i + (j * slicePartitions);\n                indices[index++] = offset + i + (j + 1) * slicePartitions;\n            }\n        }\n\n        // Create indices for the inner longitude lines\n        if (hasInnerSurface) {\n            offset = stackPartitions * subdivisions * vertexMultiplier + slicePartitions * subdivisions;\n            for (i = 0; i < slicePartitions; i++) {\n                for (j = 0; j < subdivisions - 1; j++) {\n                    indices[index++] = offset + i + (j * slicePartitions);\n                    indices[index++] = offset + i + (j + 1) * slicePartitions;\n                }\n            }\n        }\n\n        if (hasInnerSurface) {\n            var outerOffset = stackPartitions * subdivisions * vertexMultiplier;\n            var innerOffset = outerOffset + (subdivisions * slicePartitions);\n            if (isTopOpen) {\n                // Draw lines from the top of the inner surface to the top of the outer surface\n                for (i = 0; i < slicePartitions; i++) {\n                    indices[index++] = outerOffset + i;\n                    indices[index++] = innerOffset + i;\n                }\n            }\n\n            if (isBotOpen) {\n                // Draw lines from the top of the inner surface to the top of the outer surface\n                outerOffset += (subdivisions * slicePartitions) - slicePartitions;\n                innerOffset += (subdivisions * slicePartitions) - slicePartitions;\n                for (i = 0; i < slicePartitions; i++) {\n                    indices[index++] = outerOffset + i;\n                    indices[index++] = innerOffset + i;\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\n            var length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\n        });\n    };\nexport default EllipsoidOutlineGeometry;\n"],"names":["Cartesian3","defaultValue","CesiumMath","DeveloperError","defined","GeometryOffsetAttribute","Ellipsoid","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","arrayFill","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}